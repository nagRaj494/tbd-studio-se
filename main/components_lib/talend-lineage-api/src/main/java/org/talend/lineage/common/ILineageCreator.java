// ============================================================================
//
// Copyright (C) 2006-2016 Talend Inc. - www.talend.com
//
// This source code is available under agreement available at
// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
//
// You should have received a copy of the agreement
// along with this program; if not, write to Talend SA
// 9 rue Pages 92150 Suresnes, France
//
// ============================================================================
package org.talend.lineage.common;

import java.util.List;
import java.util.Map;

/**
 * Interface to be implemented by lineage providers.
 * 
 * Note : The interface methods will be called from the code generated by the studio.
 *
 */
public interface ILineageCreator {

    /**
     * Adds a node representing a graphical studio node to the lineage creator. The lineage provider is responsible for
     * creating an internal representation using the provided arguments.
     *
     * @param name : Component name
     * @param schema : Component output schema
     * @param inputNodes : List of downstream components
     * @param outputNodes : List of upstream components
     * @param metadata : Component's metadata
     */
    void addNodeToLineage(String name, Map<String, String> schema, List<String> inputNodes, List<String> outputNodes,
            Map<String, Object> metadata);

    /**
     * Adds a dataset representing a lineage's fileSystem inputs/outputs. The lineage provider is responsible for
     * creating an internal representation using the provided arguments.
     * 
     * @param schema : Input/Output schema
     * @param componentName : Component reading/writing the dataset
     * @param fileSystemPath : FileSystem path
     * @param fileFormat : File Format (CSV, JSON, ...)
     */
    void addDataset(Map<String, String> schema, String componentName, String fileSystemPath, String fileFormat);

    /**
     * Adds metadata at the job level (Talend's job level). The method is called a single time after the instantiation
     * of the lineageCreator. The lineage provider is responsible for creating an internal representation using the
     * provided arguments.
     * 
     * @param metadata : metadata associated to the job.
     */
    void addJobInfo(Map<String, Object> jobMetadata);

    /**
     * This method is called by the studio at the end of the job's execution. The role of this job is to send the
     * lineage data to the provider. This is where the provider implementation does the necessary calls to send data to
     * provider. Since the method calls an external provider there's a chance that the method will fail (for example the
     * provider not available) so we have to capture the exception and re-raise if dieOnError is true else we fail
     * silently.
     *
     * @param dieOnError : Fail the whole talend job or not
     */
    void sendToLineageProvider(Boolean dieOnError);
}
