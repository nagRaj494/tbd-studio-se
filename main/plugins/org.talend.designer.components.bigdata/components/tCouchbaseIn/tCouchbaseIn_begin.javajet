<%@ jet
	    imports="
		org.talend.core.model.process.INode 	
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		java.util.List
		java.util.Map
	    "
%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	boolean useExistingConn = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	%>
	com.couchbase.client.CouchbaseClient client_<%=cid%> = null;
	<%
	if(useExistingConn){
	    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
		%>
	    client_<%=cid%> = (com.couchbase.client.CouchbaseClient)globalMap.get("conn_<%=connection%>");
		<%
		if(isLog4jEnabled){
		%>	
			if(client_<%=cid%> != null) {
				log.info("<%=cid%> - Get an existing client from " + "<%=connection%>" + ".");
			}
		<%
		}
	}else{
	    String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	    String username = ElementParameterParser.getValue(node, "__USER__");

	    List<Map<String, String>> URIList = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__URIS__");
	    if(isLog4jEnabled){
		%>
			System.setProperty("net.spy.log.LoggerImpl", "net.spy.memcached.compat.log.Log4JLogger");
		<%
		}
		%>
	    java.util.ArrayList<java.net.URI> uris_<%=cid%> = new java.util.ArrayList<java.net.URI>();
	    <%
		for(java.util.Map<String,String> map:URIList){
	    %>
	    	uris_<%=cid%>.add(java.net.URI.create(<%=map.get("URI")%>));
	    <%
		}
	    %>
	    
        <%
        String passwordFieldName = "__PASS__";
        %>
        
        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>		    
	    
		client_<%=cid%> = new com.couchbase.client.CouchbaseClient(uris_<%=cid%>, <%=dbname%>,<%if(username!=null && !"".equals(username)){%><%=username%>,<%}%> decryptedPassword_<%=cid%>);
	<%
	}
	%>
	
	int nb_line_<%=cid%> = 0;
	
	<%
	List<IMetadataTable> metadatas = node.getMetadataList();
	
	if ((metadatas!=null) && (metadatas.size() > 0)) {
	    IMetadataTable metadata = metadatas.get(0);
	    if (metadata != null) {
	    	
			List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
			if (conns != null){
			
				if (conns.size()>0){
			
					IConnection conn =conns.get(0);
					String connName = conn.getName();
					metadata = conn.getMetadataTable();
					if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			
						List<IMetadataColumn> columns = metadata.getListColumns();
						int nbColumns = columns.size();
						if(nbColumns>0){
						    class Generate{
						    
						    	private boolean isLog4jEnabled;
						    	
						    	public void setIsLog4jEnabled(boolean isLog4jEnabled){
						    		this.isLog4jEnabled = isLog4jEnabled;
						    	}

						        public void generate(String connName,String cid,IMetadataTable metadata){
								    String[] columns = new String[]{"Id","Key","Value","jsonDoc"};
								    for(String columnName:columns){
								        IMetadataColumn column = metadata.getColumn(columnName);
								        if(column!=null){
								            String talendType = column.getTalendType();
								            String typeToGenerate = JavaTypesManager.getTypeToGenerate(talendType, column.isNullable());
								            JavaType javaType = JavaTypesManager.getJavaTypeFromId(talendType);
								            String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
								            String method = columnName;
								            if("jsonDoc".equals(columnName)){
								                method = "Document";
								            }
								            if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
											%>
												<%=connName%>.<%=columnName %> = jsonRow_<%=cid%>.get<%=method%>();
											<%
								            }else if(javaType == JavaTypesManager.DATE) {
											%>
								                <%=connName%>.<%=columnName %> = ParserUtils.parseTo_Date(new Date(jsonRow_<%=cid%>.get<%=method%>()),<%=patternValue%>);
											<%
								            }else if(javaType == JavaTypesManager.BYTE_ARRAY){
											%>
								                <%=connName%>.<%=columnName %> = jsonRow_<%=cid%>.get<%=method%>().getBytes();
											<%
								            }else{
											%>
								                <%=connName%>.<%=columnName %> = ParserUtils.parseTo_<%= typeToGenerate %>(jsonRow_<%=cid%>.get<%=method%>());
											<%
								            }
								        }
								    }
									%>
								    nb_line_<%=cid%>++;
								<%
						        }
						        public void generateParameter(String cid,Object key,String method){
						            if(key!=null && !"".equals(key.toString().trim()) && !"\"\"".equals(key.toString().trim())){
									    %>
									    key_<%=cid%> = <%=key%>;
									    if(key_<%=cid%> instanceof String){
									        query_<%=cid%>.<%=method%>(key_<%=cid%>.toString());
									    }else if(key_<%=cid%> instanceof Object[]){
									        query_<%=cid%>.<%=method%>(com.couchbase.client.protocol.views.ComplexKey.of((Object[])key_<%=cid%>));
									    }else{
									    	<%
									    	if(isLog4jEnabled){
											%>
												log.error("<%=cid%> - The type of "+key_<%=cid%>+" should be String or Object[]!");
											<%
											}
									    	%>
									        throw new RuntimeException("The type of "+key_<%=cid%>+" should be String or Object[]!");
									    }
									    <%
									}
						        }
						        public void generateMap(String connName,String cid,IMetadataColumn column){
						            String columnName = column.getLabel();
								    String talendType = column.getTalendType();
								    String typeToGenerate = JavaTypesManager.getTypeToGenerate(talendType, column.isNullable());
								    JavaType javaType = JavaTypesManager.getJavaTypeFromId(talendType);
								    String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
								    if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {
								    %>
								        <%=connName%>.<%=columnName %> = str_<%=cid%>;
								    <%
								    }else if(javaType == JavaTypesManager.DATE) {
								    %>
								        <%=connName%>.<%=columnName %> = ParserUtils.parseTo_Date(new Date(str_<%=cid%>),<%=patternValue%>);
								    <%
								    }else if(javaType == JavaTypesManager.BYTE_ARRAY){
								    %>
								        <%=connName%>.<%=columnName %> = str_<%=cid%>.getBytes();
								    <%
								    }else{
								    %>
								        <%=connName%>.<%=columnName %> = ParserUtils.parseTo_<%= typeToGenerate %>(str_<%=cid%>);
								    <%
								    }
								    %>
								    nb_line_<%=cid%>++;
								<%
						        }
						    }
						    Generate generateCode = new Generate();
						    generateCode.setIsLog4jEnabled(isLog4jEnabled);
						    String fromview = ElementParameterParser.getValue(node,"__FROMVIEW__");
						    
						    log4jFileUtil.startRetriveDataInfo();
						    if("true".equals(fromview)){
						        String docName = ElementParameterParser.getValue(node, "__DOC__");
						        String viewName = ElementParameterParser.getValue(node, "__VIEW__");
						        String include_docs = ElementParameterParser.getValue(node,"__INCLUDE_DOCS__");
						        String inclusiveend = ElementParameterParser.getValue(node,"__INCLUSIVEEND__");
						        String isreduce = ElementParameterParser.getValue(node,"__ISREDUCE__");
						        String stale = ElementParameterParser.getValue(node,"__STALE__");
						        String debug = ElementParameterParser.getValue(node,"__DEBUG__");
						        String descending = ElementParameterParser.getValue(node,"__DESCENDING__");
						        String useComplexkey = ElementParameterParser.getValue(node,"__USECOMPLEXKEY__");
						        Object complexkey = ElementParameterParser.getValue(node,"__COMPLEXKEY__");
						        String viewkey = ElementParameterParser.getValue(node, "__VIEWKEY__");
						        Object startkey = ElementParameterParser.getValue(node,"__STARTKEY__");
						        Object endkey = ElementParameterParser.getValue(node,"__ENDKEY__");
						        String startkey_docid = ElementParameterParser.getValue(node,"__STARTKEY_DOCID__");
						        String endkey_docid = ElementParameterParser.getValue(node,"__ENDKEY_DOCID__");
						        String group = ElementParameterParser.getValue(node,"__GROUP__");
						        String group_level = ElementParameterParser.getValue(node,"__GROUP_LEVEL__");
						        String doc_action = ElementParameterParser.getValue(node,"__DOC_ACTION__");
						        String view_action = ElementParameterParser.getValue(node,"__VIEW_ACTION__");
						        String map = ElementParameterParser.getValue(node,"__MAP__");
						        String reduce = ElementParameterParser.getValue(node,"__REDUCE__");
						        String limit = ElementParameterParser.getValue(node, "__LIMIT__");
						        String skip = ElementParameterParser.getValue(node, "__SKIP__");
						        if("NONE".equals(doc_action) && "CREATE".equals(view_action)){
								    %>
								    com.couchbase.client.protocol.views.DesignDocument dd_<%=cid%> = client_<%=cid%>.getDesignDocument(<%=docName%>);
								    <%
								}else if("CREATE".equals(doc_action)){
						            %>
						            com.couchbase.client.protocol.views.DesignDocument dd_<%=cid%> = new com.couchbase.client.protocol.views.DesignDocument(<%=docName%>);
						            <%
						        }else if("DROP_CREATE".equals(doc_action)){
								    %>
								    client_<%=cid%>.deleteDesignDoc(<%=docName%>);
								    com.couchbase.client.protocol.views.DesignDocument dd_<%=cid%> = new com.couchbase.client.protocol.views.DesignDocument(<%=docName%>);
								    <%
								}
						        if("CREATE".equals(view_action)){
								%>
								    com.couchbase.client.protocol.views.ViewDesign vd_<%=cid%> = new com.couchbase.client.protocol.views.ViewDesign(<%=viewName%>,<%=map%>,<%=reduce%>);
								    dd_<%=cid%>.setView(vd_<%=cid%>);
								<%
						        }
						        if("CREATE".equals(view_action) || !"NONE".equals(doc_action)){
								%>
								    client_<%=cid%>.createDesignDoc(dd_<%=cid%>);
								<%
						        }
								%>
								
								com.couchbase.client.protocol.views.View view_<%=cid%> = client_<%=cid%>.getView(<%=docName%>, <%=viewName%>);
								com.couchbase.client.protocol.views.Query query_<%=cid%> = new com.couchbase.client.protocol.views.Query();
								Object key_<%=cid%> = null;
								<%
								generateCode.generateParameter(cid,startkey,"setRangeStart");
								generateCode.generateParameter(cid,endkey,"setRangeEnd");
								if(startkey_docid!=null && !"".equals(startkey_docid.replaceAll("\\\"", ""))){
								%>
								    query_<%=cid%>.setStartkeyDocID(<%=startkey_docid%>);
								<%
								}
								if(endkey_docid!=null && !"".equals(endkey_docid.replaceAll("\\\"", ""))){
								%>
								    query_<%=cid%>.setEndkeyDocID(<%=endkey_docid%>);
								<%
								}
								if("true".equals(useComplexkey)){
									generateCode.generateParameter(cid,complexkey,"setKeys");
								} else if(viewkey!=null &&!"".equals(viewkey.replaceAll("\\\"", ""))){
								%>
								    query_<%=cid%>.setKey(<%=viewkey%>);
								<%
								}
								if(limit!=null &&!"".equals(limit)){
								%>
								    query_<%=cid%>.setLimit(<%=limit%>);
								<%
								}
								if(skip!=null &&!"".equals(skip)){
								%>
								    query_<%=cid%>.setSkip(<%=skip%>);
								<%
								}
								if("false".equals(isreduce)&&"true".equals(include_docs)){
								%>
								    query_<%=cid%>.setIncludeDocs(<%=include_docs%>); 
								<%
								}else if("true".equals(isreduce)&&"false".equals(include_docs)){
								%>
								    query_<%=cid%>.setReduce(<%=isreduce%>);
									<%
								    if("true".equals(group)){
									%>
								        query_<%=cid%>.setGroup(<%=group%>);
									<%
								    }
								    if(group_level!=null && !"".equals(group_level.trim())){
									%>
								        query_<%=cid%>.setGroupLevel(<%=group_level%>);
									<%
								    }
								}
								// fromview true reduce false doc false --->id,key,value ----->real component
								// fromview true reduce true doc false --->key value ----->real component
								// fromview true reduce false doc true --->id key value doc
								// fromview false isjson true --->id doc
								// fromview false isjson false --->id value ----->real component
								%>
								query_<%=cid%>.setStale(com.couchbase.client.protocol.views.Stale.<%=stale%>);
								query_<%=cid%>.setDescending(<%=descending%>);
								query_<%=cid%>.setDebug(<%=debug%>);
								query_<%=cid%>.setInclusiveEnd(<%=inclusiveend%>); 
								com.couchbase.client.protocol.views.ViewResponse result_<%=cid%> = client_<%=cid%>.query(view_<%=cid%>, query_<%=cid%>);
								java.util.Iterator<com.couchbase.client.protocol.views.ViewRow> itr_<%=cid%> = result_<%=cid%>.iterator();
								while (itr_<%=cid%>.hasNext()) {
								    com.couchbase.client.protocol.views.ViewRow  jsonRow_<%=cid%> = itr_<%=cid%>.next();
									<%
								    generateCode.generate(connName,cid,metadata);
								    log4jFileUtil.debugRetriveData(node);
							}else{
								String searchKey = ElementParameterParser.getValue(node, "__KEY__");
								%>                            
								java.util.Map<String, Object> Map_<%=cid%> = client_<%=cid%>.getBulk(<%=searchKey%>);
								for (java.util.Map.Entry<String, Object> m_<%=cid%> : Map_<%=cid%>.entrySet()) {
								    Object obj_<%=cid%> = m_<%=cid%>.getValue();
								    if(obj_<%=cid%>!=null){
								        String str_<%=cid%> = obj_<%=cid%>.toString();
										<%
										if(metadata.getColumn("Key")!=null){
										%>
											<%=connName%>.Key = m_<%=cid%>.getKey();
										<%
										}
								        IMetadataColumn column = metadata.getColumn("Value");
								        if(column!=null){
								            generateCode.generateMap(connName,cid,column);
								        }
										log4jFileUtil.debugRetriveData(node);
										%>
									}
							<%
							}
						}
					}
				}
			}
		}
	}
	%>