<%@ jet 
imports="
		java.util.List
		java.util.Map
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.INode
		org.talend.designer.codegen.config.CodeGeneratorArgument
		"
%>

	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
	
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	String zookeeper_quorum = ElementParameterParser.getValue(node, "__ZOOKEEPER_QUORUM__");
	String zookeeper_client_port = ElementParameterParser.getValue(node, "__ZOOKEEPER_CLIENT_PORT__");
	String table_name = ElementParameterParser.getValue(node, "__TABLE__");

	boolean setTableNsMapping = "true".equals(ElementParameterParser.getValue(node, "__SET_TABLE_NS_MAPPING__"));
	String tableNsMapping = ElementParameterParser.getValue(node, "__TABLE_NS_MAPPING__");
	boolean useTableNsMapping = setTableNsMapping && ((tableNsMapping != null)&&(!tableNsMapping.equals("")));

	boolean useBatchMode = ElementParameterParser.getBooleanValue(node, "__USE_BATCH_MODE__");
	
	String distribution = null;
	String hbaseVersion = null;
	boolean isHadoop2 = false;

	if(!"true".equals(useExistingConn)) {
		distribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
		hbaseVersion = ElementParameterParser.getValue(node, "__HBASE_VERSION__");
		isHadoop2 = "HADOOP_2".equals(ElementParameterParser.getValue(node, "__HADOOP_CUSTOM_VERSION__"));
	} else {
		String connectionSid = ElementParameterParser.getValue(node, "__CONNECTION__");
		List<? extends INode> nodes = node.getProcess().getGeneratingNodes();
		for(INode targetNode : nodes){
			if (targetNode.getUniqueName().equals(connectionSid)) {
				distribution = ElementParameterParser.getValue(targetNode, "__DISTRIBUTION__");
				hbaseVersion = ElementParameterParser.getValue(targetNode, "__HBASE_VERSION__");
				isHadoop2 = "HADOOP_2".equals(ElementParameterParser.getValue(targetNode, "__HADOOP_CUSTOM_VERSION__"));
				break;
			}
		}
	}
	
	log4jFileUtil.componentStartInfo(node);
	
	org.talend.hadoop.distribution.component.HBaseComponent hbaseDistrib = null;
	try {
		hbaseDistrib = (org.talend.hadoop.distribution.component.HBaseComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(distribution, hbaseVersion);
	} catch (java.lang.Exception e) {
		e.printStackTrace();
		return "";
	}
	boolean isCustom = hbaseDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;

	class GenerateCode {

		private boolean isCustom;
		private boolean isHadoop2;
		private org.talend.hadoop.distribution.component.HBaseComponent hbaseDistrib;

		public GenerateCode(boolean isCustom, boolean isHadoop2, org.talend.hadoop.distribution.component.HBaseComponent hbaseDistrib) {
			this.isCustom = isCustom;
			this.isHadoop2 = isHadoop2;
			this.hbaseDistrib = hbaseDistrib;
		}
		
		public void generateCreateTable(INode node) {
			List<Map<String,String>> familyParameters = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__FAMILY_PARAMETERS__");
			String table_name = ElementParameterParser.getValue(node, "__TABLE__");
			String cid = node.getUniqueName();
%>
			org.apache.hadoop.hbase.HTableDescriptor tableDes_<%=cid%> = new org.apache.hadoop.hbase.HTableDescriptor(<%=table_name%>);
			org.apache.hadoop.hbase.HColumnDescriptor family_<%=cid%> = null;
<%
			for(int familyParamNum=0;familyParamNum<familyParameters.size();familyParamNum++){
				Map<String,String> mapParamLine = familyParameters.get(familyParamNum);
				String family_name = mapParamLine.get("FAMILY_NAME");
%>
				family_<%=cid%> = new org.apache.hadoop.hbase.HColumnDescriptor(<%=family_name%>);
<%
				String family_inmemory = mapParamLine.get("FAMILY_INMEMORY");
				String family_blockcacheenabled = mapParamLine.get("FAMILY_BLOCKCACHEENABLED");
				String family_bloomfiltertype = mapParamLine.get("FAMILY_BLOOMFILTERTYPE");
				String family_blocksize = mapParamLine.get("FAMILY_BLOCKSIZE");
				String family_compactioncompressiontype = mapParamLine.get("FAMILY_COMPACTIONCOMPRESSIONTYPE");
				String family_compressiontype = mapParamLine.get("FAMILY_COMPRESSIONTYPE");
				String family_maxversions = mapParamLine.get("FAMILY_MAXVERSIONS");
				String family_scope = mapParamLine.get("FAMILY_SCOPE");
				String family_timetolive = mapParamLine.get("FAMILY_TIMETOLIVE");
				
				if(family_inmemory!=null&&!"".equals(family_inmemory)){
%>
					family_<%=cid%>.setInMemory(<%=family_inmemory%>);
<%
				}
				if(family_blockcacheenabled!=null&&!"".equals(family_blockcacheenabled)){
%>
					family_<%=cid%>.setBlockCacheEnabled(<%=family_blockcacheenabled%>);
<%
				}
				if(family_bloomfiltertype!=null&&!"".equals(family_bloomfiltertype)){
%>
					family_<%=cid%>.setBloomFilterType(
						<%if((isCustom && isHadoop2) || (!isCustom && hbaseDistrib.doSupportNewHBaseAPI())) {%>
						org.apache.hadoop.hbase.regionserver.BloomType.<%=family_bloomfiltertype%>
						<%} else {%>
						org.apache.hadoop.hbase.regionserver.StoreFile.BloomType.<%=family_bloomfiltertype%>
						<%}%>
					);
<%
				}
				if(family_blocksize!=null&&!"".equals(family_blocksize)){
%>
					family_<%=cid%>.setBlocksize(<%=family_blocksize%>);
<%
				}
				if(family_compactioncompressiontype!=null&&!"".equals(family_compactioncompressiontype)){
%>
					family_<%=cid%>.setCompactionCompressionType(
						<%if((isCustom && isHadoop2) || (!isCustom && hbaseDistrib.doSupportNewHBaseAPI())) {%>
						org.apache.hadoop.hbase.io.compress.Compression.Algorithm.<%=family_compactioncompressiontype%>
						<%} else {%>
						org.apache.hadoop.hbase.io.hfile.Compression.Algorithm.<%=family_compactioncompressiontype%>
						<%}%>
					);
<%
				}
				if(family_compressiontype!=null&&!"".equals(family_compressiontype)){
%>
					family_<%=cid%>.setCompressionType(
						<%if((isCustom && isHadoop2) || (!isCustom && hbaseDistrib.doSupportNewHBaseAPI())) {%>
						org.apache.hadoop.hbase.io.compress.Compression.Algorithm.<%=family_compressiontype%>
						<%} else {%>
						org.apache.hadoop.hbase.io.hfile.Compression.Algorithm.<%=family_compressiontype%>
						<%}%>
					);
<%
				}
				if(family_maxversions!=null&&!"".equals(family_maxversions)){
%>
					family_<%=cid%>.setMaxVersions(<%=family_maxversions%>);
<%
				}
				if(family_scope!=null&&!"".equals(family_scope)){
%>
					family_<%=cid%>.setScope(<%=family_scope%>);
<%
				}
				if(family_timetolive!=null&&!"".equals(family_timetolive)){
%>
					family_<%=cid%>.setTimeToLive(<%=family_timetolive%>);
<%
				}
%>
				tableDes_<%=cid%>.addFamily(family_<%=cid%>);
<%
			}//for(int familyParamNum=0;familyParamNum<familyParameters.size();familyParamNum++)
%>
		admin_<%=cid%>.createTable(tableDes_<%=cid%>);
<%
		}
		public void generateDropTable(INode node){
			String cid = node.getUniqueName();
			String table_name = ElementParameterParser.getValue(node, "__TABLE__");
%>
		if(!admin_<%=cid %>.isTableDisabled(<%=table_name%>)){
			admin_<%=cid %>.disableTable(<%=table_name%>);
		}
			admin_<%=cid %>.deleteTable(<%=table_name%>);
<%
		}
	}
	GenerateCode generateCode = new GenerateCode(isCustom, isHadoop2, hbaseDistrib);
%>
int nb_line_<%=cid%> = 0;
org.apache.hadoop.conf.Configuration conn_<%=cid %>=null;
<% 
// not use existing connection
if(!"true".equals(useExistingConn)){
	boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
	boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
	String userPrincipal = ElementParameterParser.getValue(node, "__PRINCIPAL__");
	String keytabPath = ElementParameterParser.getValue(node, "__KEYTAB_PATH__");
	String hbaseMasterPrincipal = ElementParameterParser.getValue(node, "__HBASE_MASTER_PRINCIPAL__");
	String hbaseRegionServerPrincipal = ElementParameterParser.getValue(node, "__HBASE_REGIONSERVER_PRINCIPAL__");

    boolean useMapRTicket = ElementParameterParser.getBooleanValue(node, "__USE_MAPRTICKET__");
    String username = ElementParameterParser.getValue(node, "__USERNAME__");
    String mapRTicketCluster = ElementParameterParser.getValue(node, "__MAPRTICKET_CLUSTER__");
    String mapRTicketDuration = ElementParameterParser.getValue(node, "__MAPRTICKET_DURATION__");

    boolean setMapRHomeDir = ElementParameterParser.getBooleanValue(node, "__SET_MAPR_HOME_DIR__");
    String mapRHomeDir = ElementParameterParser.getValue(node, "__MAPR_HOME_DIR__");

    boolean setMapRHadoopLogin = ElementParameterParser.getBooleanValue(node, "__SET_HADOOP_LOGIN__");
    String mapRHadoopLogin = ElementParameterParser.getValue(node, "__HADOOP_LOGIN__");

%>
	conn_<%=cid %> = org.apache.hadoop.hbase.HBaseConfiguration.create();
	resourceMap.put("conn_<%=cid%>", conn_<%=cid%>); 
	conn_<%=cid %>.clear();
	conn_<%=cid %>.set("hbase.zookeeper.quorum", <%=zookeeper_quorum%>); 
	conn_<%=cid %>.set("hbase.zookeeper.property.clientPort",<%=zookeeper_client_port%>); 
	conn_<%=cid %>.set("hbase.cluster.distributed","true"); 
<%
	boolean setZNodeParent = "true".equals(ElementParameterParser.getValue(node, "__SET_ZNODE_PARENT__"));
	String zNodeParent = ElementParameterParser.getValue(node, "__ZNODE_PARENT__");		
	if(setZNodeParent) {
%>
	conn_<%=cid%>.set("zookeeper.znode.parent",<%=zNodeParent%>); 
<%
	}
	if(hbaseDistrib.doSupportKerberos() && useKrb){
        if((isCustom || hbaseDistrib.doSupportMapRTicket()) && useMapRTicket) {
            %>
            System.setProperty("pname", "MapRLogin");
            System.setProperty("https.protocols", "TLSv1.2");
            System.setProperty("mapr.home.dir", <%=setMapRHomeDir ? mapRHomeDir : "\"/opt/mapr\"" %>);
            System.setProperty("hadoop.login", <%=setMapRHadoopLogin ? mapRHadoopLogin : "\"kerberos\""%>);
            <%
        }
%>
		conn_<%=cid%>.set("hbase.master.kerberos.principal",<%=hbaseMasterPrincipal%>);
		conn_<%=cid%>.set("hbase.regionserver.kerberos.principal",<%=hbaseRegionServerPrincipal%>);
		conn_<%=cid%>.set("hbase.security.authorization","true");
		conn_<%=cid%>.set("hbase.security.authentication","kerberos");
<%
		if(useKeytab){
%>
			org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(<%=userPrincipal%>, <%=keytabPath%>);
<%
		}
        if((isCustom || hbaseDistrib.doSupportMapRTicket()) && useMapRTicket) {
            %>
            com.mapr.login.client.MapRLoginHttpsClient maprLogin_<%=cid%> = new com.mapr.login.client.MapRLoginHttpsClient();
            maprLogin_<%=cid%>.getMapRCredentialsViaKerberos(<%=mapRTicketCluster%>, <%=mapRTicketDuration%>);
            <%
        }
	} else {
        // MapR ticket
	    if((isCustom || hbaseDistrib.doSupportMapRTicket()) && useMapRTicket) {
            String passwordFieldName = "__MAPRTICKET_PASSWORD__";
            %>
            System.setProperty("pname", "MapRLogin");
            System.setProperty("https.protocols", "TLSv1.2");
            System.setProperty("mapr.home.dir", <%=setMapRHomeDir ? mapRHomeDir : "\"/opt/mapr\"" %>);
            com.mapr.login.client.MapRLoginHttpsClient maprLogin_<%=cid%> = new com.mapr.login.client.MapRLoginHttpsClient();
            <%
            if (setMapRHadoopLogin) {
                %>
                System.setProperty("hadoop.login", <%=mapRHadoopLogin%>);
                <%
            } else {
                %>
                maprLogin_<%=cid%>.setCheckUGI(false);
                <%
            }
            %>
            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

            <%
            if(hbaseDistrib.doSupportMaprTicketV52API()){
				%>
            	maprLogin_<%=cid%>.getMapRCredentialsViaPassword(<%=mapRTicketCluster%>, <%=username%>, decryptedPassword_<%=cid%>, <%=mapRTicketDuration%>, "");
            	<%
            } else {
            	%>
            	maprLogin_<%=cid%>.getMapRCredentialsViaPassword(<%=mapRTicketCluster%>, <%=username%>, decryptedPassword_<%=cid%>, <%=mapRTicketDuration%>);
            	<%
            }
        }
    }
	List<Map<String, String>> properties =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__HBASE_PARAMETERS__");
   	for(int i=0;i<properties.size();i++){
   		Map<String, String> map = properties.get(i);
   		String property = map.get("PROPERTY");
   		String value= map.get("VALUE");
%>
		conn_<%=cid %>.set(<%=property%>,<%=value%>);
<%
   }
}else{// use existing connection
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "conn_" + connection;
%>
	conn_<%=cid %> = (org.apache.hadoop.conf.Configuration)globalMap.get("<%=conn%>");
	if(conn_<%=cid %> == null){
		throw new RuntimeException("<%=cid %>'s connection is null!");
	}
<%
}
if(hbaseDistrib.doSupportMapRDB() && useTableNsMapping){
%>
	conn_<%=cid %>.set("hbase.table.namespace.mappings", <%=tableNsMapping%>);
<%
}

String table_action = ElementParameterParser.getValue(node, "__TABLE_ACTION__");
if(!"NONE".equals(table_action)){
%>
	org.apache.hadoop.hbase.client.HBaseAdmin admin_<%=cid %> = new org.apache.hadoop.hbase.client.HBaseAdmin(conn_<%=cid %>);
<%
}
if("NONE".equals(table_action)){
}else if("CREATE".equals(table_action)){
	generateCode.generateCreateTable(node);
}else if("DROP_CREATE".equals(table_action)){
	generateCode.generateDropTable(node);
	generateCode.generateCreateTable(node);
}else if("CREATE_IF_NOT_EXISTS".equals(table_action)){
%>
	boolean tableExist_<%=cid %> = admin_<%=cid %>.tableExists(<%=table_name%>);
	if(!tableExist_<%=cid %>){
<%
		generateCode.generateCreateTable(node);
%>
	}
<%
}else if("DROP_IF_EXISTS_AND_CREATE".equals(table_action)){
%>
	boolean tableExist_<%=cid %> = admin_<%=cid %>.tableExists(<%=table_name%>);
	if(tableExist_<%=cid %>){
<%
		generateCode.generateDropTable(node); 
%>
	}
<%
	generateCode.generateCreateTable(node);
}
%>
org.apache.hadoop.hbase.client.HTable table_<%=cid%> = null;
table_<%=cid%> = new org.apache.hadoop.hbase.client.HTable(conn_<%=cid %>,<%=table_name%>);
byte[] temp_<%=cid %> = null;

<%
if (useBatchMode) {
	%>
	java.util.ArrayList<org.apache.hadoop.hbase.client.Put> batchPuts_<%=cid%> = new java.util.ArrayList<org.apache.hadoop.hbase.client.Put>();
	<%
}
%>