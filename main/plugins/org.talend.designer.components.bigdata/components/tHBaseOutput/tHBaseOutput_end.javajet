<%@ jet
	    imports="
		org.talend.core.model.process.INode
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.ElementParameterParser
	    "
%>

<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

boolean useBatchMode = ElementParameterParser.getBooleanValue(node, "__USE_BATCH_MODE__");
%>
		if(table_<%=cid%>!=null){
			<%
			if (useBatchMode) {
				%>
				if (batchPuts_<%=cid%>.size() > 0) {
					table_<%=cid%>.put(batchPuts_<%=cid%>);
				}
				<%
			}
			%>
			table_<%=cid%>.close();
		}
	<%
	//use local connection
	if(!"true".equals(useExistingConn)){
		String distribution = ElementParameterParser.getValue(node,"__DISTRIBUTION__");
		String hbaseVersion = ElementParameterParser.getValue(node,"__HBASE_VERSION__");
		boolean isHadoop2 = "HADOOP_2".equals(ElementParameterParser.getValue(node, "__HADOOP_CUSTOM_VERSION__"));
		org.talend.hadoop.distribution.component.HBaseComponent hbaseDistrib = null;
		try {
			hbaseDistrib = (org.talend.hadoop.distribution.component.HBaseComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(distribution, hbaseVersion);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
			return "";
		}
		boolean isCustom = hbaseDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;
	%>
		if(conn_<%=cid%>!=null){
			<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/HBase/CloseHBaseConnection.javajet"%>
		}
		resourceMap.put("finish_<%=cid%>", true); 
	<%
	}
	%>
	globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid%>); 
	
	<%
	log4jFileUtil.writeDataFinishInfo(node);
	%>