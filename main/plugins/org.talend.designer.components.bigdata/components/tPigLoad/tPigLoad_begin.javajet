<%@ jet
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.types.Java2STLangTypesHelper
		org.talend.designer.runprocess.ProcessorUtilities
		org.talend.designer.runprocess.ProcessorException
		java.util.List
		java.util.Map
		"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String processId = node.getProcess().getId();

	String distribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
	String pigVersion = ElementParameterParser.getValue(node, "__PIG_VERSION__");
	
	boolean isLocal = "true".equals(ElementParameterParser.getValue(node, "__LOCAL__"));
	boolean isCustom = false;

	org.talend.hadoop.distribution.component.PigComponent pigDistrib = null;
	if(!isLocal) {
    	try {
    		pigDistrib = (org.talend.hadoop.distribution.component.PigComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(distribution, pigVersion);
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		return "";
    	}
    	isCustom = pigDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;
    }

	boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
	String inputFilename = ElementParameterParser.getValue(node, "__INPUT_FILENAME__");
	boolean isS3Location = "true".equals(ElementParameterParser.getValue(node, "__S3_LOCATION_LOAD__"));
    String s3bucket = ElementParameterParser.getValue(node, "__S3_BUCKET_LOAD__");
    String s3username = ElementParameterParser.getValue(node, "__S3_USERNAME_LOAD__");
	String databaseName = ElementParameterParser.getValue(node, "__DATABASE_NAME__");
	String tableName = ElementParameterParser.getValue(node, "__TABLE_NAME__");
	String fieldSeparator = ElementParameterParser.getValue(node, "__FIELD_SEPARATOR_CHAR__");
	String function = ElementParameterParser.getValue(node, "__LOAD__");

	String fsDefaultName = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
	String mapredJobTracker = ElementParameterParser.getValue(node, "__MAPRED_JOB_TRACKER__");
	String thriftServer = ElementParameterParser.getValue(node, "__THRIFT_SERVER__");

	List<Map<String, String>> advProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ADVANCED_PROPERTIES__");
	List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");

	List<Map<String, String>> partitionFilter = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__PARTITION_FILTER__");

	boolean compress = "true".equals(ElementParameterParser.getValue(node, "__COMPRESS__"));
	String compression = ElementParameterParser.getValue(node, "__COMPRESSION__");

	String zookeeper_quorum = ElementParameterParser.getValue(node, "__ZOOKEEPER_QUORUM__");
	String zookeeper_client_port = ElementParameterParser.getValue(node, "__ZOOKEEPER_CLIENT_PORT__");

	boolean setZNodeParent = "true".equals(ElementParameterParser.getValue(node, "__SET_ZNODE_PARENT__"));
	String zNodeParent = ElementParameterParser.getValue(node, "__ZNODE_PARENT__");

	String resourceManager = ElementParameterParser.getValue(node, "__RESOURCE_MANAGER__");
	boolean useYarn = "true".equals(ElementParameterParser.getValue(node, "__USE_YARN__"));
	boolean setJobHistoryAddress = "true".equals(ElementParameterParser.getValue(node, "__SET_JOBHISTORY_ADDRESS__"));
    boolean useDatanodeHostname = "true".equals(ElementParameterParser.getValue(node, "__USE_DATANODE_HOSTNAME__"));

	boolean isParquet = !isLocal && "ParquetLoader".equals(function);

	boolean defineJarsToRegister = "true".equals(ElementParameterParser.getValue(node, "__DEFINE_REGISTER_JAR__"));
	List<Map<String, String>> registerJarForHCatalog = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__REGISTER_JAR__");

	List<Map<String, String>> registerJar = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__DRIVER_JAR__");
	List<Map<String, String>> defineFunctions = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__DEFINE_FUNCTION__");

    boolean useMapRTicket = ElementParameterParser.getBooleanValue(node, "__USE_MAPRTICKET__");
    String mapRTicketUsername = ElementParameterParser.getValue(node, "__MAPRTICKET_USERNAME__");
    String mapRTicketCluster = ElementParameterParser.getValue(node, "__MAPRTICKET_CLUSTER__");
    String mapRTicketDuration = ElementParameterParser.getValue(node, "__MAPRTICKET_DURATION__");

    boolean setMapRHomeDir = ElementParameterParser.getBooleanValue(node, "__SET_MAPR_HOME_DIR__");
    String mapRHomeDir = ElementParameterParser.getValue(node, "__MAPR_HOME_DIR__");

    boolean setMapRHadoopLogin = ElementParameterParser.getBooleanValue(node, "__SET_HADOOP_LOGIN__");
    String mapRHadoopLogin = ElementParameterParser.getValue(node, "__HADOOP_LOGIN__");
	
	boolean isExecutedThroughWebHCat = !isLocal && (pigDistrib != null && pigDistrib.isExecutedThroughWebHCat());

	String hcatPackage = (pigDistrib != null && pigDistrib.pigVersionPriorTo_0_12() && !isCustom) ? "org.apache.hcatalog.pig" : "org.apache.hive.hcatalog.pig";

	boolean generateRegisterJarCodeForHCatalog = (!isLocal && (isCustom || (pigDistrib != null && pigDistrib.doSupportHCatalog())) && "HCatLoader".equals(function) && !defineJarsToRegister);
	boolean generateRegisterJarCode = registerJar.size() > 0;

	java.util.List<String> jarsToRegister = null;
	java.util.List<String> jars = null;

	boolean generateRegisterJarCodeForHBase = !isLocal && "HBaseStorage".equals(function) && pigDistrib!= null && pigDistrib.doSupportHBase();

	boolean generateRegisterJarCodeForSequenceFile = !isLocal && "SequenceFileStorage".equals(function);

	boolean generateRegisterJarCodeForRCFile = !isLocal && "RCFilePigStorage".equals(function);

	boolean generateRegisterJarCodeForAvroFile = !isLocal && "AvroStorage".equals(function);

	boolean generateRegisterJarCodeForParquetFile = isParquet;

	boolean generateRegisterJarCodeForAll = true;

	boolean isHadoop2 = !isCustom && pigDistrib!=null && pigDistrib.isHadoop2();

	boolean configureFromClassPath = "true".equals(ElementParameterParser.getValue(node, "__CONFIGURATIONS_FROM_CLASSPATH__"));

	String passwordFieldName = "";

	if(generateRegisterJarCodeForAll) {
		String[] commandLine = new String[] {"<command>"};
		try {
			commandLine = ProcessorUtilities.getCommandLine("win32",true, processId, "",org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, new String[]{});
		} catch (ProcessorException e) {
			e.printStackTrace();
		}

		jarsToRegister = new java.util.ArrayList();

		jarsToRegister.add("datafu");

		if(generateRegisterJarCode) {
			for(Map<String, String> jar : registerJar){
				jarsToRegister.add(jar.get("JAR_NAME"));
			}
		}

		if(generateRegisterJarCodeForHCatalog) {
			jarsToRegister.add("hcatalog");

			jarsToRegister.add("hcatalog-core");

			jarsToRegister.add("hive-hcatalog-core");

			jarsToRegister.add("hive-exec");
			jarsToRegister.add("hive-metastore");
			jarsToRegister.add("jdo2-api");
			jarsToRegister.add("libfb303");
			jarsToRegister.add("libthrift");
		}

		if(generateRegisterJarCodeForHBase) {
			jarsToRegister.add("protobuf-java");
			jarsToRegister.add("hbase");
			jarsToRegister.add("hbase-client");
			jarsToRegister.add("hbase-common");
			jarsToRegister.add("hbase-hadoop-compat");
			jarsToRegister.add("hbase-protocol");
			jarsToRegister.add("hbase-server");
			jarsToRegister.add("zookeeper");
			jarsToRegister.add("guava");
			jarsToRegister.add("htrace-core");
		}

		if(generateRegisterJarCodeForSequenceFile) {
			jarsToRegister.add("elephant-bird-core");
			jarsToRegister.add("elephant-bird-hadoop-compat");
			jarsToRegister.add("elephant-bird-pig");
			jarsToRegister.add("pigutil");
		}

		if(generateRegisterJarCodeForRCFile) {
			jarsToRegister.add("elephant-bird-core");
			jarsToRegister.add("elephant-bird-hadoop-compat");
			jarsToRegister.add("elephant-bird-rcfile");
			jarsToRegister.add("hive-serde");
			jarsToRegister.add("hive-common");
			jarsToRegister.add("hive-exec");
		}

		if(generateRegisterJarCodeForAvroFile) {
			jarsToRegister.add("piggybank");
			jarsToRegister.add("avro");
			jarsToRegister.add("json_simple");
		}

		if(generateRegisterJarCodeForParquetFile) {
			jarsToRegister.add("parquet-pig-bundle");
			jarsToRegister.add("snappy-java");
		}

		for (int j = 0; j < commandLine.length; j++) {
			if(commandLine[j].contains("jar")) {
				jars = java.util.Arrays.asList(commandLine[j].split(";"));
				break;
			}
		}
	}

	String start_node=cid;

	boolean inMain = true;

	if(node.getIncomingConnections()!=null && node.getIncomingConnections().size()>0) {
		INode loadNode = node.getDesignSubjobStartNode();
		inMain = loadNode.isSubtreeStart();
		start_node = loadNode.getUniqueName();
	}

	String outputConnectionName = "";
	List<IConnection> outputConnections = (List<IConnection>)node.getOutgoingConnections();
	if(outputConnections!=null && outputConnections.size()>0) {
		outputConnectionName = outputConnections.get(0).getName();
	}

	boolean useTez = !isLocal && pigDistrib != null && pigDistrib.doSupportTezForPig() && "TEZ".equals(ElementParameterParser.getValue(node, "__ENGINE__"));
%>
	<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/PigHeader.javajet"%>
<%
	if(generateRegisterJarCodeForAll) {
%>
		routines.system.GetJarsToRegister getJarsToRegister_<%=cid %> = new routines.system.GetJarsToRegister();
<%
	}

	if(!isExecutedThroughWebHCat) {
%>
		java.util.Properties props_<%=cid%> = new java.util.Properties();
<%
	}

	if(inMain && !isExecutedThroughWebHCat) {
%>
		props_<%=cid%>.put(org.apache.pig.impl.PigContext.JOB_NAME, projectName + "_" + jobName + "_" + jobVersion + "_" + "<%=cid%>");
<%
	}

	// BEGIN IF01
	if(configureFromClassPath){
%>
		// Add HADOOP_CONF_DIR to the classpath if it's present
		String hadoopConfDir_<%=cid%> = System.getenv("HADOOP_CONF_DIR");
		if(hadoopConfDir_<%=cid%> != null){
			java.net.URLClassLoader sysloader = (java.net.URLClassLoader) ClassLoader.getSystemClassLoader();
			java.lang.reflect.Method method = java.net.URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { java.net.URL.class });
			method.setAccessible(true);
			method.invoke(sysloader,new Object[] { new java.io.File(hadoopConfDir_<%=cid%>).toURI().toURL() });
		}
		org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration();

		// Adding any hdfs-site.xml file
		conf_<%=cid%>.addResource("hdfs-site.xml");

		// Adding any yarn-site.xml file
		conf_<%=cid%>.addResource("yarn-site.xml");

		// Adding any mapred-site.xml
		conf_<%=cid%>.addResource("mapred-site.xml");

		// Adding any core-site.xml
		conf_<%=cid%>.addResource("core-site.xml");

		// Adding any talend-site.xml
		conf_<%=cid%>.addResource("talend-site.xml");
		String tldKerberosAuth = conf_<%=cid%>.get("talend.kerberos.authentication", "");
		String tldKerberosKtPrincipal = conf_<%=cid%>.get("talend.kerberos.keytab.principal", "");
		String tldKerberosKtPath = conf_<%=cid%>.get("talend.kerberos.keytab.path", "");

<%
		if("HBaseStorage".equals(function) && pigDistrib.doSupportHBase()){
%>
			// Adding any hbase-site.xml
			conf_<%=cid%>.addResource("hbase-site.xml");
<%
		}
%>

		// Add hadoop configurations to pig_context properties
		java.util.Iterator<java.util.Map.Entry<String,String>> iterator_<%=cid%> = conf_<%=cid%>.iterator();
		while(iterator_<%=cid%>.hasNext()){
			java.util.Map.Entry<String,String> property = iterator_<%=cid%>.next();
			props_<%=cid%>.put(property.getKey(), property.getValue());
		}
<%
		// log all loaded xxx-site.xml files and all of the key value pairs for debugging
		if(isLog4jEnabled){
		%>
			log.debug("CLASSPATH_CONFIGURATION_<%=cid%>" + " Loaded : " + conf_<%=cid%>);
			log.debug("CLASSPATH_CONFIGURATION_<%=cid%>" + " key value pairs : ");
			java.util.Iterator<java.util.Map.Entry<String,String>> iterator_log_<%=cid%> = conf_<%=cid%>.iterator();
			while(iterator_log_<%=cid%>.hasNext()){
				java.util.Map.Entry<String,String> property = iterator_log_<%=cid%>.next();
				log.debug("CLASSPATH_CONFIGURATION_<%=cid%> " + property.getKey() + " : " + property.getValue());
			}
		<%
		}
%>

		if(org.apache.hadoop.security.UserGroupInformation.isSecurityEnabled()){
			// Keytab configurations
			if(tldKerberosAuth.equalsIgnoreCase("keytab")){
				org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(tldKerberosKtPrincipal, tldKerberosKtPath);
			}
		}
<%
	} // END IF01
%>
	try {
<%
		// BEGIN IF02
		if(inMain && isExecutedThroughWebHCat) {
			passwordFieldName = "__HDINSIGHT_PASSWORD__";
			if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%>
				final String hdInsightPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%
			} else {
%>
				final String hdInsightPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
<%
			}

			passwordFieldName = "__WASB_PASSWORD__";
			if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%>
				final String wasbPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%
			} else {
%>
				final String wasbPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
<%
			}
%>

			java.io.File localPigLatin_<%=cid%> = new java.io.File(projectName + "_" + jobName + "_" + Thread.currentThread().getId() +".pig");
			java.io.FileWriter fw_<%=cid%> = new java.io.FileWriter(localPigLatin_<%=cid%>.getAbsoluteFile());
			java.io.BufferedWriter bw_<%=cid%> = new java.io.BufferedWriter(fw_<%=cid%>);

			java.lang.StringBuilder libjars_<%=cid%> = new StringBuilder();

			org.talend.bigdata.launcher.fs.FileSystem azureFs_<%=cid%> = new org.talend.bigdata.launcher.fs.AzureFileSystem("DefaultEndpointsProtocol=https;"
				+ "AccountName="
				+ <%=ElementParameterParser.getValue(node, "__WASB_USERNAME__")%>
				+ ";"
				+ "AccountKey=" + wasbPassword_<%=cid%>, <%=ElementParameterParser.getValue(node, "__WASB_CONTAINER__")%>);

			org.talend.bigdata.launcher.webhcat.WebHCatJob instance_<%=cid%> = new org.talend.bigdata.launcher.webhcat.QueryJob(azureFs_<%=cid%>, org.talend.bigdata.launcher.utils.JobType.PIG);
			instance_<%=cid%>.setCredentials(new org.talend.bigdata.launcher.security.HDInsightCredentials(<%=ElementParameterParser.getValue(node, "__HDINSIGHT_USERNAME__")%>, hdInsightPassword_<%=cid%>));
			instance_<%=cid%>.setUsername(<%=ElementParameterParser.getValue(node, "__WEBHCAT_USERNAME__")%>);
			instance_<%=cid%>.setWebhcatEndpoint("https", <%=ElementParameterParser.getValue(node, "__WEBHCAT_HOST__")%> + ":" + <%=ElementParameterParser.getValue(node, "__WEBHCAT_PORT__")%>);
			instance_<%=cid%>.setStatusFolder(org.talend.bigdata.launcher.utils.Utils.removeFirstSlash(<%=ElementParameterParser.getValue(node, "__STATUSDIR__")%>));
			instance_<%=cid%>.setRemoteFolder(org.talend.bigdata.launcher.utils.Utils.removeFirstSlash(<%=ElementParameterParser.getValue(node, "__REMOTE_FOLDER__")%>));
			((org.talend.bigdata.launcher.webhcat.QueryJob) instance_<%=cid%>).setFileToExecute(projectName + "_" + jobName + "_" + Thread.currentThread().getId() +".pig");

			String wasbPath_<%=cid%> = azureFs_<%=cid%>.getFileSystemPrefix() + "/"	+ instance_<%=cid%>.getRemoteFolder()	+ "/libjars/";
<%
		} // END IF02

		// BEGIN IF03
		if(isLocal) { // LOCAL mode
%>
			org.apache.pig.impl.PigContext context_<%=cid%> = new org.apache.pig.impl.PigContext(org.apache.pig.ExecType.LOCAL, props_<%=cid%>);
<%
		// BEGIN ELSE03
		} else if(!isLocal && !isExecutedThroughWebHCat && pigDistrib != null) { // MAPREDUCE mode
			// BEGIn IF04
			if(inMain) {
				String yarnClasspathSeparator = ElementParameterParser.getValue(node, "__CLASSPATH_SEPARATOR__");
%>
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", <%=yarnClasspathSeparator%>);

				globalMap.put("HADOOP_USER_NAME_<%=cid%>", System.getProperty("HADOOP_USER_NAME"));
<%
				if(isCustom || (!isCustom && pigDistrib.doSupportImpersonation())) {
					String username = ElementParameterParser.getValue(node, "__USERNAME__");
%>
					String username_<%=cid %> = <%=username%>;
					if(username_<%=cid %>!=null && !"".equals(username_<%=cid %>.trim())) {
						System.setProperty("HADOOP_USER_NAME",username_<%=cid %>);
					}
<%
				}

				// Do not set these configurations if we're using the classpath configuration
				if(!configureFromClassPath && !isCustom && ("MAPR401".equals(pigVersion) || "MAPR410".equals(pigVersion))) {//set the default properties
%>
			        props_<%=cid%>.put("mapreduce.job.map.output.collector.class", "org.apache.hadoop.mapred.MapRFsOutputBuffer");
			        props_<%=cid%>.put("mapreduce.job.reduce.shuffle.consumer.plugin.class", "org.apache.hadoop.mapreduce.task.reduce.DirectShuffle");
<%
				}
			} // END IF04

			// BEGIN IF05
			// All of these configurations are not set when we're using the classpath for configurations
			if(!configureFromClassPath){

				if(!isCustom && "APACHE_2_4_0_EMR".equals(pigVersion)) {
	                %>
	                props_<%=cid%>.put("fs.defaultFS", <%=fsDefaultName%>);
	                org.apache.hadoop.security.UserGroupInformation.setLoginUser(org.apache.hadoop.security.UserGroupInformation.createRemoteUser(username_<%=cid %>));
	                <%
	            } else {
	                %>
	                props_<%=cid%>.put("fs.default.name", <%=fsDefaultName%>);
	                <%
	            }

				boolean isKerberosAvailableHadoop2 = !isCustom && pigDistrib.isHadoop2() && pigDistrib.doSupportKerberos();
				boolean isKerberosAvailableHadoop1 = !isCustom && pigDistrib.isHadoop1() && pigDistrib.doSupportKerberos();

				if((isCustom && useYarn) || (!isCustom && isHadoop2)) {
%>
					props_<%=cid%>.put("mapreduce.framework.name", "yarn");
					props_<%=cid%>.put("yarn.resourcemanager.address", <%=resourceManager%>);
<%
					boolean setSchedulerAddress = "true".equals(ElementParameterParser.getValue(node, "__SET_SCHEDULER_ADDRESS__"));
					if(setSchedulerAddress) {
						String schedulerAddress = ElementParameterParser.getValue(node,"__RESOURCEMANAGER_SCHEDULER_ADDRESS__");
%>
						props_<%=cid%>.put("yarn.resourcemanager.scheduler.address", <%=schedulerAddress%>);
<%
					}
					boolean setStagingDirectory = "true".equals(ElementParameterParser.getValue(node, "__SET_STAGING_DIRECTORY__"));
					if(setStagingDirectory) {
						String stagingDirectory = ElementParameterParser.getValue(node, "__STAGING_DIRECTORY__");
%>
						props_<%=cid%>.put("yarn.app.mapreduce.am.staging-dir", <%=stagingDirectory%>);
<%
					}

					boolean crossPlatformSubmission = "true".equals(ElementParameterParser.getValue(node, "__CROSS_PLATFORM_SUBMISSION__"));
					if((!isCustom && pigDistrib.doSupportCrossPlatformSubmission()) || (isCustom && useYarn && crossPlatformSubmission)) {
%>
						props_<%=cid%>.put("mapreduce.app-submission.cross-platform","true");
<%
					}

					if(pigDistrib.doSupportCustomMRApplicationCP()){
%>
						props_<%=cid%>.put("mapreduce.application.classpath", "<%=pigDistrib.getCustomMRApplicationCP()%>");
<%
					}

%>
					props_<%=cid%>.put("yarn.application.classpath", "<%=pigDistrib.getYarnApplicationClasspath()%>");
<%
					if(setJobHistoryAddress) {
						String jobHistoryAddress = ElementParameterParser.getValue(node, "__JOBHISTORY_ADDRESS__");
%>
						props_<%=cid%>.put("mapreduce.jobhistory.address", <%=jobHistoryAddress%>);
<%
					}
				} else {
%>
					props_<%=cid%>.put("mapred.job.tracker", <%=mapredJobTracker%>);
<%
				}

				if("HCatLoader".equals(function) && pigDistrib.doSupportHCatalog()) { // If the HCatalog loader is used, we need to add the HCat metastore in the pig context
%>
					props_<%=cid%>.put("hcat.metastore.uri", <%=thriftServer%>);
<%
                    // activate sasl if we using a security
                    if ((isCustom || pigDistrib.doSupportMapRTicket()) && useMapRTicket) {
%>
                        props_<%=cid%>.put("hive.metastore.sasl.enabled", "true");
<%
                    }
				}

				if("HBaseStorage".equals(function) && pigDistrib.doSupportHBase()) {
%>
					props_<%=cid%>.put("hbase.zookeeper.quorum", <%=zookeeper_quorum%>);
					props_<%=cid%>.put("hbase.zookeeper.property.clientPort", <%=zookeeper_client_port%>);
<%
					if(setZNodeParent) {
%>
					props_<%=cid%>.put("zookeeper.znode.parent",<%=zNodeParent%>);
<%
					}
				}

				if(useKrb) {
					String namenodePrincipal = ElementParameterParser.getValue(node, "__NAMENODE_PRINCIPAL__");
					boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
					String userPrincipal = ElementParameterParser.getValue(node, "__PRINCIPAL__");
					String keytabPath = ElementParameterParser.getValue(node, "__KEYTAB_PATH__");
					String hbaseMasterPrincipal = ElementParameterParser.getValue(node, "__HBASEMASTER_PRINCIPAL__");
					String hbaseReigonServerPrincipal = ElementParameterParser.getValue(node, "__HBASEREIGONSERVER_PRINCIPAL__");
%>
					props_<%=cid%>.put("dfs.namenode.kerberos.principal", <%=namenodePrincipal%>);
					props_<%=cid%>.put("hbase.security.authentication","kerberos");
					props_<%=cid%>.put("hbase.regionserver.kerberos.principal",<%=hbaseReigonServerPrincipal%>);
					props_<%=cid%>.put("hbase.master.kerberos.principal",<%=hbaseMasterPrincipal%>);
<%
					if(isKerberosAvailableHadoop1 || (isCustom && !useYarn)) {
						String jobTrackerPrincipal = ElementParameterParser.getValue(node, "__JOBTRACKER_PRINCIPAL__");
%>
						props_<%=cid%>.put("mapreduce.jobtracker.kerberos.principal", <%=jobTrackerPrincipal%>);
<%
					}
					if(isKerberosAvailableHadoop2 || (isCustom && useYarn)) {
						String resourceManagerPrincipal = ElementParameterParser.getValue(node, "__RESOURCEMANAGER_PRINCIPAL__");
						String jobHistoryPrincipal = ElementParameterParser.getValue(node, "__JOBHISTORY_PRINCIPAL__");
%>
						props_<%=cid%>.put("yarn.resourcemanager.principal", <%=resourceManagerPrincipal%>);
						props_<%=cid%>.put("mapreduce.jobhistory.principal", <%=jobHistoryPrincipal%>);
<%
					}
					if ((isCustom || pigDistrib.doSupportMapRTicket()) && useMapRTicket) {
                        %>
                        System.setProperty("pname", "MapRLogin");
                        System.setProperty("https.protocols", "TLSv1.2");
                        System.setProperty("mapr.home.dir", <%=setMapRHomeDir ? mapRHomeDir : "\"/opt/mapr\"" %>);
                        System.setProperty("hadoop.login", <%=setMapRHadoopLogin ? mapRHadoopLogin : "\"kerberos\""%>);
                        <%
                    }
					if(useKeytab) {
%>
						org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(<%=userPrincipal%>, <%=keytabPath%>);
<%
					}
					if ((isCustom || pigDistrib.doSupportMapRTicket()) && useMapRTicket) {
                        %>
                        com.mapr.login.client.MapRLoginHttpsClient maprLogin_<%=cid%> = new com.mapr.login.client.MapRLoginHttpsClient();
                        maprLogin_<%=cid%>.getMapRCredentialsViaKerberos(<%=mapRTicketCluster%>, <%=mapRTicketDuration%>);
                        <%
                    }
				} else {
                    // Mapr ticket
				    if ((isCustom || pigDistrib.doSupportMapRTicket()) && useMapRTicket) {
                        passwordFieldName = "__MAPRTICKET_PASSWORD__";
                        %>
                        System.setProperty("pname", "MapRLogin");
                        System.setProperty("https.protocols", "TLSv1.2");
                        System.setProperty("mapr.home.dir", <%=setMapRHomeDir ? mapRHomeDir : "\"/opt/mapr\"" %>);
                        com.mapr.login.client.MapRLoginHttpsClient maprLogin_<%=cid%> = new com.mapr.login.client.MapRLoginHttpsClient();
                        <%
                        if (setMapRHadoopLogin) {
                            %>
                            System.setProperty("hadoop.login", <%=mapRHadoopLogin%>);
                            <%
                        } else {
                            %>
                            maprLogin_<%=cid%>.setCheckUGI(false);
                            <%
                        }
                        %>
                        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
                        <%
                        if(pigDistrib.doSupportMaprTicketV52API()){
							%>
                        	maprLogin_<%=cid%>.getMapRCredentialsViaPassword(<%=mapRTicketCluster%>, <%=mapRTicketUsername%>, decryptedPassword_<%=cid%>, <%=mapRTicketDuration%>, "");
                        	<%
                        } else {
                        	%>
                        	maprLogin_<%=cid%>.getMapRCredentialsViaPassword(<%=mapRTicketCluster%>, <%=mapRTicketUsername%>, decryptedPassword_<%=cid%>, <%=mapRTicketDuration%>);
                        	<%
                        }
                    }
				}

			} // END IF05

			// set Memory regardless of configuration option (classpath of component)
		    if(!isCustom && ("HDP_1_2".equals(pigVersion) || "HDP_1_3".equals(pigVersion))) {
		        String mapMemory = ElementParameterParser.getValue(node,"__MAPRED_JOB_MAP_MEMORY_MB__");
		        String reduceMemory = ElementParameterParser.getValue(node,"__MAPRED_JOB_REDUCE_MEMORY_MB__");
%>
		        props_<%=cid%>.put("mapred.job.map.memory.mb", <%=mapMemory%>);
		        props_<%=cid%>.put("mapred.job.reduce.memory.mb", <%=reduceMemory%>);
<%
    		}

    		// set adv hadoop properties regardless of configuration option (classpath of component)
			if(hadoopProps.size() > 0){
				for(Map<String, String> item : hadoopProps){
%>
					props_<%=cid%>.put(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
<%
				}
			}

			// set Memory regardless of configuration option (classpath of component)
			boolean setMemory = "true".equals(ElementParameterParser.getValue(node, "__SET_MEMORY__"));
			if(setMemory && (isCustom && useYarn) || (!isCustom && isHadoop2)) {
				String mapMemory = ElementParameterParser.getValue(node,"__MAPREDUCE_MAP_MEMORY_MB__");
				String reduceMemory = ElementParameterParser.getValue(node,"__MAPREDUCE_REDUCE_MEMORY_MB__");
				String amMemory = ElementParameterParser.getValue(node,"__YARN_APP_MAPREDUCE_AM_RESOURCE_MB__");
%>
	    		props_<%=cid%>.put("mapreduce.map.memory.mb", <%=mapMemory%>);
	    		props_<%=cid%>.put("mapreduce.reduce.memory.mb", <%=reduceMemory%>);
	    		props_<%=cid%>.put("yarn.app.mapreduce.am.resource.mb", <%=amMemory%>);
<%
			}

			// set useDatanodeHostname regardless of configuration option (classpath of component)
            if (useDatanodeHostname) {
                %>
                props_<%=cid%>.put("dfs.client.use.datanode.hostname", "true");
                <%
            }

            // create PigContext with/out tez regardless of configuration option (classpath of component)
            if(useTez){
%>
				org.apache.pig.impl.PigContext context_<%=cid%> = new org.apache.pig.impl.PigContext(new org.apache.pig.backend.hadoop.executionengine.tez.TezExecType(), props_<%=cid%>);
<%
            }else{
%>
				org.apache.pig.impl.PigContext context_<%=cid%> = new org.apache.pig.impl.PigContext(org.apache.pig.ExecType.MAPREDUCE, props_<%=cid%>);
<%
			}
		} // END ELSE03

        if (isS3Location) {
            passwordFieldName = "__S3_PASSWORD_LOAD__";
            // Get the decrypted password under the variable decryptedS3Password

            if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                %>
                String decryptedS3Password_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                <%
            } else {
                %>
                String decryptedS3Password_<%=cid%> = <%=ElementParameterParser.getValue(node, passwordFieldName)%>;
                <%
            }
        }

		if(inMain) {//only main process create the server object,lookup process use the one in main process
			if(!isExecutedThroughWebHCat) {
%>
				org.apache.pig.PigServer pigServer_<%=start_node%> = new org.apache.pig.PigServer(context_<%=cid%>);
				pigServer_<%=start_node%>.setBatchOn();
<%
			}
		} else {
%>
			//store the pig script in the lookup process
			java.util.List<String[]> pigScript_<%=start_node%> = new java.util.ArrayList<String[]>();
<%
		}
%>
		routines.system.PigHelper helper_<%=cid%> = new routines.system.PigHelper();

<%
	if((advProps.size() > 0) || compress || (isLocal && "HBaseStorage".equals(function)) || useTez){
%>
		StringBuilder script_<%=cid%>=new StringBuilder();
<%
		for(Map<String, String> item : advProps){
%>
		script_<%=cid%>.append("SET "+<%=item.get("PROPERTY") %>+" "+<%=item.get("VALUE") %>+";");
<%
		}

		if(compress) {
%>
		script_<%=cid%>.append("SET output.compression.enabled true;");
<%
			if("GZIP".equals(compression)) {
%>
		script_<%=cid%>.append("SET output.compression.codec org.apache.hadoop.io.compress.GzipCodec;");
<%
			} else if("BZIP2".equals(compression)) {
%>
		script_<%=cid%>.append("SET output.compression.codec org.apache.hadoop.io.compress.BZip2Codec;");
<%
			}
		}

		if(isLocal && "HBaseStorage".equals(function)) {
%>
		script_<%=cid%>.append("SET hbase.zookeeper.quorum ").append(<%=zookeeper_quorum%>).append(";");
		script_<%=cid%>.append("SET hbase.zookeeper.property.clientPort ").append(<%=zookeeper_client_port%>).append(";");
<%
			if(setZNodeParent) {
%>
			script_<%=cid%>.append("SET zookeeper.znode.parent ").append(<%=zNodeParent%>).append(";");
<%
			}
		}

		if(useTez){
			if(advProps != null){
    			for(Map<String, String> item : advProps){
    				if("\"tez.lib.uris\"".equals(item.get("PROPERTY"))){
    				%>
    					System.err.println("Please set the path of Tez lib in 'Tez lib path'!");
    				<%
    				}
    			}
    		}
			boolean installTez = "INSTALL".equals(ElementParameterParser.getValue(node, "__TEZ_LIB__"));
			if(installTez){
				//prepare the folder
				%>
				<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/GetFileSystem.javajet"%>
				<%
				(new GetFileSystem()).invoke(node);
				String tezLibFolder = ElementParameterParser.getValue(node, "__TEZ_LIB_FOLDER__");
				boolean useDefaultTezLibFolder = "\"/tmp/{USERNAME}/talend_tez_libs/{custom|PIG_VERSION}\"".equals(tezLibFolder);
				if(useDefaultTezLibFolder){
					String username = ElementParameterParser.getValue(node, "__USERNAME__");
					%>
					String hdfsUserName_<%=cid%> = (<%=username%> != null && !"".equals(<%=username%>)) ? <%=username%> : System.getProperty("user.name");
	    			String tezLibPath_<%=cid%> = "/tmp/" + hdfsUserName_<%=cid%> + "/talend_tez_libs/<%=isCustom?"custom":pigVersion%>";
				<%
				}else{
				%>
					String tezLibPath_<%=cid%> = <%=tezLibFolder%>;
				<%
				}
				%>
				fs_<%=cid%>.mkdirs(new org.apache.hadoop.fs.Path(tezLibPath_<%=cid%>));
				<%
				List<String> tezLibJarsName = new java.util.ArrayList<String>();
				if(isCustom){
					List<Map<String,String>> tezLibJarsNameValue = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__TEZ_LIB_NAME__");
					for(Map<String, String> tezLibJarsNameV : tezLibJarsNameValue){
						tezLibJarsName.add(tezLibJarsNameV.get("JAR_NAME"));
					}
				}else{
					String tezLibJarsNameValue = ElementParameterParser.getValue(node, "__TEZ_JARS_NAME__");
	    			if(tezLibJarsNameValue != null && !"".equals(tezLibJarsNameValue)){
	        			tezLibJarsName = java.util.Arrays.asList(tezLibJarsNameValue.split(","));
					}
				}
				%>
				String[] classPaths_<%=cid%> = System.getProperty("java.class.path").split(<%if(!isLocal && !isExecutedThroughWebHCat && inMain){%>String.valueOf(globalMap.get("current_client_path_separator"))<%}else{%>System.getProperty("path.separator")<%}%>);
				for(String classPath_<%=cid%> : classPaths_<%=cid%>){
					<%
					for(String jarName : tezLibJarsName){
					%>
						if(classPath_<%=cid%>.endsWith("<%=jarName%>")){
							org.apache.hadoop.fs.Path tezJarPath_<%=cid%> = new org.apache.hadoop.fs.Path(tezLibPath_<%=cid%> + "/<%=jarName%>");
							if(!fs_<%=cid%>.exists(tezJarPath_<%=cid%>)){
								fs_<%=cid%>.copyFromLocalFile(false, false, new org.apache.hadoop.fs.Path(classPath_<%=cid%>), tezJarPath_<%=cid%>);
							}
						}
					<%
					}
					%>
	    		}
			<%
			}else{
			%>
				String tezLibPath_<%=cid%> = <%=ElementParameterParser.getValue(node, "__TEZ_LIB_PATH__")%>;
			<%
			}
    		//define the location of tez lib
			%>
			String[] tezLibPaths_<%=cid%> = tezLibPath_<%=cid%>.split(",");
			script_<%=cid%>.append("SET tez.lib.uris ");
			int tezLibPathCount_<%=cid%> = 1;
			for(String tezLibPathKey_<%=cid%> : tezLibPaths_<%=cid%>){
				 script_<%=cid%>.append(<%=fsDefaultName%> + "/" + tezLibPathKey_<%=cid%>);
				 if(tezLibPathCount_<%=cid%> < tezLibPaths_<%=cid%>.length){
				 	script_<%=cid%>.append(",");
				 }
				 tezLibPathCount_<%=cid%>++;
			}
			script_<%=cid%>.append(";");
		<%
		}
		%>
		helper_<%=cid%>.add("script",script_<%=cid%>.toString());
<%
	}
%>

		StringBuilder sb_<%=cid%> = new StringBuilder();

<%
		if(generateRegisterJarCodeForAll) {
			for(int i=0; i<jarsToRegister.size(); i++) {
				String jarToRegister = jarsToRegister.get(i);
				for(int j=0; j<jars.size(); j++) {
					if(jars.get(j).contains(jarToRegister)) {
%>
						helper_<%=cid%>.add("jar",getJarsToRegister_<%=cid %>.replaceJarPaths("<%=jars.get(j)%>"));
<%
					}
				}
			}
		}

		if(defineFunctions.size() > 0){
			for(Map<String, String> item : defineFunctions){
%>
				helper_<%=cid%>.add("function", <%=item.get("FUNCTION_ALIAS") %> ,<%=item.get("UDF_FUNCTION") %>);
<%
			}
		}

		if(!isLocal && "HCatLoader".equals(function) && pigDistrib != null && pigDistrib.doSupportHCatalog()) { // If the HCatalog loader is used, we don't need a filename anymore, but a database name and a table name.
			if(!generateRegisterJarCodeForHCatalog) {
				if(defineJarsToRegister && registerJarForHCatalog.size() > 0){
					for(Map<String, String> item : registerJarForHCatalog){
%>
						helper_<%=cid%>.add("jar",<%=item.get("JAR_PATH") %>);
<%
					}
				}
			}
%>

			System.setProperty("hive.metastore.local", "false");
			System.setProperty("hive.metastore.uris", <%=thriftServer%>);
			sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT<%=partitionFilter.size()>0?"_TEMP":""%> = LOAD '"+<%=databaseName%>+"."+<%=tableName%>+"' using <%=hcatPackage%>.<%=function%>()");
<%
		} else if(!isLocal && "SequenceFileStorage".equals(function)) {
			List<IMetadataTable> metadatas = node.getMetadataList();
			IMetadataTable metadata = null;
			if(metadatas != null && metadatas.size() > 0) {
				metadata = metadatas.get(0);
			}

			String keyColumn = ElementParameterParser.getValue(node,"__KEYCOLUMN__");
			String valueColumn = ElementParameterParser.getValue(node,"__VALUECOLUMN__");

			String talendKeyClass = "";
			String talendValueClass = "";

			if(metadata!=null) {
    			List<IMetadataColumn> listColumns = metadata.getListColumns();

    			for (IMetadataColumn column : listColumns) {
    				if (column.getLabel().equals(keyColumn)) {
    					talendKeyClass = column.getTalendType();
    				}
    				if (column.getLabel().equals(valueColumn)) {
    					talendValueClass = column.getTalendType();
    				}
    			}
			}

			String keyConverterClass="com.twitter.elephantbird.pig.util.TextConverter";
			if (talendKeyClass.equals("id_Boolean")) keyConverterClass="com.twitter.elephantbird.pig.util.TextConverter";
			if (talendKeyClass.equals("id_Byte")) keyConverterClass="com.twitter.elephantbird.pig.util.IntWritableConverter";
			if (talendKeyClass.equals("id_byte[]")) keyConverterClass="com.twitter.elephantbird.pig.util.TextConverter";
			if (talendKeyClass.equals("id_Double")) keyConverterClass="com.talend.pig.util.DoubleWritableConverter";
			if (talendKeyClass.equals("id_Float")) keyConverterClass="com.talend.pig.util.FloatWritableConverter";
			if (talendKeyClass.equals("id_Integer")) keyConverterClass="com.twitter.elephantbird.pig.util.IntWritableConverter";
			if (talendKeyClass.equals("id_Long")) keyConverterClass="com.twitter.elephantbird.pig.util.LongWritableConverter";
			if (talendKeyClass.equals("id_Short")) keyConverterClass="com.twitter.elephantbird.pig.util.IntWritableConverter";
			if (talendKeyClass.equals("id_String")) keyConverterClass="com.twitter.elephantbird.pig.util.TextConverter";

			String valueConverterClass="com.twitter.elephantbird.pig.util.TextConverter";
			if (talendValueClass.equals("id_Boolean")) valueConverterClass="com.twitter.elephantbird.pig.util.TextConverter";
			if (talendValueClass.equals("id_Byte")) valueConverterClass="com.twitter.elephantbird.pig.util.IntWritableConverter";
			if (talendValueClass.equals("id_byte[]")) valueConverterClass="com.twitter.elephantbird.pig.util.TextConverter";
			if (talendValueClass.equals("id_Double")) valueConverterClass="com.talend.pig.util.DoubleWritableConverter";
			if (talendValueClass.equals("id_Float")) valueConverterClass="com.talend.pig.util.FloatWritableConverter";
			if (talendValueClass.equals("id_Integer")) valueConverterClass="com.twitter.elephantbird.pig.util.IntWritableConverter";
			if (talendValueClass.equals("id_Long")) valueConverterClass="com.twitter.elephantbird.pig.util.LongWritableConverter";
			if (talendValueClass.equals("id_Short")) valueConverterClass="com.twitter.elephantbird.pig.util.IntWritableConverter";
			if (talendValueClass.equals("id_String")) valueConverterClass="com.twitter.elephantbird.pig.util.TextConverter";

			if (isS3Location) {
			    %>
	            sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = LOAD '" + "s3n://" + <%=s3username%> +":" + decryptedS3Password_<%=cid%> + "@" + <%=s3bucket%>
	                + "' using com.twitter.elephantbird.pig.load.SequenceFileLoader('-c <%=keyConverterClass%>','-c <%=valueConverterClass%>')");
	            <%
	        } else {
	            %>
	            sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = LOAD '" + <%=inputFilename%> +
	                "' using com.twitter.elephantbird.pig.load.SequenceFileLoader('-c <%=keyConverterClass%>','-c <%=valueConverterClass%>')");
	            <%
	        }

			if(metadata!=null) {
%>
				sb_<%=cid%>.append(" AS (");
				sb_<%=cid%>.append("<%=keyColumn%>:<%=Java2STLangTypesHelper.getPigType(metadata, keyColumn)%>, <%=valueColumn%>:<%=Java2STLangTypesHelper.getPigType(metadata, valueColumn)%>");
				sb_<%=cid%>.append(")");
<%
			}
		} else {
			if("CustomLoader".equals(function)) {
				String customLoader = ElementParameterParser.getValue(node, "__CUSTOM_LOADER__");
	            if (isS3Location) {
	                %>
	                sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = LOAD '" + "s3n://" + <%=s3username%> +":" + decryptedS3Password_<%=cid%> + "@" + <%=s3bucket%>
	                    + "' using " + <%=customLoader%>);
	                <%
	            } else {
	                %>
	                sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = LOAD '"+<%=inputFilename%>+"' using " + <%=customLoader%>);
	                <%
	            }
			} else {
				List<IMetadataTable> metadatas = node.getMetadataList();
				IMetadataTable metadata = null;
				if(metadatas != null && metadatas.size() > 0) {
					metadata = metadatas.get(0);
				}

				if("HBaseStorage".equals(function)){
					String hbasetable = ElementParameterParser.getValue(node, "__HBASE_TABLE__");
					boolean loadkey = "true".equals(ElementParameterParser.getValue(node, "__LOAD_KEY__"));//if load key,the first column is hbase row key
					List<Map<String, String>> mapping = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__MAPPING__");
					%>
					sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = LOAD 'hbase://").append(<%=hbasetable%>).append("' using org.apache.pig.backend.hadoop.hbase.HBaseStorage('");
					<%

					if(metadata!=null && mapping!=null) {
						for(int i=0;i<mapping.size();i++){
							if(loadkey && (i == 0)) {
								continue;
							}
                			Map<String, String> map = mapping.get(i);
                			String family_column= map.get("FAMILY_COLUMN");
%>
							sb_<%=cid%>.append(<%=family_column%>);
<%
							if(i < mapping.size()-1) {
%>
							sb_<%=cid%>.append(" ");
<%
							}
            			}
					}
%>
					sb_<%=cid%>.append("'");
<%
					List<Map<String, String>> hbasestorageParams = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__HBASESTORAGE_PARAMETER__");

					if(loadkey) {
%>
					sb_<%=cid%>.append(",'-loadKey true");
<%
					}

					if(hbasestorageParams!=null) {
						for(int i=0;i<hbasestorageParams.size();i++) {
							if(i == 0) {
								if(!loadkey) {
%>
								sb_<%=cid%>.append(",'");
<%
								} else {
%>
								sb_<%=cid%>.append(" ");
<%
								}
							}
							Map<String, String> param = hbasestorageParams.get(i);
							String name = param.get("PARAM_NAME");
							String value = param.get("PARAM_VALUE");
%>
							sb_<%=cid%>.append("-<%=name%> ").append(<%=value%>);
<%
							if(i < hbasestorageParams.size()-1) {
%>
							sb_<%=cid%>.append(" ");
<%
							} else if(!loadkey){
%>
							sb_<%=cid%>.append("'");
<%
							}
						}
					}

					if(loadkey) {
%>
					sb_<%=cid%>.append("'");
<%
					}
%>
					sb_<%=cid%>.append(")");
<%
				} else if(isParquet) {
	                if (isS3Location) {
	                    %>
	                    sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = LOAD '" + "s3n://" + <%=s3username%> +":" + decryptedS3Password_<%=cid%> + "@" + <%=s3bucket%>
	                        + "' using parquet.pig.ParquetLoader");
	                    <%
	                } else {
	                    %>
	                    sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = LOAD '"+<%=inputFilename%>+"' using parquet.pig.ParquetLoader");
	                    <%
	                }
				} else {
					if("RCFilePigStorage".equals(function)) {
						function = "com.twitter.elephantbird.pig.store.RCFilePigStorage";
					}

					if("AvroStorage".equals(function)) {
						function = "org.apache.pig.piggybank.storage.avro.AvroStorage";
					}
					if (isS3Location) {
                        %>
                        sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = LOAD '" + "s3n://" + <%=s3username%> +":" + decryptedS3Password_<%=cid%> + "@" + <%=s3bucket%>
                            + "' using <%=function%>(<%="PigStorage".equals(function)?"'\"+"+fieldSeparator+"+\"'":""%>)");
                        <%
                    } else {
                        %>
                        sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = LOAD '"+<%=inputFilename%>+"' using <%=function%>(<%="PigStorage".equals(function)?"'\"+"+fieldSeparator+"+\"'":""%>)");
                        <%
                    }
				}

				if(metadata!=null) {
					if(metadata.getListColumns() != null && metadata.getListColumns().size() > 0) {
%>
						sb_<%=cid%>.append(" AS (");
<%
						for(int i=0; i<metadata.getListColumns().size(); i++) {
%>
							sb_<%=cid%>.append("<%=i!=0?", ":""%><%=metadata.getListColumns().get(i).getLabel()%>:<%=Java2STLangTypesHelper.getPigType(metadata, metadata.getListColumns().get(i).getLabel())%>");
<%

						}
%>
						sb_<%=cid%>.append(")");
<%
					}
				}
			}
		}
%>
		sb_<%=cid%>.append(";");

		helper_<%=cid%>.add("query",sb_<%=cid%>.toString());
<%
		if(!isLocal && "HCatLoader".equals(function) && pigDistrib != null && pigDistrib.doSupportHCatalog()) { // If the HCatalog loader is used, we will have to consider the partition filter
			if(partitionFilter.size() > 0){
				int i = 0;
%>
				sb_<%=cid%> = new StringBuilder();
				sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = FILTER <%=cid%>_<%=outputConnectionName%>_RESULT_TEMP BY ");
<%
				for(Map<String, String> item : partitionFilter){
					if(i++ != 0) {
%>
						sb_<%=cid%>.append(" AND ");
<%
					}
%>
					sb_<%=cid%>.append("(" + <%=item.get("PART_NAME") %>);
					sb_<%=cid%>.append(" == ");
					sb_<%=cid%>.append(<%=item.get("PART_VALUE") %> + ")");
<%
				}
%>
				sb_<%=cid%>.append(";");

				helper_<%=cid%>.add("query",sb_<%=cid%>.toString());
<%
			}
		}
%>

		<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/RegisterPigLatin.javajet"%>
