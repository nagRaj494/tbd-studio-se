<%@ jet 
imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.MappingTypeRetriever
		org.talend.core.model.metadata.MetadataTalendType
		org.talend.designer.runprocess.ProcessorException
		org.talend.designer.runprocess.ProcessorUtilities
		org.talend.core.model.metadata.types.JavaTypesManager  
		java.util.List	
		java.util.ArrayList	
		java.util.Map
		java.util.HashMap
		java.util.Set
		java.util.HashSet
		" 
		skeleton="@{org.talend.designer.components.localprovider}/components/templates/db_output_bulk.skeleton"
%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument outputCodeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)outputCodeGenArgument.getArgument();
	final String cid = node.getUniqueName();
	
	boolean extendedInsert = "true".equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
	String numPerInsert = ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__");
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	boolean dieOnError = "true".equals(ElementParameterParser.getValue(node,"__DIE_ON_ERROR__"));
	dbLog = new DBLogUtil(node);
	
	getManager(dbmsId, cid, node);
	String incomingConnName = null;
	List<IMetadataColumn> columnList = getColumnList(node);
	
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns!=null && conns.size()>0) {
		IConnection conn = conns.get(0);
		incomingConnName = conn.getName();
	}
	    
	List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
	for(IConnection conn : outgoingConns) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>        
			<%=conn.getName() %> = null;            
<%      
		}
	}
    
	List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, false, null, null);
    
	////////////////////////////////////////////////////////////
	List<Column> colStruct =  new ArrayList();
	for(Column colStmt:stmtStructure) {
	    if(!colStmt.isReplaced()&&!colStmt.isAddCol()) {
	        colStruct.add(colStmt);
	    }
	}
	
	if(incomingConnName != null && columnList != null) {
    	int counter = 1;
%>
        if(needInitialization_<%=cid%>) {
<%
            if(extendedInsert) {
%>
                needInitialization_<%=cid%> = false;
<%
            }
%>
            sbValue_<%=cid%> = new java.lang.StringBuilder(insertPrefix_<%=cid%>);
        }
        sbValue_<%=cid%>.append("(");
<%
		for(Column column : colStruct) {
			if(column.isInsertable()) {
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
				if(("Byte".equals(typeToGenerate)) || ("byte".equals(typeToGenerate)) || ("byte[]".equals(typeToGenerate)) || ("BigDecimal".equals(typeToGenerate)) || ("Object".equals(typeToGenerate)) || ("List".equals(typeToGenerate)) || ("Dynamic".equals(typeToGenerate)) || ("Document".equals(typeToGenerate))) {
%>
                    if(true) {
                        throw new java.lang.Exception("The component tImpalaOutput does not the support the type <%=typeToGenerate%>.");
                    }
<%
				}
				if(column.getColumn().isNullable()) {
%>
                    if(<%=incomingConnName%>.<%=column.getName()%>==null) {
                        sbValue_<%=cid%>.append("<%=counter==1?"":","%>null");
                    } else {
<%
                }
                
                if(("String").equals(typeToGenerate)) {
%>
                    sbValue_<%=cid%>.append("<%=counter==1?"":","%>'" + <%=incomingConnName%>.<%=column.getName()%>.replaceAll("\'", "\\\\'") + "'");
<%
                } else if(("Character").equals(typeToGenerate) || ("char").equals(typeToGenerate)) {
%>
					sbValue_<%=cid%>.append("<%=counter==1?"":","%>'" + <%=incomingConnName%>.<%=column.getName()%> + "'");
<%                
                }else if(("java.util.Date").equals(typeToGenerate)) {
%>
                    sbValue_<%=cid%>.append("<%=counter==1?"":","%>'" + FormatterUtils.format_Date(<%=incomingConnName%>.<%=column.getName()%>, "yyyy-MM-dd") + "'");
<%
                } else {
%>
                    sbValue_<%=cid%>.append("<%=counter==1?"":","%>" + <%=incomingConnName%>.<%=column.getName()%>);
<%
                }
                if(column.getColumn().isNullable()) {
%>
                    }
<%
                }
                
				counter++;                        
			}
		}
%>
        sbValue_<%=cid%>.append(")");
        rowCount<%=cid%>++;
		try {
			nb_line_<%=cid%>++;
<%
			if(extendedInsert) {
%>
                if(rowCount<%=cid%> == <%=numPerInsert%>) {
<%                
			}
%>
			stmt_<%=cid %>.executeUpdate(sbValue_<%=cid%>.toString());
			insertPrefix_<%=cid%> = insertPrefix_<%=cid%>.replace("INSERT OVERWRITE", "INSERT INTO");
			<%dbLog.data().inserting(dbLog.var("nb_line"));%>
<%
            if(extendedInsert) {
%>
                    rowCount<%=cid%> = 0;
                    needInitialization_<%=cid%> = true;
                } else {
                    sbValue_<%=cid%>.append(",");                    
                }
<%                
            }        
%>
		} catch(java.lang.Exception e) {
<%
			if (dieOnError) {
%>
				throw e;
<%
			} else {
				dbLog.logPrintedException("e.getMessage()");
%>
				System.err.print("Exception in the component <%=cid%>:" + e.getMessage());
<%
			} 
%>
		}
<%
	}
%>