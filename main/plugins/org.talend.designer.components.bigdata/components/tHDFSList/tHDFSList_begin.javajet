<%@ jet 
	imports="
    org.talend.core.model.process.INode 
    org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.ElementParameterParser
	java.util.Map 
    java.util.List 
	"
%>

	<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/HDFS/GetFileSystem.javajet"%>
	
<%
	String path = ElementParameterParser.getValue(node, "__PATH__");
	String hdfsdir = ElementParameterParser.getValue(node, "__DIRECTORY__");
	boolean incldSubdir = ("true").equals(ElementParameterParser.getValue(node, "__INCLUDSUBDIR__"));
  	boolean ifexclude = ("true").equals(ElementParameterParser.getValue(node, "__IFEXCLUDE__"));
  	String filelistType = ElementParameterParser.getValue(node, "__LIST_MODE__");
  	boolean useGlob = ("true").equals(ElementParameterParser.getValue(node, "__GLOBEXPRESSIONS__"));
  	List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");
  	boolean caseSensitive = ("YES").equals(ElementParameterParser.getValue(node, "__CASE_SENSITIVE__"));
  	String excludefilemask = ElementParameterParser.getValue(node, "__EXCLUDEFILEMASK__");
  	
	boolean bOrdByDefault = "true".equals(ElementParameterParser.getValue(node, "__ORDER_BY_NOTHING__"));
    boolean bOrdByFileName = "true".equals(ElementParameterParser.getValue(node, "__ORDER_BY_FILENAME__"));
    boolean bOrdByFileSize = "true".equals(ElementParameterParser.getValue(node, "__ORDER_BY_FILESIZE__"));
    boolean bOrdByModifiedTime = "true".equals(ElementParameterParser.getValue(node, "__ORDER_BY_MODIFIEDDATE__"));
    
    boolean bOrdASC = "true".equals(ElementParameterParser.getValue(node, "__ORDER_ACTION_ASC__"));
%>
	java.util.List<String> maskList_<%=cid %> = new java.util.ArrayList<String>();
	<%
    if (files.size() == 0){
		if (useGlob){
    	%>
	    maskList_<%=cid %>.add("*");
	    <%
	    } else {
	    %>
	    maskList_<%=cid %>.add(".*");
	    <%
	    }
	}
  	
  	for (int i = 0; i < files.size(); i++) {
    	Map<String, String> line = files.get(i);
    %> 
    	maskList_<%=cid %>.add(<%= line.get("FILEMASK") %>);
  	<%}%>
  	
  	int NB_FILE<%=cid%> = 0;
  	
  	for (String filemask_<%=cid%> : maskList_<%=cid%>) {//TD1024
	<%if(useGlob) {%>
		filemask_<%=cid%> = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_<%=cid%>.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	<%}
	
	if (ifexclude){
    %>   
		String excludefilemask_<%=cid%> = <%=excludefilemask%>;
    	List<java.util.regex.Pattern> excludefileNameEachPattern_<%=cid%> = new java.util.ArrayList<java.util.regex.Pattern>();
	   	if(excludefilemask_<%=cid%>!=null && !"".equals(excludefilemask_<%=cid%>)) {
		  	for(String excludefilemaskEach_<%=cid%> : excludefilemask_<%=cid%>.split(",")) {
		  	<%if (useGlob){%>
		  		excludefilemaskEach_<%=cid%> = org.apache.oro.text.GlobCompiler.globToPerl5(excludefilemaskEach_<%=cid%>.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
		  	<%}
  	 		if(!caseSensitive){
		  	%>
				excludefileNameEachPattern_<%=cid%>.add(java.util.regex.Pattern.compile(excludefilemaskEach_<%=cid%>,java.util.regex.Pattern.CASE_INSENSITIVE));
			<%} else {%>
				excludefileNameEachPattern_<%=cid%>.add(java.util.regex.Pattern.compile(excludefilemaskEach_<%=cid%>));
			<%}%>	  	 		
			}
	  }
    <%}
    
    if(caseSensitive) {
    %>
	java.util.regex.Pattern fileNamePattern_<%=cid%> = java.util.regex.Pattern.compile(filemask_<%=cid%>);
	<%} else {%>
	java.util.regex.Pattern fileNamePattern_<%=cid%> = java.util.regex.Pattern.compile(filemask_<%=cid%>, java.util.regex.Pattern.CASE_INSENSITIVE);
	<% } %>
	
	org.apache.hadoop.fs.Path hdfsdir_<%=cid%> = new org.apache.hadoop.fs.Path(<%=hdfsdir%>);
	final java.util.List<org.apache.hadoop.fs.FileStatus> status_<%=cid%> = new java.util.ArrayList<org.apache.hadoop.fs.FileStatus>();
	final org.apache.hadoop.fs.FileSystem filesystem_<%=cid%> = fs_<%=cid%>;
	filesystem_<%=cid%>.listStatus(hdfsdir_<%=cid%>,new org.apache.hadoop.fs.PathFilter() {
	
		public boolean accept(org.apache.hadoop.fs.Path path) {
			try {
				org.apache.hadoop.fs.FileStatus statu = filesystem_<%=cid%>.getFileStatus(path);
				if(statu.isDir()) {
					<%if(("DIRECTORIES OR BOTH").contains(filelistType)) {%>
					status_<%=cid%>.add(statu);
					<%}%>
					
					<%if(incldSubdir) {%>
					filesystem_<%=cid%>.listStatus(path, this);
					<%}%>
				} else {
					<%if(("FILES OR BOTH").contains(filelistType)) {%>
					status_<%=cid%>.add(statu);
					<%}%>
				}
			} catch (java.io.FileNotFoundException e) {
				e.printStackTrace();
				
        		<%if(isLog4jEnabled) {%>
               	log.error("<%=cid%> - " + e.getMessage());
                <%}%>
			} catch (java.io.IOException e) {
				e.printStackTrace();
				
			    <%if(isLog4jEnabled) {%>
               	log.error("<%=cid%> - " + e.getMessage());
                <%}%>
			}
			return false;
		}

	});
	
	<%if(bOrdByDefault){%>
	java.util.Collections.sort(status_<%=cid%>);
	<%} else if(bOrdByFileName) {%>
	java.util.Collections.sort(status_<%=cid%>,new java.util.Comparator<org.apache.hadoop.fs.FileStatus>() {
	
		public int compare(org.apache.hadoop.fs.FileStatus f1, org.apache.hadoop.fs.FileStatus f2) {
			int result = 0;
			boolean f1IsFile = !f1.isDir(); 
			boolean f2IsFile = !f2.isDir();
			
			if((f1IsFile && f2IsFile) || (!f1IsFile && !f2IsFile)) {
				result = f1.getPath().getName().compareTo(f2.getPath().getName());
			} else if(f1IsFile && !f2IsFile) {
				result = 1;
			} else if(!f1IsFile && f2IsFile) {
				result = -1;
			}
			
			return <%if(!bOrdASC) {%>-<%}%>result;
		}
				
	});
	<%} else if(bOrdByFileSize) {%>
	java.util.Collections.sort(status_<%=cid%>,new java.util.Comparator<org.apache.hadoop.fs.FileStatus>() {
	
		public int compare(org.apache.hadoop.fs.FileStatus f1, org.apache.hadoop.fs.FileStatus f2) {
			int result = 0;
			boolean f1IsFile = !f1.isDir(); 
			boolean f2IsFile = !f2.isDir();
			
			if(f1IsFile && f2IsFile) {
				long size_1 = f1.getLen();
            	long size_2 = f2.getLen();
                if (size_1 == size_2) {
                    result = f1.getPath().getName().compareTo(f2.getPath().getName());
                } else if (size_1 > size_2) {
                    result = 1;
                } else {
                    result = -1;
                }
			} else if(f1IsFile && !f2IsFile) {
				result = 1;
			} else if(!f1IsFile && f2IsFile) {
				result = -1;
			} else if(!f1IsFile && !f2IsFile) {
				result = f1.getPath().getName().compareTo(f2.getPath().getName());
			}
			
			return <%if(!bOrdASC) {%>-<%}%>result;
		}
				
	});
	<%} else if(bOrdByModifiedTime) {%>
	java.util.Collections.sort(status_<%=cid%>,new java.util.Comparator<org.apache.hadoop.fs.FileStatus>() {
	
		public int compare(org.apache.hadoop.fs.FileStatus f1, org.apache.hadoop.fs.FileStatus f2) {
			int result = 0;
			boolean f1IsFile = !f1.isDir(); 
			boolean f2IsFile = !f2.isDir();
			
			if((f1IsFile && f2IsFile) || (!f1IsFile && !f2IsFile)) {
				if(f1.getModificationTime() == f2.getModificationTime()) {
					result = f1.getPath().getName().compareTo(f2.getPath().getName());
				} else if(f1.getModificationTime() > f2.getModificationTime()) {
					result = 1;
				} else {
					result = -1;
				}
			} else if(f1IsFile && !f2IsFile) {
				result = 1;
			} else if(!f1IsFile && f2IsFile) {
				result = -1;
			}
			
			return <%if(!bOrdASC) {%>-<%}%>result;
		}
				
	});
	<%}%>
	
	<%if(isLog4jEnabled) {%>
		log.info("<%=cid%> - Start to list files");
	<%}%>
	for(int i_<%=cid%>=0;i_<%=cid%><status_<%=cid%>.size();i_<%=cid%>++) {//TD512
		org.apache.hadoop.fs.FileStatus file_<%=cid%> = status_<%=cid%>.get(i_<%=cid%>);
		org.apache.hadoop.fs.Path path_<%=cid%> = file_<%=cid%>.getPath();
		String fileName_<%=cid%> = path_<%=cid%>.getName();
		
		if (!fileNamePattern_<%=cid%>.matcher(fileName_<%=cid%>).matches()){
          continue;
        }
        
		<%if (ifexclude){%> 
        boolean isExclude_<%=cid%> = false;
        for(java.util.regex.Pattern pattern : excludefileNameEachPattern_<%=cid%>) {
        	if(pattern.matcher(fileName_<%=cid%>).matches()) {
        		isExclude_<%=cid%> = true;
        		break;
        	}
        }
        if(isExclude_<%=cid%>) {
          continue;
        }
		<%}%>
		
		String currentFileName_<%=cid%> = fileName_<%=cid%>;
		String currentFilePath_<%=cid%> = path_<%=cid%>.toString();
		String currentFileDirectory_<%=cid%> = path_<%=cid%>.getParent().toString();
		String currentFileExtension_<%=cid%> = "";
		if(!file_<%=cid%>.isDir() && fileName_<%=cid%>.contains(".")) {
			currentFileExtension_<%=cid%> = fileName_<%=cid%>.substring(fileName_<%=cid%>.lastIndexOf(".")+1);
		}
		
		NB_FILE<%=cid%> ++;
		globalMap.put("<%=cid%>_CURRENT_FILE", currentFileName_<%=cid%>);
		globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%>);
		globalMap.put("<%=cid %>_CURRENT_FILEDIRECTORY", currentFileDirectory_<%=cid%>);
		globalMap.put("<%=cid %>_CURRENT_FILEEXTENSION", currentFileExtension_<%=cid%>);
		globalMap.put("<%=cid%>_NB_FILE", NB_FILE<%=cid%>);
		
		<%if(isLog4jEnabled) {%>
		log.info("<%=cid%> - Current file or directory path : " + currentFilePath_<%=cid%>);
	  	<%}%>
		
