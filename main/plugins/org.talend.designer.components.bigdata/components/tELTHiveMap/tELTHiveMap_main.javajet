<%@ jet 
	imports="
	
	org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
	org.talend.core.model.process.IConnection
	org.talend.designer.dbmap.external.data.ExternalDbMapData
	org.talend.designer.dbmap.external.data.ExternalDbMapTable
	org.talend.core.model.process.ElementParameterParser
	org.talend.designer.dbmap.DbMapComponent
	org.talend.core.model.process.INode
	java.util.HashMap
	java.util.Map
	java.util.Set
	java.util.HashSet
	" 
%>
<%


	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	DbMapComponent node = (DbMapComponent) codeGenArgument.getArgument();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    org.talend.designer.dbmap.language.hive.HiveGenerationManager gm = new org.talend.designer.dbmap.language.hive.HiveGenerationManager();
    String uniqueNameComponent = null;

    List<IConnection> outputConnections = (List<IConnection>) node.getOutgoingConnections();
    ExternalDbMapData data = (ExternalDbMapData) node.getExternalData();
    uniqueNameComponent = node.getUniqueName();

    String theDistribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
	String theVersion = ElementParameterParser.getValue(node, "__HIVE_VERSION__");

	if("true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"))) {
	    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
	    for (INode pNode : node.getProcess().getNodesOfType("tHiveConnection")) {
	        if(connection!=null && connection.equals(pNode.getUniqueName())) {
	            theDistribution = ElementParameterParser.getValue(pNode, "__DISTRIBUTION__");
	            theVersion = ElementParameterParser.getValue(pNode, "__HIVE_VERSION__");
	        }
	    }
	}

	org.talend.hadoop.distribution.component.HiveComponent hiveDistrib = null;
	try {
	    hiveDistrib = (org.talend.hadoop.distribution.component.HiveComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(theDistribution, theVersion);
	} catch (java.lang.Exception e) {
	    e.printStackTrace();
	    return "";
	}
	boolean isCustom = hiveDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;

	String hiveServer = ElementParameterParser.getValue(node, "__HIVE_SERVER__");
	String connectionMode = ElementParameterParser.getValue(node, "__CONNECTION_MODE__");
	String fsDefalutName = "fs.default.name";

	boolean setTempPath = "true".equals(ElementParameterParser.getValue(node, "__SET_TEMP_PATH__")); 
	if(setTempPath) { 
		String tempPath = ElementParameterParser.getValue(node, "__TEMP_PATH__"); 
	%> 
		System.setProperty("java.io.tmpdir", <%=tempPath%>); 
	<% 
	}
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	if(("false").equals(useExistingConn) && !hiveDistrib.isExecutedThroughWebHCat()) {
		boolean setMapredJT = "true".equals(ElementParameterParser.getValue(node, "__SET_MAPRED_JT__"));
		boolean setNamenode = "true".equals(ElementParameterParser.getValue(node, "__SET_FS_DEFAULT_NAME__"));
		List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");

		boolean useYarn = "true".equals(ElementParameterParser.getValue(node, "__USE_YARN__"));

		boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
		boolean securityIsEnabled = useKrb && (isCustom || (hiveDistrib.doSupportKerberos() && (("HIVE".equalsIgnoreCase(hiveServer) && "EMBEDDED".equalsIgnoreCase(connectionMode)) || "HIVE2".equalsIgnoreCase(hiveServer))));
		boolean securedStandaloneHive2 = securityIsEnabled && "HIVE2".equalsIgnoreCase(hiveServer) && "STANDALONE".equalsIgnoreCase(connectionMode);
		boolean securedEmbedded = securityIsEnabled && "EMBEDDED".equalsIgnoreCase(connectionMode);
		boolean securedEmbeddedHive2 = securedEmbedded && "HIVE2".equalsIgnoreCase(hiveServer);

		String hivePrincipal = ElementParameterParser.getValue(node, "__HIVE_PRINCIPAL__");
		
        boolean useMapRTicket = ElementParameterParser.getBooleanValue(node, "__USE_MAPRTICKET__");
        String mapRTicketUsername = ElementParameterParser.getValue(node, "__MAPRTICKET_USERNAME__");
        String mapRTicketCluster = ElementParameterParser.getValue(node, "__MAPRTICKET_CLUSTER__");
        String mapRTicketDuration = ElementParameterParser.getValue(node, "__MAPRTICKET_DURATION__");

        boolean setMapRHomeDir = ElementParameterParser.getBooleanValue(node, "__SET_MAPR_HOME_DIR__");
        String mapRHomeDir = ElementParameterParser.getValue(node, "__MAPR_HOME_DIR__");

        boolean setMapRHadoopLogin = ElementParameterParser.getBooleanValue(node, "__SET_HADOOP_LOGIN__");
        String mapRHadoopLogin = ElementParameterParser.getValue(node, "__HADOOP_LOGIN__");

        String passwordFieldName = "";

		if(hadoopProps.size() > 0){
			for(Map<String, String> item : hadoopProps){
%>
			System.setProperty(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
<%
			} 
		}
	
		if(securedEmbedded) {
			String metastoreUrl = ElementParameterParser.getValue(node, "__METASTORE_JDBC_URL__");
			String driverClass = ElementParameterParser.getValue(node, "__METASTORE_CLASSNAME__");
			String metastoreUsername = ElementParameterParser.getValue(node, "__METASTORE_USERNAME__");
			boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
			String userPrincipal = ElementParameterParser.getValue(node, "__PRINCIPAL__");
			String keytabPath = ElementParameterParser.getValue(node, "__KEYTAB_PATH__");
%>
			System.setProperty("hive.metastore.sasl.enabled", "true");
			System.setProperty("javax.jdo.option.ConnectionDriverName", <%=driverClass%>);
			<%if(securedEmbeddedHive2){
				// Disable authorization when using local HiveServer2 in secure mode
				%>
				System.setProperty("hive.security.authorization.enabled", "false");
				<%
			}else{
				%>
				System.setProperty("hive.security.authorization.enabled", "true");
				<%
			}
			%>
			System.setProperty("javax.jdo.option.ConnectionURL", <%=metastoreUrl%>);
			System.setProperty("javax.jdo.option.ConnectionUserName", <%=metastoreUsername%>);
			
    		<%
    		passwordFieldName = "__METASTORE_PASSWORD__";
    		%>
    		
    		<%if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {%> 
        	String decryptedMetastorePassword_<%=uniqueNameComponent%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
   		 	<%} else {%>
        	String decryptedMetastorePassword_<%=uniqueNameComponent%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
			<%}
			
			if(securedEmbeddedHive2){
				%>
				System.setProperty("hive.server2.authentication.kerberos.principal", <%=ElementParameterParser.getValue(node, "__HIVESERVER2_LOCAL_PRINCIPAL__")%>);
				System.setProperty("hive.server2.authentication.kerberos.keytab", <%=ElementParameterParser.getValue(node, "__HIVESERVER2_LOCAL_KEYTAB__")%>);
				<%
			}
			%>

			System.setProperty("javax.jdo.option.ConnectionPassword", decryptedMetastorePassword_<%=uniqueNameComponent%>);
			System.setProperty("hive.metastore.kerberos.principal", <%=hivePrincipal%>);				
<%
			if(useKeytab) {
%>
				org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(<%=userPrincipal%>, <%=keytabPath%>);
<%
			}
		}

		if(securedStandaloneHive2){
			boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
			String userPrincipal = ElementParameterParser.getValue(node, "__PRINCIPAL__");
			String keytabPath = ElementParameterParser.getValue(node, "__KEYTAB_PATH__");

            if ((isCustom || hiveDistrib.doSupportMapRTicket()) && useMapRTicket) {
                %>
                System.setProperty("pname", "MapRLogin");
                System.setProperty("https.protocols", "TLSv1.2");
                System.setProperty("mapr.home.dir", <%=setMapRHomeDir ? mapRHomeDir : "\"/opt/mapr\"" %>);
                System.setProperty("hadoop.login", <%=setMapRHadoopLogin ? mapRHadoopLogin : "\"kerberos\""%>);
                <%
            }
			if(useKeytab) {
%>
				org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(<%=userPrincipal%>, <%=keytabPath%>);
<%
			}
			if ((isCustom || hiveDistrib.doSupportMapRTicket()) && useMapRTicket) {
                %>
                com.mapr.login.client.MapRLoginHttpsClient maprLogin_<%=uniqueNameComponent%> = new com.mapr.login.client.MapRLoginHttpsClient();
                maprLogin_<%=uniqueNameComponent%>.getMapRCredentialsViaKerberos(<%=mapRTicketCluster%>, <%=mapRTicketDuration%>);
                <%
            }
		}
		
		// Mapr ticket
        if((!securedStandaloneHive2 && !securedEmbedded && (isCustom || hiveDistrib.doSupportMapRTicket()) && useMapRTicket)) {
            passwordFieldName = "__MAPRTICKET_PASSWORD__";
            %>
            System.setProperty("pname", "MapRLogin");
            System.setProperty("https.protocols", "TLSv1.2");
            System.setProperty("mapr.home.dir", <%=setMapRHomeDir ? mapRHomeDir : "\"/opt/mapr\"" %>);
            com.mapr.login.client.MapRLoginHttpsClient maprLogin_<%=uniqueNameComponent%> = new com.mapr.login.client.MapRLoginHttpsClient();
            <%
            if (setMapRHadoopLogin) {
                %>
                System.setProperty("hadoop.login", <%=mapRHadoopLogin%>);
                <%
            } else {
                %>
                maprLogin_<%=uniqueNameComponent%>.setCheckUGI(false);
                <%
            }
            if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {%>
                String decryptedMaprPassword_<%=uniqueNameComponent%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
            <%} else {%>
                String decryptedMaprPassword_<%=uniqueNameComponent%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
            <%}%>
            <%
            if(hiveDistrib.doSupportMaprTicketV52API()){
            	%>
            	maprLogin_<%=uniqueNameComponent%>.getMapRCredentialsViaPassword(<%=mapRTicketCluster%>, <%=mapRTicketUsername%>, decryptedMaprPassword_<%=uniqueNameComponent%>, <%=mapRTicketDuration%>, "");
            	<%
            } else {
            	%>
            	maprLogin_<%=uniqueNameComponent%>.getMapRCredentialsViaPassword(<%=mapRTicketCluster%>, <%=mapRTicketUsername%>, decryptedMaprPassword_<%=uniqueNameComponent%>, <%=mapRTicketDuration%>);
            	<%
            }
        }

		if(((isCustom && !useYarn) || (!isCustom && hiveDistrib.isHadoop1())) && setMapredJT) {
			String mapredJT = ElementParameterParser.getValue(node, "__MAPRED_JT__");
%>
			System.setProperty("mapred.job.tracker", <%=mapredJT%>);
<%
		}

		if(setNamenode) {
			String namenode = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
%>
			System.setProperty("<%=fsDefalutName%>", <%=namenode%>);
<%
		}			
	}   			
	
    List<ExternalDbMapTable> outputTables = data.getOutputTables();

    Map<String, IConnection> nameToOutputConnection = new HashMap<String, IConnection>();
    for (IConnection connection : outputConnections) {
        nameToOutputConnection.put(connection.getUniqueName(), connection);
    }

	Set<String> tablesProcessed = new HashSet<String>();
    int lstOutputTablesSize = outputTables.size();
    for (int i = 0; i < lstOutputTablesSize; i++) {
        ExternalDbMapTable outputTable = outputTables.get(i);
        String outputTableName = outputTable.getName();

			IConnection connection = nameToOutputConnection.get(outputTableName);

        if (connection == null) {
        	continue;
        }

        String sqlQuery = gm.buildSqlSelect((DbMapComponent) node, outputTable.getName());
        
	%>

			globalMap.put(
				"<%=uniqueNameComponent %>"+"QUERY" + "<%= connection.getUniqueName() %>",
				<%= sqlQuery.replaceAll("[\r\n]", " ") %>
			);
			globalMap.put(
					"<%=uniqueNameComponent %>"+"QUERY_COLUMNS_NAME" + "<%= connection.getUniqueName() %>",
					<%= gm.getQueryColumnsName() %>
			);
			<%
            if(!tablesProcessed.contains(outputTable.getTableName())) {          
            %>       
                Object <%= outputTable.getTableName() %> = new Object();         
            <%       
            } 
			tablesProcessed.add(outputTable.getTableName());
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%>
