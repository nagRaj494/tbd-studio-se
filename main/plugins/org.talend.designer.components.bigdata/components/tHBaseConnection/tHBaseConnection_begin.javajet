<%@ jet
	imports="
	java.util.List
	java.util.Map
	org.talend.core.model.process.ElementParameterParser	
	org.talend.core.model.process.INode
	org.talend.designer.codegen.config.CodeGeneratorArgument
	"
%>

	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
	
<%	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
	String zookeeper_quorum = ElementParameterParser.getValue(node, "__ZOOKEEPER_QUORUM__");
	String zookeeper_client_port = ElementParameterParser.getValue(node, "__ZOOKEEPER_CLIENT_PORT__");
	
	boolean setZNodeParent = "true".equals(ElementParameterParser.getValue(node, "__SET_ZNODE_PARENT__"));
	String zNodeParent = ElementParameterParser.getValue(node, "__ZNODE_PARENT__");

	String distribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
	String hbaseVersion = ElementParameterParser.getValue(node, "__HBASE_VERSION__");
	boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
	boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
	String userPrincipal = ElementParameterParser.getValue(node, "__PRINCIPAL__");
	String keytabPath = ElementParameterParser.getValue(node, "__KEYTAB_PATH__");
	String hbaseMasterPrincipal = ElementParameterParser.getValue(node, "__HBASE_MASTER_PRINCIPAL__");
	String hbaseRegionServerPrincipal = ElementParameterParser.getValue(node, "__HBASE_REGIONSERVER_PRINCIPAL__");
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	boolean configureFromClassPath = "true".equals(ElementParameterParser.getValue(node, "__CONFIGURATIONS_FROM_CLASSPATH__"));

    boolean useMapRTicket = ElementParameterParser.getBooleanValue(node, "__USE_MAPRTICKET__");
    String username = ElementParameterParser.getValue(node, "__USERNAME__");
    String mapRTicketCluster = ElementParameterParser.getValue(node, "__MAPRTICKET_CLUSTER__");
    String mapRTicketDuration = ElementParameterParser.getValue(node, "__MAPRTICKET_DURATION__");

    boolean setMapRHomeDir = ElementParameterParser.getBooleanValue(node, "__SET_MAPR_HOME_DIR__");
    String mapRHomeDir = ElementParameterParser.getValue(node, "__MAPR_HOME_DIR__");

    boolean setMapRHadoopLogin = ElementParameterParser.getBooleanValue(node, "__SET_HADOOP_LOGIN__");
    String mapRHadoopLogin = ElementParameterParser.getValue(node, "__HADOOP_LOGIN__");
    

	
	org.talend.hadoop.distribution.component.HBaseComponent hbaseDistrib = null;
	try {
		hbaseDistrib = (org.talend.hadoop.distribution.component.HBaseComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(distribution, hbaseVersion);
	} catch (java.lang.Exception e) {
		e.printStackTrace();
		return "";
	}

    boolean isCustom = hbaseDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;

	log4jFileUtil.componentStartInfo(node);
	// BEGIN IF01
	if(configureFromClassPath){
%>
		// Add HADOOP_CONF_DIR to the classpath if it's present
		String hadoopConfDir_<%=cid%> = System.getenv("HADOOP_CONF_DIR");
		if(hadoopConfDir_<%=cid%> != null){
			java.net.URLClassLoader sysloader = (java.net.URLClassLoader) ClassLoader.getSystemClassLoader();
			java.lang.reflect.Method method = java.net.URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { java.net.URL.class });
			method.setAccessible(true);
			method.invoke(sysloader,new Object[] { new java.io.File(hadoopConfDir_<%=cid%>).toURI().toURL() });
		}
		org.apache.hadoop.conf.Configuration config<%=cid%> = org.apache.hadoop.hbase.HBaseConfiguration.create();

		// Adding any talend-site.xml files on the classpath
		config<%=cid%>.addResource("talend-site.xml");
		String tldKerberosAuth_<%=cid%> = config<%=cid%>.get("talend.kerberos.authentication", "");
		String tldKerberosKtPrincipal_<%=cid%> = config<%=cid%>.get("talend.kerberos.keytab.principal", "");
		String tldKerberosKtPath_<%=cid%> = config<%=cid%>.get("talend.kerberos.keytab.path", "");

<%
		// log all loaded xxx-site.xml files and all of the key value pairs for debugging
		if(isLog4jEnabled){
		%>
			log.debug("CLASSPATH_CONFIGURATION_<%=cid%>" + " Loaded : " + config<%=cid%>);
			log.debug("CLASSPATH_CONFIGURATION_<%=cid%>" + " key value pairs : ");
			java.util.Iterator<java.util.Map.Entry<String,String>> iterator_log_<%=cid%> = config<%=cid%>.iterator();
			while(iterator_log_<%=cid%>.hasNext()){
				java.util.Map.Entry<String,String> property = iterator_log_<%=cid%>.next();
				log.debug("CLASSPATH_CONFIGURATION_<%=cid%> " + property.getKey() + " : " + property.getValue());
			}
		<%
		}
%>
		if(org.apache.hadoop.security.UserGroupInformation.isSecurityEnabled()){
			// Keytab configurations
			if(tldKerberosAuth_<%=cid%>.equalsIgnoreCase("keytab")){
				org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(tldKerberosKtPrincipal_<%=cid%>, tldKerberosKtPath_<%=cid%>);
			}
		}
<%
	}
	// END IF01
	else{
%>
		org.apache.hadoop.conf.Configuration config<%=cid%> = org.apache.hadoop.hbase.HBaseConfiguration.create();
		config<%=cid%>.clear();
		config<%=cid%>.set("hbase.zookeeper.quorum", <%=zookeeper_quorum%>); 
		config<%=cid%>.set("hbase.zookeeper.property.clientPort",<%=zookeeper_client_port%>); 
		config<%=cid%>.set("hbase.cluster.distributed","true"); 
<%
		if(setZNodeParent) {
%>
			config<%=cid%>.set("zookeeper.znode.parent",<%=zNodeParent%>); 
<%
		}

		if(hbaseDistrib.doSupportKerberos() && useKrb){
            if ((isCustom || hbaseDistrib.doSupportMapRTicket()) && useMapRTicket) {
                %>
                System.setProperty("pname", "MapRLogin");
                System.setProperty("https.protocols", "TLSv1.2");
                System.setProperty("mapr.home.dir", <%=setMapRHomeDir ? mapRHomeDir : "\"/opt/mapr\"" %>);
                System.setProperty("hadoop.login", <%=setMapRHadoopLogin ? mapRHadoopLogin : "\"kerberos\""%>);
                <%
            }
%>
			config<%=cid%>.set("hbase.master.kerberos.principal",<%=hbaseMasterPrincipal%>);
			config<%=cid%>.set("hbase.regionserver.kerberos.principal",<%=hbaseRegionServerPrincipal%>);
			config<%=cid%>.set("hbase.security.authorization","true");
			config<%=cid%>.set("hbase.security.authentication","kerberos");

<%
			if(useKeytab){
%>
				org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(<%=userPrincipal%>, <%=keytabPath%>);
<%
			}
            if ((isCustom || hbaseDistrib.doSupportMapRTicket()) && useMapRTicket) {
                %>
                com.mapr.login.client.MapRLoginHttpsClient maprLogin_<%=cid%> = new com.mapr.login.client.MapRLoginHttpsClient();
                maprLogin_<%=cid%>.getMapRCredentialsViaKerberos(<%=mapRTicketCluster%>, <%=mapRTicketDuration%>);
                <%
            }
		} else {
		    // MapR ticket
		    if ((isCustom || hbaseDistrib.doSupportMapRTicket()) && useMapRTicket) {
                String passwordFieldName = "__MAPRTICKET_PASSWORD__";
                %>
                System.setProperty("pname", "MapRLogin");
                System.setProperty("https.protocols", "TLSv1.2");
                System.setProperty("mapr.home.dir", <%=setMapRHomeDir ? mapRHomeDir : "\"/opt/mapr\"" %>);
                com.mapr.login.client.MapRLoginHttpsClient maprLogin_<%=cid%> = new com.mapr.login.client.MapRLoginHttpsClient();
                <%
                if (setMapRHadoopLogin) {
                    %>
                    System.setProperty("hadoop.login", <%=mapRHadoopLogin%>);
                    <%
                } else {
                    %>
                    maprLogin_<%=cid%>.setCheckUGI(false);
                    <%
                }
                %>
                <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

                <%
                if(hbaseDistrib.doSupportMaprTicketV52API()){
                	%>
                	maprLogin_<%=cid%>.getMapRCredentialsViaPassword(<%=mapRTicketCluster%>, <%=username%>, decryptedPassword_<%=cid%>, <%=mapRTicketDuration%>, "");
                	<%
                } else {
                	%>

                	maprLogin_<%=cid%>.getMapRCredentialsViaPassword(<%=mapRTicketCluster%>, <%=username%>, decryptedPassword_<%=cid%>, <%=mapRTicketDuration%>);
                	<%
                }
            }
		}
	}

	List<Map<String, String>> properties =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__HBASE_PARAMETERS__");
   for(int i=0;i<properties.size();i++){
   		Map<String, String> map = properties.get(i);
   		String property = map.get("PROPERTY");
   		String value= map.get("VALUE");
%>
		config<%=cid%>.set(<%=property%>,<%=value%>);
<%
   }
%>
	globalMap.put("conn_<%=cid%>",config<%=cid%>);