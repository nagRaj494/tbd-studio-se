<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		java.util.List
    	java.util.Map
    	java.util.HashMap
    	java.util.regex.Matcher
		java.util.regex.Pattern
		"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	List<IConnection> inputConnections = (List<IConnection>)node.getIncomingConnections();
	List<IConnection> outputConnections = (List<IConnection>)node.getOutgoingConnections();
	if((inputConnections==null) || (inputConnections.size()==0) || (outputConnections == null) || (outputConnections.size()==0)) {
		return "";
	}
	
	String previous_node="";
	String start_node="";
	
	boolean inMain = true;

	String previousOutputConnectionName = null;
	
	IConnection mainConnnection = inputConnections.get(0);
	previous_node = mainConnnection.getSource().getUniqueName();
	INode loadNode = node.getDesignSubjobStartNode();
	start_node = loadNode.getUniqueName();
	
	boolean isLocal = "true".equals(ElementParameterParser.getValue(loadNode, "__LOCAL__"));
	boolean isExecutedThroughWebHCat = false;
    
    if(!isLocal) {
        String loadDistribution = ElementParameterParser.getValue(loadNode, "__DISTRIBUTION__");
        String loadPigVersion = ElementParameterParser.getValue(loadNode, "__PIG_VERSION__");
        org.talend.hadoop.distribution.component.PigComponent pigDistrib = null;
        try {
            pigDistrib = (org.talend.hadoop.distribution.component.PigComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(loadDistribution, loadPigVersion);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
            return "";
        }

        boolean isCustom = pigDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;
        isExecutedThroughWebHCat = !isCustom && pigDistrib != null && pigDistrib.isExecutedThroughWebHCat();
    }
	
	inMain = loadNode.isSubtreeStart();
	previousOutputConnectionName = mainConnnection.getName();
	
	String outputConnectionName = outputConnections.get(0).getName();
	
	List<Map<String, String>> groupByTable = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUP_BY__");
	List<Map<String, String>> outputMapping = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OUTPUT_MAPPING__");
	
	if((outputMapping == null) || (outputMapping.size() == 0)) {
		return "";
	}
%>

	<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/PigHeader.javajet"%>	
	routines.system.PigHelper helper_<%=cid%> = new routines.system.PigHelper();
	
<%
	for(int i=0;i<inputConnections.size();i++) {
		IConnection inputConnection = inputConnections.get(i);
		String inputConnectionName = inputConnection.getName();
		boolean isMainInput = (i == 0);
		if(isMainInput) {
%>
			StringBuilder sb_<%=cid%> = new StringBuilder();
			//the bag name of main input bag
			helper_<%=cid%>.add("query","<%=cid%>_<%=inputConnectionName%>_RESULT = FOREACH <%=previous_node%>_<%=inputConnectionName%>_RESULT GENERATE *;");
<%
		} else {
%>
			//get the scripts in the lookup process
			java.util.List<String[]> ps_<%=inputConnectionName%> = (java.util.List<String[]>)globalMap.get("<%=inputConnectionName%>");
			
			for(int i_<%=inputConnectionName%>=0; i_<%=inputConnectionName%><ps_<%=inputConnectionName%>.size(); i_<%=inputConnectionName%>++) {
				String[] o_<%=inputConnectionName%> = ps_<%=inputConnectionName%>.get(i_<%=inputConnectionName%>);
				if(o_<%=inputConnectionName%>.length > 2 && o_<%=inputConnectionName%>[2] != null) {
					helper_<%=cid%>.add(o_<%=inputConnectionName%>[0],o_<%=inputConnectionName%>[1],o_<%=inputConnectionName%>[2]);
				} else {
					helper_<%=cid%>.add(o_<%=inputConnectionName%>[0],o_<%=inputConnectionName%>[1]);
				}
				
				if(i_<%=inputConnectionName%> == (ps_<%=inputConnectionName%>.size() - 1)) {//get the bag name of current lookup bag
					String bagName_<%=inputConnectionName%> = o_<%=inputConnectionName%>[1];
					bagName_<%=inputConnectionName%> = bagName_<%=inputConnectionName%>.substring(0,bagName_<%=inputConnectionName%>.indexOf("_RESULT")+7);
					helper_<%=cid%>.add("query","<%=cid%>_<%=inputConnectionName%>_RESULT = FOREACH " + bagName_<%=inputConnectionName%> + " GENERATE *;");
				}
			}
<%
		}
	}
%>
	sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = COGROUP");
<%
	for(int i=0;i<inputConnections.size();i++) {
		IConnection inputConnection = inputConnections.get(i);
		String inputConnectionName = inputConnection.getName();
%>
			sb_<%=cid%>.append(" <%=cid%>_<%=inputConnectionName%>_RESULT ");
<%
		if((groupByTable==null) || (groupByTable.size()==0)) {//COGROUP ALL
%>
			sb_<%=cid%>.append("ALL ");
<%
		} else {
%>
			sb_<%=cid%>.append("BY (");
<%
			for(int j=0;j<groupByTable.size();j++) {
				Map<String,String> groupBy = groupByTable.get(j);
				String expression = groupBy.get(inputConnectionName);
%>
				sb_<%=cid%>.append("<%=expression%>");
<%
				if(j<groupByTable.size()-1) {
%>
					sb_<%=cid%>.append(",");
<%
				}
			}
%>
			sb_<%=cid%>.append(")");
<%
		}
		
		if(i<inputConnections.size()-1) {
%>
			sb_<%=cid%>.append(",");
<%
		}
	}
	
	String optimization = ElementParameterParser.getValue(node, "__GROUP_OPTIMIZATION__");
	
	boolean usePartition = "true".equals(ElementParameterParser.getValue(node, "__USE_PARTITION__"));
	String partitioner = ElementParameterParser.getValue(node, "__CUSTOM_PARTITIONER__");
	
	boolean increaseParallelism = "true".equals(ElementParameterParser.getValue(node, "__USE_INCREASE_PARALLELISM__"));
	String parallelism = ElementParameterParser.getValue(node, "__INCREASE_PARALLELISM__");
	
	boolean useOptimization = false;
	String optimizationModel = "";
	if("NONE".equalsIgnoreCase(optimization)) {
		//do nothing
	} else if("COLLECTED".equalsIgnoreCase(optimization)) {
		optimizationModel = "collected";
		useOptimization = true;
	} else if("MERGE".equalsIgnoreCase(optimization)) {
		optimizationModel = "merge";
		useOptimization = true;
	}
	
	if(useOptimization) {
%>
		sb_<%=cid%>.append(" USING '<%=optimizationModel%>'");
<%
	}
	
	if(usePartition && partitioner!=null && !"".equals(partitioner) && !"\"\"".equals(partitioner)) {
%>
		sb_<%=cid%>.append(" PARTITION BY ").append(<%=partitioner%>);
<%
	}
	
	if(increaseParallelism && parallelism!=null && !"".equals(parallelism) && !"\"\"".equals(parallelism)) {
%>
		sb_<%=cid%>.append(" PARALLEL ").append(<%=parallelism%>);
<%
	}
%>
	sb_<%=cid%>.append(";");
	helper_<%=cid%>.add("query",sb_<%=cid%>.toString());
	sb_<%=cid%>.setLength(0);
	
	sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = FOREACH <%=cid%>_<%=outputConnectionName%>_RESULT GENERATE");
<%
	//case1 : input expression is the same(now only use string equals to compare) with any group expression and no function
	//we convert like that : (id+1) ==> group or group.$0 
	//case2 : other any cases
	//we convert like that : (id+1)(have to come from row1) ==> (row1bagname.id+1) 
	
	//case1
	Map<String,Map<String,String>> groupExpressionConvertMap = new HashMap<String,Map<String,String>>();
	if(groupByTable!=null && groupByTable.size()!=0) {
		for(int i=0;i<inputConnections.size();i++) {
			IConnection inputConnection = inputConnections.get(i);
			String inputConnectionName = inputConnection.getName();
			Map<String,String> currentConnectionGroupExpressionMap = new HashMap<String,String>();
			for(int j=0;j<groupByTable.size();j++) {
				Map<String,String> groupBy = groupByTable.get(j);
				String expression = groupBy.get(inputConnectionName);
				if(groupByTable.size() != 1) {
					currentConnectionGroupExpressionMap.put(expression,"group.$" + j);
				} else {
					currentConnectionGroupExpressionMap.put(expression,"group");
				}
			}
			groupExpressionConvertMap.put(inputConnectionName,currentConnectionGroupExpressionMap);
		}
	}
	
	//case2
	Map<String,Map<String,String>> inputExpressionConvertMap = new HashMap<String,Map<String,String>>();
	StringBuilder sb = new StringBuilder();
	for(int i=0;i<inputConnections.size();i++) {
		IConnection inputConnection = inputConnections.get(i);
		String inputConnectionName = inputConnection.getName();
		IMetadataTable currentMetadata = inputConnection.getMetadataTable();
		List<IMetadataColumn> columns = currentMetadata.getListColumns();
		Map<String,String> currentConnectionInputExpressionMap = new HashMap<String,String>();
		for(IMetadataColumn column : columns) {
			currentConnectionInputExpressionMap.put(column.getLabel(), sb.append(cid).append("_").append(inputConnectionName).append("_RESULT").append(".").append(column.getLabel()).toString());
			sb.setLength(0);
		}
		inputExpressionConvertMap.put(inputConnectionName,currentConnectionInputExpressionMap);
	}
	
	class ExpressionUtil {
		
		private Map<String,Pattern> cache = new HashMap<String,Pattern>();
		
		String convertExpression(Map<String,String> expressionConvertMap, String expression) {// (id+1) ==> (row1bagname.id+1)
			if(expression == null || "".equals(expression.trim())) {
				return "";
			}
			
			for(Map.Entry<String, String> entry : expressionConvertMap.entrySet()) {
				String key = entry.getKey();//like id
				String value = entry.getValue();//like row1.id
				
	            Pattern p = cache.get(key);
	            
	            if(p == null) {
	                p = Pattern.compile(key,Pattern.LITERAL);
	                cache.put(key, p);
	            }
	            
	            Matcher m = p.matcher(expression);
	            
	            StringBuffer sb = new StringBuffer();
	            
	            if (m.find()) {
	                do {
	                    if (m.start() > 0) {
	                        char c = expression.charAt(m.start() - 1);
	                        if (Character.isLetterOrDigit(c) || (c == '_')) {
	                            continue;
	                        }
	                    }
	                    
	                    if (m.end() < expression.length()) {
	                        char c = expression.charAt(m.end());
	                        if (Character.isLetterOrDigit(c) || (c == '_')) {
	                            continue;
	                        }
	                    }
	                    
	                    m.appendReplacement(sb,value);
	                } while (m.find());
	                
	                m.appendTail(sb);
	                expression = sb.toString();
	            }
			}
			
			return expression;
		}
	}
	
	ExpressionUtil expressionUtil = new ExpressionUtil();
	
	for(int i=0;i<outputMapping.size();i++) {
		Map<String,String> item = outputMapping.get(i);
		String outputColumn = item.get("SCHEMA_COLUMN");
		String function = item.get("FUNCTION");
		String sourceConnectionOfInputExpression = item.get("PARENT_ROW");
		String inputExpression = item.get("REFCOL");
		
		String finalExpression = inputExpression;
		Map<String,String> currentConnectionGroupExpressionMap = groupExpressionConvertMap.get(sourceConnectionOfInputExpression);
		if("EMPTY".equals(function) && currentConnectionGroupExpressionMap!=null && currentConnectionGroupExpressionMap.get(inputExpression)!=null) {//case1
			finalExpression = currentConnectionGroupExpressionMap.get(inputExpression);
		} else {//case2
			Map<String,String> currentConnectionInputExpressionMap = inputExpressionConvertMap.get(sourceConnectionOfInputExpression);// id ==> row1bagname.id
			finalExpression = expressionUtil.convertExpression(currentConnectionInputExpressionMap, inputExpression);
		}
		
		if("EMPTY".equals(function)) {
			function = "";
		}
%>
		sb_<%=cid%>.append(" <%=function%>(<%=finalExpression%>) AS <%=outputColumn%> ");
<%
		if(i<outputMapping.size()-1) {
%>
			sb_<%=cid%>.append(",");
<%
		}
	}
%>
	sb_<%=cid%>.append(";");
	helper_<%=cid%>.add("query",sb_<%=cid%>.toString());
	sb_<%=cid%>.setLength(0);	
	
	<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/RegisterPigLatin.javajet"%>
