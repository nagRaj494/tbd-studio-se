<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument		
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.types.Java2STLangTypesHelper   	
		java.util.List
		java.util.Map
		"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String previous_node="";
	String start_node="";

	boolean inMain = true;
	boolean isExecutedThroughWebHCat = false;

	String previousOutputConnectionName = "";
	
	if(node.getIncomingConnections()!=null && node.getIncomingConnections().size()>0) {
		IConnection connection = node.getIncomingConnections().get(0);
		previous_node = connection.getSource().getUniqueName();
		INode loadNode = node.getDesignSubjobStartNode();
		start_node = loadNode.getUniqueName();

		boolean isLocal = "true".equals(ElementParameterParser.getValue(loadNode, "__LOCAL__"));

        if(!isLocal) {
            String loadDistribution = ElementParameterParser.getValue(loadNode, "__DISTRIBUTION__");
            String loadPigVersion = ElementParameterParser.getValue(loadNode, "__PIG_VERSION__");
            org.talend.hadoop.distribution.component.PigComponent pigDistrib = null;
            try {
                pigDistrib = (org.talend.hadoop.distribution.component.PigComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(loadDistribution, loadPigVersion);
            } catch (java.lang.Exception e) {
                e.printStackTrace();
                return "";
            }

            boolean isCustom = pigDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;
            isExecutedThroughWebHCat = !isCustom && pigDistrib != null && pigDistrib.isExecutedThroughWebHCat();
        }

		inMain = loadNode.isSubtreeStart();
		previousOutputConnectionName = connection.getName();
	}
	
	String outputConnectionName = "";
	List<IConnection> outputConnections = (List<IConnection>)node.getOutgoingConnections();
	if(outputConnections!=null && outputConnections.size()>0) {
		outputConnectionName = outputConnections.get(0).getName();
	}
	
	String lookup_filename = ElementParameterParser.getValue(node, "__LOOKUP_FILENAME__");
	String lookup_separator = ElementParameterParser.getValue(node, "__FIELD_SEPARATOR_CHAR_LOOKUP__");
	
	List<Map<String, String>> joinKeyColumns = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__JOIN_KEY__");
	String joinMode = ElementParameterParser.getValue(node, "__JOIN_MODE__");
	
	boolean optimize = "true".equals(ElementParameterParser.getValue(node, "__OPTIMIZE__"));
	String using = ElementParameterParser.getValue(node, "__USING__");
	
	boolean usePartition = "true".equals(ElementParameterParser.getValue(node, "__USE_PARTITION__"));
	String partition = ElementParameterParser.getValue(node, "__PARTITION__");
	
	boolean useParallel = "true".equals(ElementParameterParser.getValue(node, "__INCREASE_PARALLELISM__"));
	String reduce_number = ElementParameterParser.getValue(node, "__REDUCE_NUMBER__");
	
%>
		<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/PigHeader.javajet"%>	
	
		routines.system.PigHelper helper_<%=cid%> = new routines.system.PigHelper();
		
		StringBuilder sb_<%=cid%> = new StringBuilder();		
		
		sb_<%=cid%> = new StringBuilder();
		
		sb_<%=cid%>.append("<%=cid%>_LOOKUP = load '"+<%=lookup_filename%>+"' using PigStorage('"+<%=lookup_separator%>+"')");
		String schema_<%=cid%>="";
<%
		List<IMetadataTable> metadatas = node.getMetadataList();
		IMetadataTable metadata = null;
		if(metadatas != null && metadatas.size() > 2) {
		    metadata = metadatas.get(2);
		}
		if(metadata!=null) {
			if(metadata.getListColumns() != null && metadata.getListColumns().size() > 0) {
%>
				sb_<%=cid%>.append(" AS (");
<%
				for(int i=0; i<metadata.getListColumns().size(); i++) {
%>
					sb_<%=cid%>.append("<%=i!=0?", ":""%><%=metadata.getListColumns().get(i).getLabel()%>:<%=Java2STLangTypesHelper.getPigType(metadata, metadata.getListColumns().get(i).getLabel())%>");
<%

				}
%>
				sb_<%=cid%>.append(")");
<%
			}
		}
%>
		sb_<%=cid%>.append(";");		
		
		helper_<%=cid%>.add("query",sb_<%=cid%>.toString());
		
		sb_<%=cid%> = new StringBuilder();
		sb_<%=cid%>.append("<%=cid%>_JOIN_RESULT = JOIN <%=previous_node%>_<%=previousOutputConnectionName%>_RESULT BY (");
<%
		for(int i=0;i<joinKeyColumns.size();i++){
			Map<String, String> line = joinKeyColumns.get(i);
%>
			sb_<%=cid%>.append("<%=line.get("INPUT_COLUMN")%>");
<%
			if(i!=joinKeyColumns.size()-1){
%>
			sb_<%=cid%>.append(",");
<%
			}
		}
%>
		sb_<%=cid%>.append(")");
<%
		if("left-outer-join".equals(joinMode)) {
%>
			sb_<%=cid%>.append(" LEFT");
<%
		}
		if("right-outer-join".equals(joinMode)) {
%>
			sb_<%=cid%>.append(" RIGHT");
<%
		}
		if("full-outer-join".equals(joinMode)) {
%>
			sb_<%=cid%>.append(" FULL");
<%
		}
%>
		sb_<%=cid%>.append(", <%=cid%>_LOOKUP BY (");
<%
		for(int i=0;i<joinKeyColumns.size();i++){
			Map<String, String> line = joinKeyColumns.get(i);
%>
			sb_<%=cid%>.append("<%=line.get("LOOKUP_COLUMN")%>");
<%
			if(i!=joinKeyColumns.size()-1){
%>
			sb_<%=cid%>.append(",");
<%
			}
		}
		
%>
		sb_<%=cid%>.append(")");
<%
		if(optimize) {
%>
			sb_<%=cid%>.append(" USING '<%=using%>'");
<%
		}
		
		if(usePartition && !("skewed".equals(using))) {
%>
			sb_<%=cid%>.append(" PARTITION BY "+<%=partition%>);
<%
		}
		
		if(useParallel) {
%>
			sb_<%=cid%>.append(" PARALLEL <%=reduce_number%>");
<%
		}
		
%>		
		sb_<%=cid%>.append(";");
		
		helper_<%=cid%>.add("query",sb_<%=cid%>.toString());

		sb_<%=cid%> = new StringBuilder();
		sb_<%=cid%>.append("<%=cid%>_<%=outputConnectionName%>_RESULT = FOREACH <%=cid%>_JOIN_RESULT GENERATE ");

<%
		if(metadatas != null && metadatas.size() > 0) {
		    metadata = metadatas.get(0);
		}
		if(metadata!=null) {
			if(metadata.getListColumns() != null && metadata.getListColumns().size() > 0) {
				for(int i=0; i<metadata.getListColumns().size(); i++) {
%>
					sb_<%=cid%>.append("<%=i!=0?", ":""%>$<%=i%> AS <%=metadata.getListColumns().get(i).getLabel()%>");
<%

				}
			}
		}
%>
		sb_<%=cid%>.append(";");
			
		helper_<%=cid%>.add("query",sb_<%=cid%>.toString());
		
		<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/RegisterPigLatin.javajet"%>
