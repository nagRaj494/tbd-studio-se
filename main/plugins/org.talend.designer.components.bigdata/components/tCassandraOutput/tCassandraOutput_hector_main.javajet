<%@ jet %>
    <%
    String batchSize = ElementParameterParser.getValue(node,"__BATCH_SIZE__");
	String columnFamilyType = ElementParameterParser.getValue(node,"__COLUMN_FAMILY_TYPE__");
	String superKeyColumn = ElementParameterParser.getValue(node,"__SUPER_KEY_COLUMN__");
    boolean incSuperKey = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__INC_SUPER_KEY__"));
    String keyColumn = ElementParameterParser.getValue(node,"__KEY_COLUMN__");
	String columnFamily = ElementParameterParser.getValue(node,"__COLUMN_FAMILY__");
    boolean incKey = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__INC_KEY__"));
    String actionOnData = ElementParameterParser.getValue(node,"__ACTION_ON_DATA__");
    List<Map<String, String>> listDeleteCols = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__DELETE_COLUMNS__");
    boolean deleteRow = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__DELETE_ROW__"));
    boolean delSuperColumn = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__DELETE_SUPER_COLUMN__"));
    Map<String,String> deleteColumns=new java.util.HashMap<String,String>();
    boolean dieOnError = ("true").equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
    if(listDeleteCols != null) {
    	for(Map<String,String> delColumn:listDeleteCols){
    		deleteColumns.put(delColumn.get("DELETE_COLUMN"),delColumn.get("DELETE_COLUMN"));
    	}
    }
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
	if (node.getIncomingConnections() != null) {
		class TypeMap{
  			Map<String,String> typeMap=new java.util.HashMap<String,String>();
  			
  			public TypeMap(){
				typeMap.put("Boolean","BooleanSerializer");
				typeMap.put("byte[]","BytesArraySerializer");
				typeMap.put("java.util.Date","DateSerializer");
				typeMap.put("Double","DoubleSerializer");
				typeMap.put("Float","FloatSerializer");
				typeMap.put("Integer","IntegerSerializer");
				typeMap.put("Long","LongSerializer");
				typeMap.put("Object","ObjectSerializer");
				typeMap.put("Short","ShortSerializer");
				typeMap.put("String","StringSerializer");
				typeMap.put("Character","CharSerializer");
				typeMap.put("BigDecimal","BigDecimalSerializer");
  			}
  			public String get(String tType, String cType){
  				if("".equals(cType) || "Default".equals(cType)){
  					return typeMap.get(tType);
  				}else if("CounterColumnType".equals(cType)){
  					return "LongSerializer";
  				}else if("IntegerType".equals(cType)){
  					return "BigIntegerSerializer";
  				}else if("AsciiType".equals(cType)){
  					return "AsciiSerializer";
  				}else if("UUIDType".equals(cType)){
  					return "UUIDSerializer";
  				}else if("TimeUUIDType".equals(cType)){
  					return "TimeUUIDSerializer";
  				}else{
  					return typeMap.get(tType) == null ? "ObjectSerializer" : typeMap.get(tType);
  				}
  			}
  		}
 		TypeMap typeMap = new TypeMap();
		for (IConnection incomingConn : node.getIncomingConnections()) {
			String conName = incomingConn.getName();
			if (incomingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				IMetadataTable inputMetadataTable = incomingConn.getMetadataTable();
				IMetadataColumn metaKeyColumn = inputMetadataTable.getColumn(keyColumn);
				String keyColumnType = JavaTypesManager.getTypeToGenerate(metaKeyColumn.getTalendType(), true);
				String keyCType = metaKeyColumn.getType();
				String supKeyColumnType = null;
				String supKeyCType = null;
				if(!"STANDARD".equals(columnFamilyType)){
					IMetadataColumn metaSupKeyColumn = inputMetadataTable.getColumn(superKeyColumn);
					supKeyColumnType = JavaTypesManager.getTypeToGenerate(metaSupKeyColumn.getTalendType(), true);
					supKeyCType = metaSupKeyColumn.getType();
				}
				boolean isKeyColumnJavaPrimitive = false;
				if (metaKeyColumn != null) {
					isKeyColumnJavaPrimitive = JavaTypesManager.isJavaPrimitiveType(metaKeyColumn.getTalendType(), metaKeyColumn.isNullable());
				}
				%>
				try{
					<%
					if (!isKeyColumnJavaPrimitive) {
					%>
						if (<%=conName%>.<%=keyColumn%> != null) {
					<%
					}
					if("SUPER".equals(columnFamilyType)){
					%>
	
						java.util.List<me.prettyprint.hector.api.beans.HColumn<me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer>> innerColumn_<%=cid%>=new 
			    		java.util.ArrayList<me.prettyprint.hector.api.beans.HColumn<me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer>>();
					<%
					}
		    		for (IMetadataColumn column : inputMetadataTable.getListColumns()) {
		    			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
		    			String columnType=JavaTypesManager.getTypeToGenerate(column.getTalendType(),true);
						String cType = column.getType();
		    			boolean isJavaPrimitiveType = JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable());
		    			if("STANDARD".equals(columnFamilyType)){
							if (incKey || !column.getLabel().equals(keyColumn)) {
								if("UPSERT".equals(actionOnData)){
								%>
									<%if (!isJavaPrimitiveType) {%>if(<%=conName%>.<%=column.getLabel()%>!=null) { <%}%>
										mutator_<%=cid%>.addInsertion(
											<%if("BigIntegerSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
												(java.math.BigInteger)<%=conName%>.<%=keyColumn%>
											<%}else if("UUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
												java.util.UUID.fromString(<%=conName%>.<%=keyColumn%>)
											<%}else if("TimeUUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
												new com.eaio.uuid.UUID(<%=conName%>.<%=keyColumn%>)
											<%}else{%>
												<%=conName%>.<%=keyColumn%>
											<%}%>
											
											, <%=columnFamily%>,
											me.prettyprint.hector.api.factory.HFactory.createColumn(
											"<%=column.getOriginalDbColumnName()%>",
											<%if("BigIntegerSerializer".equals(typeMap.get(columnType, cType))){%>
												(java.math.BigInteger)<%=conName%>.<%=column.getLabel()%>
											<%}else if("UUIDSerializer".equals(typeMap.get(columnType, cType))){%>
												java.util.UUID.fromString(<%=conName%>.<%=column.getLabel()%>)
											<%}else if("TimeUUIDSerializer".equals(typeMap.get(columnType, cType))){%>
												new com.eaio.uuid.UUID(<%=conName%>.<%=column.getLabel()%>)
											<%}else{%>
												<%=conName%>.<%=column.getLabel()%>
											<%}%>
											,
											serializer_<%=cid%>,
											me.prettyprint.cassandra.serializers.<%=typeMap.get(columnType, cType)%>.get()
											)
										);
									<%if (!isJavaPrimitiveType) {%>} <%}%>
								<%
								}else{
									if(!deleteRow && listDeleteCols.size()>0 && deleteColumns.get(column.getLabel())!=null){
									%>
										mutator_<%=cid%>.addDeletion(
										
											<%if("BigIntegerSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
												(java.math.BigInteger)<%=conName%>.<%=keyColumn%>
											<%}else if("UUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
												java.util.UUID.fromString(<%=conName%>.<%=keyColumn%>)
											<%}else if("TimeUUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
												new com.eaio.uuid.UUID(<%=conName%>.<%=keyColumn%>)
											<%}else{%>
												<%=conName%>.<%=keyColumn%>
											<%}%>
										
										, <%=columnFamily%>,"<%=column.getOriginalDbColumnName()%>",serializer_<%=cid%>);
									<%
									}
								}
							}
						}else{
							if((incKey && column.getLabel().equals(keyColumn))||(incSuperKey && column.getLabel().equals(superKeyColumn))|| 
								(!column.getLabel().equals(keyColumn)&&!column.getLabel().equals(superKeyColumn)) ){
								if("UPSERT".equals(actionOnData)){
								%>
									<%if (!isJavaPrimitiveType) {%>if(<%=conName%>.<%=column.getLabel()%>!=null){ <%}%>
										me.prettyprint.hector.api.beans.HColumn column_<%=column.getOriginalDbColumnName()%>=
											me.prettyprint.hector.api.factory.HFactory.createColumn(
												"<%=column.getOriginalDbColumnName()%>",
												<%if("BigIntegerSerializer".equals(typeMap.get(columnType, cType))){%>
													(java.math.BigInteger)<%=conName%>.<%=column.getLabel()%>
												<%}else if("UUIDSerializer".equals(typeMap.get(columnType, cType))){%>
													java.util.UUID.fromString(<%=conName%>.<%=column.getLabel()%>)
												<%}else if("TimeUUIDSerializer".equals(typeMap.get(columnType, cType))){%>
													new com.eaio.uuid.UUID(<%=conName%>.<%=column.getLabel()%>)
												<%}else{%>
													<%=conName%>.<%=column.getLabel()%>
												<%}%>
												,
												serializer_<%=cid%>,
												me.prettyprint.cassandra.serializers.<%=typeMap.get(columnType, cType)%>.get()
											);
										innerColumn_<%=cid%>.add( column_<%=column.getOriginalDbColumnName()%>);
									<%if (!isJavaPrimitiveType) {%>} <%}%>
								<%
								}else{
									if(!deleteRow && listDeleteCols.size()>0 && deleteColumns.get(column.getLabel())!=null){
									%>
										mutator_<%=cid%>.addSubDelete(
											<%if("BigIntegerSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
												(java.math.BigInteger)<%=conName%>.<%=keyColumn%>
											<%}else if("UUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
												java.util.UUID.fromString(<%=conName%>.<%=keyColumn%>)
											<%}else if("TimeUUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
												new com.eaio.uuid.UUID(<%=conName%>.<%=keyColumn%>)
											<%}else{%>
												<%=conName%>.<%=keyColumn%>
											<%}%>
											,
											<%=columnFamily%>
											,
											<%if("BigIntegerSerializer".equals(typeMap.get(supKeyColumnType, supKeyCType))){%>
												(java.math.BigInteger)<%=conName%>.<%=superKeyColumn%>
											<%}else if("UUIDSerializer".equals(typeMap.get(supKeyColumnType, supKeyCType))){%>
												java.util.UUID.fromString(<%=conName%>.<%=superKeyColumn%>)
											<%}else if("TimeUUIDSerializer".equals(typeMap.get(supKeyColumnType, supKeyCType))){%>
												new com.eaio.uuid.UUID(<%=conName%>.<%=superKeyColumn%>)
											<%}else{%>
												<%=conName%>.<%=superKeyColumn%>
											<%}%>
											,
											"<%=column.getOriginalDbColumnName()%>",sNameSerializer_<%=cid%>,serializer_<%=cid%>);
									<%
									}
								}
							}
						}
					}
		           	if("SUPER".equals(columnFamilyType) && "UPSERT".equals(actionOnData)){
						IMetadataColumn metaSuperKeyColumn = inputMetadataTable.getColumn(superKeyColumn);
						boolean isSuperKeyColumnJavaPrimitive = false;
						if (metaSuperKeyColumn != null) {
							isSuperKeyColumnJavaPrimitive = JavaTypesManager.isJavaPrimitiveType(metaSuperKeyColumn.getTalendType(), metaSuperKeyColumn.isNullable());
						}
						%>
						<%if (!isSuperKeyColumnJavaPrimitive) {%>if(<%=conName%>.<%=superKeyColumn%>!=null){ <%}%>
							mutator_<%=cid%>.addInsertion(
								<%if("BigIntegerSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
									(java.math.BigInteger)<%=conName%>.<%=keyColumn%>
								<%}else if("UUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
									java.util.UUID.fromString(<%=conName%>.<%=keyColumn%>)
								<%}else if("TimeUUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
									new com.eaio.uuid.UUID(<%=conName%>.<%=keyColumn%>)
								<%}else{%>
									<%=conName%>.<%=keyColumn%>
								<%}%>
								,
								<%=columnFamily%>,
								new me.prettyprint.cassandra.model.HSuperColumnImpl(
									<%if("BigIntegerSerializer".equals(typeMap.get(supKeyColumnType, supKeyCType))){%>
										(java.math.BigInteger)<%=conName%>.<%=superKeyColumn%>
									<%}else if("UUIDSerializer".equals(typeMap.get(supKeyColumnType, supKeyCType))){%>
										java.util.UUID.fromString(<%=conName%>.<%=superKeyColumn%>)
									<%}else if("TimeUUIDSerializer".equals(typeMap.get(supKeyColumnType, supKeyCType))){%>
										new com.eaio.uuid.UUID(<%=conName%>.<%=superKeyColumn%>)
									<%}else{%>
										<%=conName%>.<%=superKeyColumn%>
									<%}%>
									,
									innerColumn_<%=cid%>,
									me.prettyprint.hector.api.factory.HFactory.createClock(),sNameSerializer_<%=cid%>,serializer_<%=cid%>,serializer_<%=cid%>));
						<%if (!isSuperKeyColumnJavaPrimitive) {%>} <%}%>
					<%
					}
					if("DELETE".equals(actionOnData)){
						if(deleteRow || listDeleteCols.size()<1){
							if("STANDARD".equals(columnFamilyType)){
							%>
								mutator_<%=cid%>.addDeletion(
									<%if("BigIntegerSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
										(java.math.BigInteger)<%=conName%>.<%=keyColumn%>
									<%}else if("UUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
										java.util.UUID.fromString(<%=conName%>.<%=keyColumn%>)
									<%}else if("TimeUUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
										new com.eaio.uuid.UUID(<%=conName%>.<%=keyColumn%>)
									<%}else{%>
										<%=conName%>.<%=keyColumn%>
									<%}%>
									, <%=columnFamily%>);
							<%             		
							}else{
								if(deleteRow && !delSuperColumn){
								%>
									mutator_<%=cid%>.addDeletion(
										<%if("BigIntegerSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
											(java.math.BigInteger)<%=conName%>.<%=keyColumn%>
										<%}else if("UUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
											java.util.UUID.fromString(<%=conName%>.<%=keyColumn%>)
										<%}else if("TimeUUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
											new com.eaio.uuid.UUID(<%=conName%>.<%=keyColumn%>)
										<%}else{%>
											<%=conName%>.<%=keyColumn%>
										<%}%>
										, <%=columnFamily%>);
								<%
								}else{
								%>
									mutator_<%=cid%>.addSuperDelete(
										<%if("BigIntegerSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
											(java.math.BigInteger)<%=conName%>.<%=keyColumn%>
										<%}else if("UUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
											java.util.UUID.fromString(<%=conName%>.<%=keyColumn%>)
										<%}else if("TimeUUIDSerializer".equals(typeMap.get(keyColumnType, keyCType))){%>
											new com.eaio.uuid.UUID(<%=conName%>.<%=keyColumn%>)
										<%}else{%>
											<%=conName%>.<%=keyColumn%>
										<%}%>
										, <%=columnFamily%>,
										<%if("BigIntegerSerializer".equals(typeMap.get(supKeyColumnType, supKeyCType))){%>
											(java.math.BigInteger)<%=conName%>.<%=superKeyColumn%>
										<%}else if("UUIDSerializer".equals(typeMap.get(supKeyColumnType, supKeyCType))){%>
											java.util.UUID.fromString(<%=conName%>.<%=superKeyColumn%>)
										<%}else if("TimeUUIDSerializer".equals(typeMap.get(supKeyColumnType, supKeyCType))){%>
											new com.eaio.uuid.UUID(<%=conName%>.<%=superKeyColumn%>)
										<%}else{%>
											<%=conName%>.<%=superKeyColumn%>
										<%}%>
										,sNameSerializer_<%=cid%>);
								<%
								}
							}
						}
		            }
					%>
					<%if (!isKeyColumnJavaPrimitive) {%>
						}
					<%}%>
					nb_line_<%=cid %>++;
					batchCounter_<%=cid%>++;
					<%
					if(isLog4jEnabled){
					%>
						log.debug("<%=cid%> - Adding the record " + (nb_line_<%=cid%>) + " to the batch[size:"+batchCounter_<%=cid%>+"].");
					<%
					}
					%>
					if (batchCounter_<%=cid%> == <%=batchSize%>) {
						<%
						if(isLog4jEnabled){
						%>
							log.info("<%=cid%> - Executing the batch.");
						<%
						}
						%>
						mutator_<%=cid%>.execute();
						batchCounter_<%=cid%> = 0;
						<%
						if(isLog4jEnabled){
						%>
							log.info("<%=cid%> - <%=cid%> - Executed the batch successfully and clear the batch counter.");
						<%
						}
						%>
					}
				}catch(java.lang.Exception e_<%=cid%>){
					<%
					if(dieOnError) {
					%>
				        throw(e_<%=cid%>);
					<%
					}else {
						if(isLog4jEnabled){
						%>
							log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
						<%
						}
						%>
						System.err.println(e_<%=cid%>.getMessage());
					<%
					}
					%>    
				}
			<%
			}
      	}
    }
%>
