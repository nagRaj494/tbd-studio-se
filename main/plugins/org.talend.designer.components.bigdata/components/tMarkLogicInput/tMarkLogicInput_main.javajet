<%@ jet
imports="
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.metadata.IMetadataColumn
        java.util.List
"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    
    boolean inputMode = false;
    IConnection inputConn = null;
	List<? extends IConnection> incomingConns = node.getIncomingConnections();
	if(incomingConns!=null) {
		for(IConnection inputConnection : incomingConns) {
			if(inputConnection!=null && inputConnection.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				inputMode = true;
				inputConn = inputConnection;
			}
		}
	}
	
    List<IMetadataTable> metadataTableList = node.getMetadataList();
    if((metadataTableList == null) || metadataTableList.isEmpty()){
    	return stringBuffer.toString();
    }
    
    IMetadataTable metadata = metadataTableList.get(0);
    if(metadata == null){
    	return stringBuffer.toString();
    }
    
    List<IMetadataColumn> columnList = metadata.getListColumns();
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    
    if(columnList.isEmpty() || (outgoingConns == null || outgoingConns.isEmpty())){
    	return stringBuffer.toString();
    }
    
    IConnection outputConn = outgoingConns.get(0);
    if(!outputConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
    	return stringBuffer.toString();
    }
%>

	<%
	if(inputMode) {
		String asDocIdColumn = ElementParameterParser.getValue(node,"__AS_DOCID_COLUMN__");
	%>
		String docId_<%= cid %> = <%= inputConn.getName() %>.<%= asDocIdColumn %>;
		nb_line_<%=cid%>++;
	<%
	} else {
	%>
    for(com.marklogic.client.query.MatchDocumentSummary matchDocSummary: matchDocSummary_<%= cid %>){//TagF1 }
       String docId_<%= cid %> = matchDocSummary.getUri();
    <%}%>
	
	<%= outputConn.getName() %>.docId = docId_<%= cid %>;
	
    <%
    if(columnList.size() < 2){
    	return stringBuffer.toString();
    }
    
    IMetadataColumn column = columnList.get(1);//treat the second column as docContent
    String columnName = column.getLabel();
    String javaTypeId = column.getTalendType();
    String returnIOClazz = null;
    if("id_String".equalsIgnoreCase(javaTypeId)){
      returnIOClazz = "java.lang.String";
    }else if("id_Document".equalsIgnoreCase(javaTypeId)){
      returnIOClazz = "java.io.File";
    }else if("id_Object".equalsIgnoreCase(javaTypeId)){
      returnIOClazz = "java.io.InputStream";
    }else if("id_byte[]".equalsIgnoreCase(javaTypeId)){
      // Do Nothing
    }else{
    %>
       Compile Err: can not return <%= javaTypeId %>, try to set the type to String Document Object byte[].
    <%
    }
    if("id_Document".equalsIgnoreCase(javaTypeId)){
    %>
       routines.system.Document docment_<%= cid %> = new routines.system.Document();
       docment_<%= cid %>.setDocument(
                                     new org.dom4j.io.SAXReader().read(
                                                                      (<%= returnIOClazz %>)docMgr_<%= cid %>.readAs(docId_<%= cid %>,
                                                                                                                    <%= (returnIOClazz + ".class") %>
                                                                                                                    )
                                                                      )
                                     );
      <%= outputConn.getName() %>.<%= columnName %> = docment_<%= cid %>;
    <%
    }else if("id_byte[]".equalsIgnoreCase(javaTypeId)){
    %>
        <%= outputConn.getName() %>.<%= columnName %> = ((com.marklogic.client.io.BytesHandle)docMgr_<%= cid %>.read(docId_<%= cid %>, new com.marklogic.client.io.BytesHandle())).get();
    <%
    }else{
    %>
       <%= outputConn.getName() %>.<%= columnName %> = (<%= returnIOClazz %>)docMgr_<%= cid %>.readAs(docId_<%= cid %>,
                                                        <%= (returnIOClazz + ".class") %>
                                                       );
    <%
  	}
  	%>