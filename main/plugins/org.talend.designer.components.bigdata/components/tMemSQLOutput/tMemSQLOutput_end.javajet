<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    java.util.List
"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
          dbLog = new DBLogUtil(node);
	String cid = node.getUniqueName();

	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

	boolean useExistingConn = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));

    boolean useBatchSize = "true".equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));

    String batchSize=ElementParameterParser.getValue(node,"__BATCH_SIZE__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

    if(("INSERT_OR_UPDATE").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();

        }
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();

        }
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();

        }
        <%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();

        }
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();

        }
        <%
    } else {
        %>

        <%if (useBatchSize && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction))) {
            %>
                    if(batchSizeCounter_<%=cid%> > 0){
                        long countSum_<%=cid%> = 0;
                        int[] resultStatus = {};
                        try {
                            if (pstmt_<%=cid %> != null) {
                                    <%dbLog.batch().executeTry(dbLog.str(dataAction));%>
                               resultStatus = pstmt_<%=cid %>.executeBatch();
                                    <%dbLog.batch().executeDone(dbLog.str(dataAction));%>
                            }
                        }catch (java.sql.BatchUpdateException e_<%=cid%>){
                            <%if(("true").equals(dieOnError)) {
                            %>
                                throw(e_<%=cid%>);
                            <%
                            }else {
                            %>
                            System.out.println(e_<%=cid%>.getMessage());
                            for(int countEach_<%=cid%>: e_<%=cid%>.getUpdateCounts()) {
                                    countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                                }
                            <%
                            }%>
                        }

                        if (pstmt_<%=cid %> != null) {
                        
                            long tmp_batchUpdateCount_<%=cid%> = 0;
                            for(int i : resultStatus){
                                  if(i==-3){//EXECUTE_FAILED
                                           <%dbLog.logPrintedException(dbLog.str("Query failed to execute."));%>
                                        System.err.println("Query failed to execute.");
                                  }else if(i==-2){//SUCCESS_NO_INFO
                                           <%dbLog.logPrintedException(dbLog.str("Query was processed successfully but that the number of rows affected is unknown."));%>
                                        System.err.println("Query was processed successfully but that the number of rows affected is unknown.");
                                  }else{
                                       tmp_batchUpdateCount_<%=cid%> += (i<0 ? 0 : i);
                                  }
                            }
                            tmp_batchUpdateCount_<%=cid%> += countSum_<%=cid%>;
                            
                            <%if (("INSERT").equals(dataAction)) {
                            %>
                                insertedCount_<%=cid%>
                            <%
                            }else if (("UPDATE").equals(dataAction)) {
                            %>
                                updatedCount_<%=cid%>
                            <%
                            }else if (("DELETE").equals(dataAction)) {
                            %>
                                deletedCount_<%=cid%>
                            <%
                            }%>
                            += tmp_batchUpdateCount_<%=cid%>;
                        }
                    }
            <%
            }%>

        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();

        }
        <%
    }
    %>

    <%
    if(!useExistingConn) {
        %>
        if(conn_<%=cid%> != null && !conn_<%=cid%>.isClosed()) {
                <%dbLog.conn().closeTry(null);%>
            conn_<%=cid%> .close();
                <%dbLog.conn().closeDone(null);%>
            resourceMap.put("finish_<%=cid%>", true);
        }
        <%
    }
    %>

<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
