public class CLASS {

    private Map<String,Pattern> cache = new HashMap<String,Pattern>();
    
	public String convertExpression(Map<String,String> expressionConvertMap, String expression) {

		if(expression == null || "".equals(expression.trim())) {
			return "";
		}
		
		for(Map.Entry<String, String> entry : expressionConvertMap.entrySet()) {
			String key = entry.getKey();//like row1.column
			String value = entry.getValue();//like $0
			
            Pattern p = cache.get(key);
            
            if(p == null) {
                int index = key.indexOf(".");
                String tableName = key.substring(0, index);
                String columnName = key.substring(index + 1);
                
                StringBuffer pattern = new StringBuffer();
                pattern.append(tableName).append("\\s*\\.\\s*").append(columnName);
                p = Pattern.compile(pattern.toString());
                cache.put(key, p);
            }
            
            Matcher m = p.matcher(expression);

            StringBuffer sb = new StringBuffer();

            if (m.find()) {
                do {
                    if (m.start() > 0) {
                        char c = expression.charAt(m.start() - 1);
                        if (Character.isLetterOrDigit(c) || (c == '_')) {
                            continue;
                        }
                    }
                    
                    if (m.end() < expression.length()) {
                        char c = expression.charAt(m.end());
                        if (Character.isLetterOrDigit(c) || (c == '_')) {
                            continue;
                        }
                    }

                    m.appendReplacement(sb,value);
                } while (m.find());

                m.appendTail(sb);
                expression = sb.toString();
            }
			
		}
		
		return expression;
	
	}
	
   public static String getPigType(String talendType) {
        String typeToGenerate = JavaTypesManager.getTypeToGenerate(talendType, false);
        // Integers: int(Integer), long(Long), short(Short), byte(Byte), BigDecimal, double(Double).
        if (typeToGenerate.equals("int") || typeToGenerate.equals("short") || typeToGenerate.equals("byte")) { 
            return "int"; 
        } else if (typeToGenerate.equals("long")) { 
            return "long"; 
        } else if (typeToGenerate.equals("BigDecimal") || typeToGenerate.equals("double")) { 
            return "double";
        }
    
        // Floats: float(Float)
        if (typeToGenerate.equals("float")) { 
            return "float";
        }
    
        // others treat as string
        return "chararray"; 

   }

    public String generate(Object argument) {

    }    
}