<%@ jet 
	imports="
	java.util.ArrayList
	java.util.Collections
	java.util.Comparator
	java.util.List
	java.util.HashMap
	java.util.Map
	java.util.regex.Matcher
	java.util.regex.Pattern
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.IConnection
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.pigmap.PigMapComponent
    org.talend.designer.pigmap.model.emf.pigmap.PigMapData
    org.talend.designer.pigmap.model.emf.pigmap.InputTable
    org.talend.designer.pigmap.model.emf.pigmap.OutputTable
    org.talend.designer.pigmap.model.emf.pigmap.TableNode
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.utils.NodeUtil
	" 
	skeleton="tPigMap_commons.skeleton"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	PigMapComponent node = (PigMapComponent) codeGenArgument.getArgument();
	PigMapData data = (PigMapData)ElementParameterParser.getObjectValueXMLTree(node);
	
	String cid = node.getUniqueName();
	
	List<InputTable> inputTablesWithUnvalid = data.getInputTables();
	List<OutputTable> outputTablesWithUnvalid = data.getOutputTables();
	
	List<IConnection> inputConnections = (List<IConnection>)node.getIncomingConnections();
	
	HashMap<String, IConnection> hNameToConnection = new HashMap<String, IConnection>();
	for(IConnection connection : inputConnections){
		hNameToConnection.put(connection.getName(), connection);
	}
	
	List<InputTable> inputTables = new ArrayList<InputTable>();
	for(int i=0; i<inputTablesWithUnvalid.size(); i++){
		InputTable  currentTable = inputTablesWithUnvalid.get(i);
		if(hNameToConnection.get(currentTable.getName()) != null){
			inputTables.add(currentTable);
		}
	}
	
	String previous_node="";
	String start_node="";

	boolean inMain = true;
	boolean isExecutedThroughWebHCat = false;

	Map<String,String> expressionConvertMap = new HashMap<String,String>();//like that : row1.id ==> $0
	int index = 0;
	
	//check whether reject or inner reject exist in output tables
	List<IConnection> outputConnections = (List<IConnection>)node.getOutgoingConnections();
	
	HashMap<String, IConnection> hNameToOutConnection = new HashMap<String, IConnection>();
	for(IConnection connection : outputConnections){
		hNameToOutConnection.put(connection.getName(), connection);
	}
	
	List<OutputTable> outputTables = new ArrayList<OutputTable>();
	for(int i=0; i<outputTablesWithUnvalid.size(); i++){
		OutputTable currentTable = outputTablesWithUnvalid.get(i);
		if(hNameToOutConnection.get(currentTable.getName()) != null){
			outputTables.add(currentTable);
		}
	}
	
	boolean innerReject = false;
	for(OutputTable outputTable : outputTables) {
		if(outputTable.isRejectInnerJoin()) {
			innerReject = true;
		}
	}
%>
	<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/PigHeader.javajet"%>	
	
	routines.system.PigHelper helper_<%=cid%> = new routines.system.PigHelper();
<%
	boolean existInnerJoin = false;
	int lstSizeInputs = inputTables.size();
	//prepare the flat data
	for (int i = 0; i < lstSizeInputs; i++) {
	    InputTable inputTable = inputTables.get(i);
	    String tableName = inputTable.getName();
	    
	    List<TableNode> tableNodes = inputTable.getNodes();
	    
	    if((tableNodes == null) || (tableNodes.size()) == 0) {
	    	continue;
	    }
	    
	    for(TableNode tnode : tableNodes) {
	    	String nodeName = tnode.getName();
	    	expressionConvertMap.put(tableName+"."+nodeName,"\\$"+(index++));
	    }
	    
	    String model = inputTable.getJoinModel();
	    if("Inner Join".equals(model)) {
	    	existInnerJoin = true;
	    }
	    
	    if(i == 0) {//main table
	    	IConnection connection = hNameToConnection.get(tableName);
	  		previous_node = connection.getSource().getUniqueName();
	  		INode loadNode = node.getDesignSubjobStartNode();
			start_node = loadNode.getUniqueName();
			
			boolean isLocal = "true".equals(ElementParameterParser.getValue(loadNode, "__LOCAL__"));

			if(!isLocal) {
                String loadDistribution = ElementParameterParser.getValue(loadNode, "__DISTRIBUTION__");
                String loadPigVersion = ElementParameterParser.getValue(loadNode, "__PIG_VERSION__");
                org.talend.hadoop.distribution.component.PigComponent pigDistrib = null;
    			try {
    				pigDistrib = (org.talend.hadoop.distribution.component.PigComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(loadDistribution, loadPigVersion);
    			} catch (java.lang.Exception e) {
    				e.printStackTrace();
    				return "";
    			}
    
    			boolean isCustom = pigDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;
    			isExecutedThroughWebHCat = !isCustom && pigDistrib != null && pigDistrib.isExecutedThroughWebHCat();
			}

			inMain = loadNode.isSubtreeStart();
%>
			StringBuilder sb_<%=cid%> = new StringBuilder();
			//the bag name of main input bag
			helper_<%=cid%>.add("query","<%=cid%>_<%=tableName%>_RESULT = FOREACH <%=previous_node%>_<%=tableName%>_RESULT GENERATE *;");
			helper_<%=cid%>.add("query","<%=cid%>_RESULT = FOREACH <%=cid%>_<%=tableName%>_RESULT GENERATE *;");
			
			StringBuilder sb_innerJoinReject_<%=cid%> = new StringBuilder();
<%
	    } else {//lookup table
%>
		//get the scripts in the lookup process
		java.util.List<String[]> ps_<%=tableName%> = (java.util.List<String[]>)globalMap.get("<%=tableName%>");
		
		for(int i_<%=tableName%>=0; i_<%=tableName%><ps_<%=tableName%>.size(); i_<%=tableName%>++) {
			String[] o_<%=tableName%> = ps_<%=tableName%>.get(i_<%=tableName%>);
			if(o_<%=tableName%>.length > 2 && o_<%=tableName%>[2]!=null) {
				helper_<%=cid%>.add(o_<%=tableName%>[0],o_<%=tableName%>[1],o_<%=tableName%>[2]);
			} else {
				helper_<%=cid%>.add(o_<%=tableName%>[0],o_<%=tableName%>[1]);
			}
			
			if(i_<%=tableName%> == (ps_<%=tableName%>.size() - 1)) {//get the bag name of current lookup bag
				String bagName_<%=tableName%> = o_<%=tableName%>[1];
				bagName_<%=tableName%> = bagName_<%=tableName%>.substring(0,bagName_<%=tableName%>.indexOf("_RESULT")+7);
				helper_<%=cid%>.add("query","<%=cid%>_<%=tableName%>_RESULT = FOREACH " + bagName_<%=tableName%> + " GENERATE *;");
			}
		}
<%
		}
	}
	
	//the join action
	boolean isFirstInnerReject = true;
	
	List<String> currentInnerRejectSchemaTypes = new ArrayList<String>();
	List<String> previousInnerRejectSchemaTypes = new ArrayList<String>();
	
	for (int i = 0; i < lstSizeInputs; i++) {
	    InputTable inputTable = inputTables.get(i);
	    String tableName = inputTable.getName();
	    
	    List<TableNode> tableNodes = inputTable.getNodes();
	    
	    if((tableNodes == null) || (tableNodes.size()) == 0) {
	    	continue;
	    }
	    
	    boolean isMainTable = (i == 0);
	    
	    boolean isInnerJoin = false;
	 	if (isMainTable) {//main
	 		
	 	} else {//lookup
	 		String model = inputTable.getJoinModel();
	 		String optimization = inputTable.getJoinOptimization();
	 		String partitioner = inputTable.getCustomPartitioner();
	 		String parallelism = inputTable.getIncreaseParallelism();
	 		
	 		String joinModel = "";
	 		if("Inner Join".equals(model)) {
	 			isInnerJoin = true;
	 		} else if("Left Outer Join".equals(model)) {
	 			joinModel = "LEFT";
	 		} else if("Right Outer Join".equals(model)) {
	 			joinModel = "RIGHT";
	 		} else if("Full Outer Join".equals(model)) {
	 			joinModel = "FULL";
	 		}
	 		
	 		boolean useOptimization = false;
	 		String optimizationModel = "";
	 		if("None".equalsIgnoreCase(optimization)) {
	 			//do nothing
	 		} else if("Replicated".equalsIgnoreCase(optimization)) {
	 			optimizationModel = "replicated";
	 			useOptimization = true;
	 		} else if("Skewed".equalsIgnoreCase(optimization)) {
	 			optimizationModel = "skewed";
	 			useOptimization = true;
	 		} else if("Merge".equalsIgnoreCase(optimization)) {
	 			optimizationModel = "merge";
	 			useOptimization = true;
	 		}
	 		
 			List<String> innerRejectLocationExpressions = new ArrayList<String>();
 			
%>
			sb_<%=cid%>.append("<%=cid%>_RESULT = JOIN <%=cid%>_RESULT BY (");
<%
			if(existInnerJoin && innerReject && isInnerJoin) {
%>
			helper_<%=cid%>.add("query","<%=cid%>_<%=tableName%>_INNER_REJECT_RESULT = FOREACH <%=cid%>_RESULT GENERATE *;");
			sb_innerJoinReject_<%=cid%>.append("<%=cid%>_<%=tableName%>_INNER_REJECT_RESULT = JOIN <%=cid%>_<%=tableName%>_INNER_REJECT_RESULT BY (");
<%
			}
			
			List<String> expressions = new ArrayList<String>();
			List<String> names = new ArrayList<String>();
	 		for(TableNode tnode : tableNodes) {
	 			String name = tnode.getName();
	 			String expression = tnode.getExpression();
	 			if(expression!=null && !"".equals(expression.trim())) {
					expressions.add(expression);
					names.add(name);
	 			}
	 		}
	 		
	 		for(int j=0;j<expressions.size();j++) {
	 			String expression = expressions.get(j);
	 			expression = convertExpression(expressionConvertMap,expression);
	 			String expressionStr = NodeUtil.replaceCRLFInMEMO_SQL("\""+expression+"\"");
%>
				sb_<%=cid%>.append(<%=expressionStr%>);
<%
				if(existInnerJoin && innerReject && isInnerJoin) {
%>
				sb_innerJoinReject_<%=cid%>.append(<%=expressionStr%>);				
<%
				}
				
				if(j<expressions.size()-1) {
%>
				sb_<%=cid%>.append(",");
<%
					if(existInnerJoin && innerReject && isInnerJoin) {
%>
					sb_innerJoinReject_<%=cid%>.append(",");				
<%
					}
				}
	 		}
%>
			sb_<%=cid%>.append(") <%=joinModel%>, <%=cid%>_<%=tableName%>_RESULT BY (");
<%
			if(existInnerJoin && innerReject && isInnerJoin) {
%>
			sb_innerJoinReject_<%=cid%>.append(") LEFT, <%=cid%>_<%=tableName%>_RESULT BY (");				
<%
			}
			
	 		for(int j=0;j<names.size();j++) {
	 			String name = names.get(j);
%>
				sb_<%=cid%>.append("<%=name%>");
<%
				if(existInnerJoin && innerReject && isInnerJoin) {
    				String innerRejectLocationExpression = convertExpression(expressionConvertMap,tableName + "." + name);
    				innerRejectLocationExpressions.add(innerRejectLocationExpression);
%>
				sb_innerJoinReject_<%=cid%>.append("<%=name%>");				
<%
				}
				
				if(j<names.size()-1) {
%>
				sb_<%=cid%>.append(",");
<%
					if(existInnerJoin && innerReject && isInnerJoin) {
%>
					sb_innerJoinReject_<%=cid%>.append(",");				
<%
					}
				}
	 		}
	 		
%>
			sb_<%=cid%>.append(")");
<%
	 		if(existInnerJoin && innerReject && isInnerJoin) {
%>
			sb_innerJoinReject_<%=cid%>.append(")");				
<%
	 		}
	 		
	 		if(useOptimization) {
%>
			sb_<%=cid%>.append(" USING '<%=optimizationModel%>'");
<%
				if(existInnerJoin && innerReject && isInnerJoin) {
%>
				sb_innerJoinReject_<%=cid%>.append(" USING '<%=optimizationModel%>'");				
<%
				}
	 		}
	 		
	 		if(partitioner!=null && !"".equals(partitioner)) {
%>
			sb_<%=cid%>.append(" PARTITION BY ").append(<%=partitioner%>);
<%
				if(existInnerJoin && innerReject && isInnerJoin) {
%>
				sb_innerJoinReject_<%=cid%>.append(" PARTITION BY ").append(<%=partitioner%>);				
<%
				}
	 		}
	 		
	 		if(parallelism!=null && !"".equals(parallelism)) {
%>
			sb_<%=cid%>.append(" PARALLEL ").append(<%=parallelism%>);
<%
				if(existInnerJoin && innerReject && isInnerJoin) {
%>
				sb_innerJoinReject_<%=cid%>.append(" PARALLEL ").append(<%=parallelism%>);				
<%
				}
	 		}
%>
			sb_<%=cid%>.append(";");
			helper_<%=cid%>.add("query",sb_<%=cid%>.toString());
			sb_<%=cid%>.setLength(0);
<%
			if(existInnerJoin && innerReject && isInnerJoin) {
%>
			sb_innerJoinReject_<%=cid%>.append(";");
			helper_<%=cid%>.add("query",sb_innerJoinReject_<%=cid%>.toString());
			sb_innerJoinReject_<%=cid%>.setLength(0);
			
			sb_innerJoinReject_<%=cid%>.append("<%=cid%>_<%=tableName%>_INNER_REJECT_RESULT = FILTER <%=cid%>_<%=tableName%>_INNER_REJECT_RESULT BY ");
<%
				for(int j=0;j<innerRejectLocationExpressions.size();j++) {
					String locationExpression = innerRejectLocationExpressions.get(j);
%>
					sb_innerJoinReject_<%=cid%>.append("(<%=locationExpression%> is null)");
<%
					if(j<innerRejectLocationExpressions.size()-1) {
%>
					sb_innerJoinReject_<%=cid%>.append(" OR ");
<%
					}
				}
%>
    		sb_innerJoinReject_<%=cid%>.append(";");
    		helper_<%=cid%>.add("query",sb_innerJoinReject_<%=cid%>.toString());
    		sb_innerJoinReject_<%=cid%>.setLength(0);							
<%
			}
	 	}
	 	
	 	
	 	
	 	//filter action : first join,second filter
		boolean hasFilter = inputTable.isActivateExpressionFilter() 
	    	&& inputTable.getExpressionFilter()!=null 
	    	&& !"".equals(inputTable.getExpressionFilter());
	    
	    if(existInnerJoin && innerReject) {
	    
	 		for(TableNode tnode : tableNodes) {
	 			String type = tnode.getType();
            	currentInnerRejectSchemaTypes.add(type);
	 		}
	    }
	    
	    if(hasFilter) {
 			String expression = inputTable.getExpressionFilter();
 			//convert the expression to big expression(replace the java var to pig $n)
 			expression = convertExpression(expressionConvertMap,expression);
 			String expressionStr = NodeUtil.replaceCRLFInMEMO_SQL("\""+expression+"\"");
			if(existInnerJoin && innerReject && isInnerJoin) {
%>
			helper_<%=cid%>.add("query","<%=cid%>_<%=tableName%>_FILTER_INNER_REJECT_RESULT = FOREACH <%=cid%>_RESULT GENERATE *;");
			helper_<%=cid%>.add("query","<%=cid%>_<%=tableName%>_FILTER_INNER_REJECT_RESULT = FILTER <%=cid%>_<%=tableName%>_FILTER_INNER_REJECT_RESULT BY (NOT ("+<%=expressionStr%>+"));");
			//need to set the lookup columns as null
			sb_innerJoinReject_<%=cid%>.append("<%=cid%>_<%=tableName%>_FILTER_INNER_REJECT_RESULT = FOREACH <%=cid%>_<%=tableName%>_FILTER_INNER_REJECT_RESULT GENERATE ");
<%
				for(int j=0;j<currentInnerRejectSchemaTypes.size();j++) {
					if(j<(currentInnerRejectSchemaTypes.size() - tableNodes.size())) {
%>
					sb_innerJoinReject_<%=cid%>.append("$<%=j%>,");
<%
					} else {//the lookup columns
						String type = currentInnerRejectSchemaTypes.get(j);
%>
						sb_innerJoinReject_<%=cid%>.append("null AS column<%=tableName%><%=j%>:<%=getPigType(type)%>");
<%
						if(j < (currentInnerRejectSchemaTypes.size()-1)) {
%>
						sb_innerJoinReject_<%=cid%>.append(",");
<%
						}
					}
				}
%>
        		sb_innerJoinReject_<%=cid%>.append(";");
        		helper_<%=cid%>.add("query",sb_innerJoinReject_<%=cid%>.toString());
        		sb_innerJoinReject_<%=cid%>.setLength(0);
<%
				if(isFirstInnerReject) {
%>
				//init inner reject resultset
				helper_<%=cid%>.add("query","<%=cid%>_INNER_REJECT_RESULT = UNION <%=cid%>_<%=tableName%>_INNER_REJECT_RESULT,<%=cid%>_<%=tableName%>_FILTER_INNER_REJECT_RESULT;");
<%
				} else {
%>
				sb_innerJoinReject_<%=cid%>.append("<%=cid%>_INNER_REJECT_RESULT = FOREACH <%=cid%>_INNER_REJECT_RESULT GENERATE ");
<%
					for(int j=0;j<currentInnerRejectSchemaTypes.size();j++) {
						if(j < previousInnerRejectSchemaTypes.size()) {//the same part
%>
						sb_innerJoinReject_<%=cid%>.append("$<%=j%>,");
<%
						} else {//the new part
							String type = currentInnerRejectSchemaTypes.get(j);
%>
							sb_innerJoinReject_<%=cid%>.append("null AS <%=tableName%><%=j%>:<%=getPigType(type)%>");
<%
							if(j < (currentInnerRejectSchemaTypes.size()-1)) {
%>
							sb_innerJoinReject_<%=cid%>.append(",");
<%
							}
						}
					}
%>
        		sb_innerJoinReject_<%=cid%>.append(";");
        		//syn the schema
        		helper_<%=cid%>.add("query",sb_innerJoinReject_<%=cid%>.toString());
        		sb_innerJoinReject_<%=cid%>.setLength(0);
				//union
				helper_<%=cid%>.add("query","<%=cid%>_INNER_REJECT_RESULT = UNION <%=cid%>_INNER_REJECT_RESULT,<%=cid%>_<%=tableName%>_INNER_REJECT_RESULT,<%=cid%>_<%=tableName%>_FILTER_INNER_REJECT_RESULT;");
<%
				}
				isFirstInnerReject = false;
			}
%>
			helper_<%=cid%>.add("query","<%=cid%>_RESULT = FILTER <%=cid%>_RESULT BY "+<%=expressionStr%>+";");
<%
	 	} else {
	 		if(existInnerJoin && innerReject && isInnerJoin) {
	 			if(isFirstInnerReject) {
%>
				//init inner reject resultset
				helper_<%=cid%>.add("query","<%=cid%>_INNER_REJECT_RESULT = FOREACH <%=cid%>_<%=tableName%>_INNER_REJECT_RESULT GENERATE *;");
<%
				} else {
%>
				sb_innerJoinReject_<%=cid%>.append("<%=cid%>_INNER_REJECT_RESULT = FOREACH <%=cid%>_INNER_REJECT_RESULT GENERATE ");
<%
					for(int j=0;j<currentInnerRejectSchemaTypes.size();j++) {
						if(j < previousInnerRejectSchemaTypes.size()) {//the same part
%>
						sb_innerJoinReject_<%=cid%>.append("$<%=j%>,");
<%
						} else {//the new part
							String type = currentInnerRejectSchemaTypes.get(j);
%>
							sb_innerJoinReject_<%=cid%>.append("null AS <%=tableName%><%=j%>:<%=getPigType(type)%>");
<%
							if(j < (currentInnerRejectSchemaTypes.size()-1)) {
%>
							sb_innerJoinReject_<%=cid%>.append(",");
<%
							}
						}
					}
%>
        		sb_innerJoinReject_<%=cid%>.append(";");
        		//syn the schema
        		helper_<%=cid%>.add("query",sb_innerJoinReject_<%=cid%>.toString());
        		sb_innerJoinReject_<%=cid%>.setLength(0);
				//union
				helper_<%=cid%>.add("query","<%=cid%>_INNER_REJECT_RESULT = UNION <%=cid%>_INNER_REJECT_RESULT,<%=cid%>_<%=tableName%>_INNER_REJECT_RESULT;");
<%
				}
				isFirstInnerReject = false;
			}
	 	}
	 	
	 	if((i == (lstSizeInputs - 1)) && existInnerJoin && innerReject && !isInnerJoin) {//the last input table is not inner join and inner reject exist

%>
		sb_innerJoinReject_<%=cid%>.append("<%=cid%>_INNER_REJECT_RESULT = FOREACH <%=cid%>_INNER_REJECT_RESULT GENERATE ");
<%
			for(int j=0;j<currentInnerRejectSchemaTypes.size();j++) {
				if(j < previousInnerRejectSchemaTypes.size()) {//the same part
%>
				sb_innerJoinReject_<%=cid%>.append("$<%=j%>,");
<%
				} else {//the new part
					String type = currentInnerRejectSchemaTypes.get(j);
%>
					sb_innerJoinReject_<%=cid%>.append("null AS <%=tableName%><%=j%>:<%=getPigType(type)%>");
<%
					if(j < (currentInnerRejectSchemaTypes.size()-1)) {
%>
					sb_innerJoinReject_<%=cid%>.append(",");
<%
					}
				}
			}
%>
    		sb_innerJoinReject_<%=cid%>.append(";");
    		//syn the schema
    		helper_<%=cid%>.add("query",sb_innerJoinReject_<%=cid%>.toString());
    		sb_innerJoinReject_<%=cid%>.setLength(0);
<%
	 	}
	 	
	 	if(existInnerJoin && innerReject && isInnerJoin) {
	 		previousInnerRejectSchemaTypes.clear();
	 		previousInnerRejectSchemaTypes.addAll(currentInnerRejectSchemaTypes);
	 	}
	 	
	}
	
	//output action
	List<OutputTable> outputTablesSortedByReject = new ArrayList<OutputTable>(outputTables);
    Collections.sort(outputTablesSortedByReject, new Comparator<OutputTable>() {

        public int compare(OutputTable o1, OutputTable o2) {
            if (o1.isReject() != o2.isReject()) {
                if (o1.isReject()) {
                    return 1;
                } else {
                    return -1;
                }
            }
            if (o1.isRejectInnerJoin() != o2.isRejectInnerJoin()) {
                if (o1.isRejectInnerJoin()) {
                    return 1;
                } else {
                    return -1;
                }
            }
            return 0;
        }

    });
    
	int size = outputTablesSortedByReject.size();
	List<String> previousFilterExpressions = new ArrayList<String>();
	boolean previousAtLeastOneTableWithoutFilterExpression = false;
	boolean previousAllOutputTableIsReject = true;
	for(int i=0;i<size;i++) {
		OutputTable outputTable = outputTablesSortedByReject.get(i);
		boolean isReject = outputTable.isReject();
		boolean isRejectInnerJoin = outputTable.isRejectInnerJoin();
		
		if(previousAllOutputTableIsReject) {
			isReject = false;//set it to code generate logic,no output reject for the first several output reject tables
		}
		
	    String tableName = outputTable.getName();
	    
	    List<TableNode> tableNodes = outputTable.getNodes();
	    
	    if((tableNodes == null) || (tableNodes.size()) == 0) {
	    	continue;
	    }
	    
%>
		helper_<%=cid%>.add("query","<%=cid%>_<%=tableName%>_RESULT = FOREACH <%=cid%>_RESULT GENERATE *;");
<%
		if(existInnerJoin && isRejectInnerJoin) {
%>
		helper_<%=cid%>.add("query","<%=cid%>_<%=tableName%>_INNER_REJECT_RESULT = FOREACH <%=cid%>_INNER_REJECT_RESULT GENERATE *;");
<%
		}
		
		boolean hasFilter = outputTable.isActivateExpressionFilter() 
	    	&& outputTable.getExpressionFilter()!=null 
	    	&& !"".equals(outputTable.getExpressionFilter());
	   	
	   	boolean noRejectDataByFilter = isReject && previousAtLeastOneTableWithoutFilterExpression;
	   	boolean hasRejectDataByFilter = isReject && !previousAtLeastOneTableWithoutFilterExpression && previousFilterExpressions.size() > 0;
	    boolean needFilterExpression = hasFilter || hasRejectDataByFilter || noRejectDataByFilter;

	    if(needFilterExpression) {
%>
			sb_<%=cid%>.append("<%=cid%>_<%=tableName%>_RESULT = FILTER <%=cid%>_<%=tableName%>_RESULT BY ");
<%
	    }
	    
		if(existInnerJoin && isRejectInnerJoin && hasFilter) {
%>
			sb_innerJoinReject_<%=cid%>.append("<%=cid%>_<%=tableName%>_INNER_REJECT_RESULT = FILTER <%=cid%>_<%=tableName%>_INNER_REJECT_RESULT BY ");
<%
		}
	    
	    String currentExpression = "";
	    if(hasFilter) {
 			String expression = outputTable.getExpressionFilter();
 			//convert the expression to big expression(replace the java var to pig $n)
 			expression = convertExpression(expressionConvertMap,expression);
 			String expressionStr = NodeUtil.replaceCRLFInMEMO_SQL("\""+expression+"\"");
 			currentExpression = expressionStr;
%>
			sb_<%=cid%>.append(<%=expressionStr%>);
<%
			if(existInnerJoin && isRejectInnerJoin) {
%>
			sb_innerJoinReject_<%=cid%>.append(<%=expressionStr%>);
<%
			}
	 	}
	 	
		if(hasRejectDataByFilter) {//the common reject action
			if(hasFilter) {
%>
			sb_<%=cid%>.append(" AND ");
<%
			}
%>
			sb_<%=cid%>.append("(NOT (");
<%
			for(int j=0;j<previousFilterExpressions.size();j++) {
				String previousFilterExpression = previousFilterExpressions.get(j);
%>
				sb_<%=cid%>.append(<%=previousFilterExpression%>);
<%
				if(j<previousFilterExpressions.size()-1) {
%>
				sb_<%=cid%>.append(" OR ");
<%
				}
			}
%>
			sb_<%=cid%>.append("))");
<%
		} else if(noRejectDataByFilter) {//no data
			if(hasFilter) {
%>
			sb_<%=cid%>.append(" AND ");
<%
			}
%>
			sb_<%=cid%>.append("(1!=1)");
<%
		}
		
		if(needFilterExpression) {
%>
		sb_<%=cid%>.append(";");
		helper_<%=cid%>.add("query",sb_<%=cid%>.toString());
		sb_<%=cid%>.setLength(0);
<%
		}
		
		if(existInnerJoin && isRejectInnerJoin && hasFilter) {
%>
		sb_innerJoinReject_<%=cid%>.append(";");
		helper_<%=cid%>.add("query",sb_innerJoinReject_<%=cid%>.toString());
		sb_innerJoinReject_<%=cid%>.setLength(0);
<%
		}
		
		isReject = outputTable.isReject();//reset it to ui settings
		
		previousAllOutputTableIsReject = previousAllOutputTableIsReject && isReject;
		
		if(hasFilter && !(isReject || isRejectInnerJoin)) {
			previousFilterExpressions.add(currentExpression);
		} 
		
		if(!hasFilter && !(isReject || isRejectInnerJoin)){
			previousAtLeastOneTableWithoutFilterExpression = true;
		}
		
		if(existInnerJoin && isRejectInnerJoin) {
			if(isReject) {//union reject and inner reject
%>
			helper_<%=cid%>.add("query","<%=cid%>_<%=tableName%>_RESULT = UNION <%=cid%>_<%=tableName%>_RESULT, <%=cid%>_<%=tableName%>_INNER_REJECT_RESULT;");
<%
			} else {//only inner reject
%>
			helper_<%=cid%>.add("query","<%=cid%>_<%=tableName%>_RESULT = FOREACH <%=cid%>_<%=tableName%>_INNER_REJECT_RESULT GENERATE *;");
<%
			}
		}
%>
		sb_<%=cid%>.append("<%=cid%>_<%=tableName%>_RESULT = FOREACH <%=cid%>_<%=tableName%>_RESULT GENERATE ");
<%
	 	
		List<String> expressions = new ArrayList<String>();
		List<String> names = new ArrayList<String>();
 		for(TableNode tnode : tableNodes) {
 			String name = tnode.getName();
 			String expression = tnode.getExpression();
 			if(expression!=null && !"".equals(expression.trim())) {
				expressions.add(expression);
				names.add(name);
 			}
 		}
 		
 		for(int j=0;j<expressions.size();j++) {
			String expression = expressions.get(j);
			String name = names.get(j);
			expression = convertExpression(expressionConvertMap,expression);
			String expressionStr = NodeUtil.replaceCRLFInMEMO_SQL("\""+expression+" AS "+name+"\"");
%>
			sb_<%=cid%>.append(<%=expressionStr%>);
<%
			if(j<expressions.size()-1) {
%>
			sb_<%=cid%>.append(",");
<%
			}
 		}
 		
%>
		sb_<%=cid%>.append(";");
		helper_<%=cid%>.add("query",sb_<%=cid%>.toString());
		sb_<%=cid%>.setLength(0);
<%
	 
	}
%>

<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/Pig/RegisterPigLatin.javajet"%>
