<%@jet%>
<%
	String distribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
	String version = ElementParameterParser.getValue(node, "__DB_VERSION__");

	org.talend.hadoop.distribution.component.SqoopComponent sqoopDistrib = null;
	try {
		sqoopDistrib = (org.talend.hadoop.distribution.component.SqoopComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(distribution, version);
	} catch (java.lang.Exception e) {
		e.printStackTrace();
		return "";
	}

	boolean isCustom = sqoopDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;

	String processId = node.getProcess().getId();
	
	List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");
	
	String namenode = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
	boolean passwordStoredInFile = "true".equals(ElementParameterParser.getValue(node, "__PASSWORD_STORED_IN_FILE__"));
	String jobtracker = ElementParameterParser.getValue(node, "__MAPRED_JOB_TRACKER__");
	boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
	boolean useColumns = "true".equals(ElementParameterParser.getValue(node,"__USE_COLUMNS__"));
	List<Map<String, String>> columns = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__COLUMNS__");
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String table = ElementParameterParser.getValue(node,"__TABLE__");
	String username = ElementParameterParser.getValue(node,"__USERNAME__");
	boolean printLog = "true".equals(ElementParameterParser.getValue(node,"__PRINT_LOG__"));
	boolean verbose = "true".equals(ElementParameterParser.getValue(node,"__VERBOSE__"));
	boolean append = "true".equals(ElementParameterParser.getValue(node,"__APPEND__"));
	boolean direct = "true".equals(ElementParameterParser.getValue(node,"__DIRECT__"));
	boolean compress = "true".equals(ElementParameterParser.getValue(node,"__COMPRESS__"));
	boolean useHadoopCodec = "true".equals(ElementParameterParser.getValue(node,"__DEFINE_HADOOP_CODEC__"));
	String hadoopCodec = ElementParameterParser.getValue(node,"__HADOOP_CODEC__");
	String fileFormat = ElementParameterParser.getValue(node,"__FILE_FORMAT__");
	boolean useTarget = "true".equals(ElementParameterParser.getValue(node,"__USE_TARGET__"));
	String target = ElementParameterParser.getValue(node,"__TARGET__");
	boolean deleteTargetDirectory = "true".equals(ElementParameterParser.getValue(node, "__DELETE_TARGET_DIR__"));
	boolean splitInputStreamDirect = "true".equals(ElementParameterParser.getValue(node, "__DEFINE_DIRECT_SPLIT_SIZE__"));
	String directSplitSize = ElementParameterParser.getValue(node, "__DIRECT_SPLIT_SIZE__");
	boolean useMappers = "true".equals(ElementParameterParser.getValue(node,"__USE_MAPPERS__"));
	String mappers = ElementParameterParser.getValue(node,"__MAPPERS__");
	List<Map<String,String>> additionalList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__ADDITIONAL_JAVA__");
	boolean overrideJavaMapping = "true".equals(ElementParameterParser.getValue(node, "__DEFINE_JAVA_MAPPING__"));
	boolean overrideHiveMapping = "true".equals(ElementParameterParser.getValue(node, "__DEFINE_HIVE_MAPPING__"));
    boolean useDatanodeHostname = "true".equals(ElementParameterParser.getValue(node, "__USE_DATANODE_HOSTNAME__"));

    boolean useMapRTicket = ElementParameterParser.getBooleanValue(node, "__USE_MAPRTICKET__");
    String mapRTicketUsername = ElementParameterParser.getValue(node, "__MAPRTICKET_USERNAME__");
    String mapRTicketCluster = ElementParameterParser.getValue(node, "__MAPRTICKET_CLUSTER__");
    String mapRTicketDuration = ElementParameterParser.getValue(node, "__MAPRTICKET_DURATION__");

    boolean setMapRHomeDir = ElementParameterParser.getBooleanValue(node, "__SET_MAPR_HOME_DIR__");
    String mapRHomeDir = ElementParameterParser.getValue(node, "__MAPR_HOME_DIR__");

    boolean setMapRHadoopLogin = ElementParameterParser.getBooleanValue(node, "__SET_HADOOP_LOGIN__");
    String mapRHadoopLogin = ElementParameterParser.getValue(node, "__HADOOP_LOGIN__");

	boolean useWhere = "true".equals(ElementParameterParser.getValue(node,"__USE_WHERE__"));
	String where = ElementParameterParser.getValue(node,"__WHERE__");
	//where = where.substring(1, where.length()-1);
	//where = "\"\\\""+where+"\\\"\"";
	
	boolean useQuery = "true".equals(ElementParameterParser.getValue(node,"__USE_QUERY__"));
	String query = ElementParameterParser.getValue(node,"__QUERY__");
	query = query.replaceAll("\n"," ");
	query = query.replaceAll("\r"," ");
	
	boolean useSplit = "true".equals(ElementParameterParser.getValue(node,"__USE_SPLIT__"));
	String split = ElementParameterParser.getValue(node,"__SPLIT__");
	
	String fsDefalutName = "fs.default.name";
	
	boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
	String passwordFieldName = "";
%>
	<%@ include file="../templates/Sqoop/GetConfig.javajet"%>
	java.util.List<String> lColumns_<%=cid%> = new java.util.ArrayList<String>();
<%
	for (Map<String, String> row : columns) {
		String column = row.get("COLUMN");
%>
		lColumns_<%=cid%>.add(<%=column%>);
<%
	}
%>

	com.cloudera.sqoop.tool.SqoopTool sqoopTool_<%=cid%> = com.cloudera.sqoop.tool.SqoopTool.getTool("import");

	com.cloudera.sqoop.SqoopOptions sqoopOptions_<%=cid%> = new com.cloudera.sqoop.SqoopOptions(configuration_<%=cid%>);
	sqoopOptions_<%=cid%>.setConnectString(<%=connection%>); // __CONNECTION__
	sqoopOptions_<%=cid%>.setUsername(<%=username%>); // __USERNAME__
	
   <%if(!passwordStoredInFile || !sqoopDistrib.doJavaAPISupportStorePasswordInFile()) {%>
		<%
    		passwordFieldName = "__PASSWORD__";
    	%>
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
		sqoopOptions_<%=cid%>.setPassword(decryptedPassword_<%=cid%>); // __PASSWORD__
	<%} else {%>
		sqoopOptions_<%=cid%>.setPasswordFilePath(<%=(String)ElementParameterParser.getValue(node, "__PASSWORD_FILE__")%>);
		sqoopOptions_<%=cid%>.setPassword(org.apache.sqoop.util.CredentialsUtil.fetchPassword<%=sqoopDistrib.doSupportFetchPasswordFromFile()?"FromFile":""%>(sqoopOptions_<%=cid%>));
	<%}%>
	
	<%if(useQuery){%>
		sqoopOptions_<%=cid%>.setSqlQuery(<%=query%>);
	<%} else {%>
		sqoopOptions_<%=cid%>.setTableName(<%=table%>); // __TABLE__
		<%if(useColumns){%>sqoopOptions_<%=cid%>.setColumns(lColumns_<%=cid%>.toArray(new String[lColumns_<%=cid%>.size()]));<%}%>
		<%if(useWhere){%>sqoopOptions_<%=cid%>.setWhereClause(<%=where%>); // __WHERE__<%}%>
	<%}%>
	<%if(append){%>sqoopOptions_<%=cid%>.setAppendMode(true);<%}%>
	<%if(direct){%>
		sqoopOptions_<%=cid%>.setDirectMode(true);
		<%if(splitInputStreamDirect) {%>
			sqoopOptions_<%=cid%>.setDirectSplitSize(Long.parseLong(<%=directSplitSize%>));
		<%}
	}%>
	<%if(compress){%>
		sqoopOptions_<%=cid%>.setUseCompression(true);
		<%if(useHadoopCodec) {%>
			sqoopOptions_<%=cid%>.setCompressionCodec(<%=hadoopCodec%>);
		<%} 
	}%>
	<%if(useTarget || useQuery){%>sqoopOptions_<%=cid%>.setTargetDir(<%=target%>);<%}%>
	<%if(fileFormat.equals("sequencefile")){%>sqoopOptions_<%=cid%>.setFileLayout(com.cloudera.sqoop.SqoopOptions.FileLayout.SequenceFile);<%} else if(fileFormat.equals("textfile")){%>sqoopOptions_<%=cid%>.setFileLayout(com.cloudera.sqoop.SqoopOptions.FileLayout.TextFile);<%}
	else if(fileFormat.equals("parquetfile")){%>sqoopOptions_<%=cid%>.setFileLayout(com.cloudera.sqoop.SqoopOptions.FileLayout.ParquetFile);<%}
	else {%>sqoopOptions_<%=cid%>.setFileLayout(com.cloudera.sqoop.SqoopOptions.FileLayout.AvroDataFile);<%}%>
	<%if(useMappers){%>sqoopOptions_<%=cid%>.setNumMappers(Integer.valueOf(<%=mappers%>));<%}%>
	<%if(useSplit){%>sqoopOptions_<%=cid%>.setSplitByCol(<%=split%>);<%}%>
	<%if(!isCustom && sqoopDistrib.doJavaAPISqoopImportSupportDeleteTargetDir()) {%>
		<%if(deleteTargetDirectory){%>
			sqoopOptions_<%=cid%>.setDeleteMode(true);
		<%}%>
	<%}%>
	
	<%
	
	if(overrideJavaMapping) {
		List<Map<String,String>> javaMappings = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__JAVA_TYPE_MAPPING__");
		if(javaMappings!=null && javaMappings.size()>0) {
	%>
			StringBuilder sb_java_<%=cid%> = new StringBuilder();
	<%
			boolean first = true;	
			for(Map<String,String> javaMapping : javaMappings) {
				if(first) {
					first = false;
	%>
					sb_java_<%=cid%>.append(<%=javaMapping.get("COLUMN_NAME")%> + "=" + <%=javaMapping.get("JAVA_TYPE")%>);
	<%
				} else {
	%>
					sb_java_<%=cid%>.append("," + <%=javaMapping.get("COLUMN_NAME")%> + "=" + <%=javaMapping.get("JAVA_TYPE")%>);
	<%
				}	
			}
	%>
			sqoopOptions_<%=cid%>.setMapColumnJava(sb_java_<%=cid%>.toString());
	<%
		}
	}

	if(overrideHiveMapping) {
		List<Map<String,String>> hiveMappings = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__HIVE_TYPE_MAPPING__");
		if(hiveMappings!=null && hiveMappings.size()>0) {
	%>
			StringBuilder sb_hive_<%=cid%> = new StringBuilder();
	<%	
			boolean first = true;	
			for(Map<String,String> hiveMapping : hiveMappings) {
				if(first) {
					first = false;
	%>
					sb_hive_<%=cid%>.append(<%=hiveMapping.get("COLUMN_NAME")%> + "=" + <%=hiveMapping.get("HIVE_TYPE")%>);
	<%
				} else {
	%>
					sb_hive_<%=cid%>.append("," + <%=hiveMapping.get("COLUMN_NAME")%> + "=" + <%=hiveMapping.get("HIVE_TYPE")%>);
	<%
				}	
			}
	%>
			sqoopOptions_<%=cid%>.setMapColumnHive(sb_hive_<%=cid%>.toString());
	<%
		}
	}
	%>
	
	java.util.Properties additionalProperties_<%=cid%> = new java.util.Properties();
	<%
	if(sqoopDistrib.isImpactedBySqoop2995()){
	//TODO, relate with https://issues.apache.org/jira/browse/SQOOP-2995, have to set a init value to the new map type key "customtool.options.jsonmap". But the key hasn't been used
	%>
		additionalProperties_<%=cid%>.put("customtool.options.jsonmap", "{\"\":\"\"}");
	<%
	}
	if(additionalList != null){ 
		for(Map<String,String> additionalMap : additionalList){
			if(additionalMap.get("ADDITIONAL_VALUE")==null || "".equals(additionalMap.get("ADDITIONAL_VALUE"))) { 
				break; 
			}
            		String currentArgument = additionalMap.get("ADDITIONAL_ARGUMENT");
		        if(currentArgument.contains("delimiters") && !currentArgument.contains("required")) {
%> 
				additionalProperties_<%=cid%>.put(<%=currentArgument%>, ""+<%=additionalMap.get("ADDITIONAL_VALUE")%>.codePointAt(0)); 
<%
			} else {
%> 
				additionalProperties_<%=cid%>.put(<%=currentArgument%>, <%=additionalMap.get("ADDITIONAL_VALUE")%>); 
<%
			}
		} 
	} 
%>
	sqoopOptions_<%=cid%>.loadProperties(additionalProperties_<%=cid%>);
	org.apache.sqoop.Sqoop sqoop_<%=cid%> = new org.apache.sqoop.Sqoop(sqoopTool_<%=cid%>, configuration_<%=cid%>, sqoopOptions_<%=cid%>);
	<%@ include file="@{org.talend.designer.components.bigdata}/components/tSqoopImport/sqoop-avro-dependency.javajet"%>
	<%@ include file="@{org.talend.designer.components.bigdata}/components/tSqoopImport/sqoop-parquet-dependency.javajet"%>
	try {
<%
		if(!emptyStringBuilder) {
%>
			int result_<%=cid%> = org.apache.sqoop.Sqoop.runSqoop(sqoop_<%=cid%>, new String[] {"-libjars", sb_<%=cid%>.toString()});
<%
		} else {
%>
			int result_<%=cid%> = org.apache.sqoop.Sqoop.runSqoop(sqoop_<%=cid%>, new String[] {});
<%
		}
%>
		globalMap.put("<%=cid%>_EXIT_CODE", result_<%=cid%>);
		if(result_<%=cid%> != 0) {
<%
			if(dieOnError) {
%>
				throw new Exception("The Sqoop import job has failed. Please check the logs.");
<%
			} else {
%>
				System.err.println("The Sqoop import job has failed. Please check the logs.");
				<%if(isLog4jEnabled) {%>
				log.error("<%=cid%> - The Sqoop import job has failed. Please check the logs.");
				<%}
			}
%>
		}
	} catch (Exception e) {
<%
		if(dieOnError) {
%>
			throw e;
<%
		} else {
%>
			System.err.println(e.getMessage());
			<%if(isLog4jEnabled) {%>
			log.error("<%=cid%> - " + e.getMessage());
			<%}
		}
%>
	}

	<%@ include file="../templates/Sqoop/ResetEnv.javajet"%>
