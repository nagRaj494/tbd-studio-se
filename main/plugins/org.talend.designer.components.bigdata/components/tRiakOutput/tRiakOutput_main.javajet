<%@ jet 
	imports="
	   	org.talend.core.model.metadata.IMetadataColumn
	    org.talend.core.model.metadata.IMetadataTable
	    org.talend.core.model.process.EConnectionType
	    org.talend.core.model.process.ElementParameterParser
	    org.talend.core.model.process.IConnection
	    org.talend.core.model.process.INode
	    org.talend.designer.codegen.config.CodeGeneratorArgument
	    org.talend.core.model.process.IConnectionCategory
	    
		java.util.List
		java.util.Map
	" 
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
	
    String cid = node.getUniqueName();
    List<Map<String, String>> valueColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__VALUE_COLUMNS__");
    List<String> valueColumnNames = new java.util.ArrayList<String>();
	boolean dieOnError = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
    boolean autoGenKey = "true".equals(ElementParameterParser.getValue(node,"__AUTO_GEN_KEY__"));
    String key = ElementParameterParser.getValue(node,"__KEY__");
    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    
  	List<? extends IConnection> inConns = node.getIncomingConnections(EConnectionType.FLOW_MAIN);
    java.util.List<IMetadataColumn> tempValuesColumns = new java.util.ArrayList<IMetadataColumn>();
    IConnection inConn = null;
	IMetadataTable metadata = null;
	if(inConns!=null && inConns.size()> 0) {
		inConn = inConns.get(0);
		metadata = inConn.getMetadataTable();
	}
  	List< ? extends IConnection> conns = node.getIncomingConnections();
	for (IConnection conn : conns) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	      	if(metadata != null){
	      		if(!"DELETE".equals(dataAction)){
		      		if(valueColumns.size()>0){
			      		for(int i=0;i<valueColumns.size();i++){
				    		Map<String, String> columnValue = valueColumns.get(i);
							valueColumnNames.add(columnValue.get("SCHEMA_COLUMN"));
						}
					}
					for(IMetadataColumn inputCol : metadata.getListColumns()){
						if(valueColumnNames.contains(inputCol.getLabel())){
							tempValuesColumns.add(inputCol);
						}
					}
				}
				int sizeColumns = tempValuesColumns.size();
				%>
				try{
					<%
					if("DELETE".equals(dataAction)){
					%>
						if(<%=conn.getName()%>.<%=key%>!=null){
							bucket_<%=cid%>.delete(String.valueOf(<%=conn.getName()%>.<%=key%>)).execute();
							delete_nb_line_<%=cid%>++;
							<%
							if (isLog4jEnabled) {
							%>
								log.debug("<%=cid%> - Delete the record " + (delete_nb_line_<%=cid%>) + ".");
								log.trace("<%=cid%> - Key of the record " + (delete_nb_line_<%=cid%>) + ": " + <%=conn.getName()%>.<%=key%>);
							<%
							}
							%>
						}
					<%
					}else{
						if(sizeColumns>0){
						%>
							object_<%=cid%>=new java.util.HashMap<String,Object>();
							<%
							for (int i = 0; i < sizeColumns; i++) {
								IMetadataColumn column = tempValuesColumns.get(i);
								%>
								object_<%=cid%>.put("<%=column.getOriginalDbColumnName()%>", <%=conn.getName()%>.<%=column.getLabel()%>);
							<%
							}
							if(autoGenKey){
							%>
								bucket_<%=cid%>.store(object_<%=cid%>).withoutFetch().execute();
							<%
							}else{
							%>
								if(<%=conn.getName()%>.<%=key%>!=null){
									bucket_<%=cid%>.store(String.valueOf(<%=conn.getName()%>.<%=key%>), object_<%=cid%>).withoutFetch().execute();
								}else{
									bucket_<%=cid%>.store(object_<%=cid%>).withoutFetch().execute();
								}
							<%
							}
						}
						%>
						upsert_nb_line_<%=cid%>++;
						<%
					}
					%>
				}catch(java.lang.Exception e_<%=cid%>){
					<%
					if(dieOnError) {
					%>
				        throw(e_<%=cid%>);
					<%
					}else{
						if(isLog4jEnabled){
						%>
						log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
						<%
						}
						%>
						System.err.println(e_<%=cid%>.getMessage());
					<%
					}	
					%>
				}
			<%
			}
    	}
    }
%>