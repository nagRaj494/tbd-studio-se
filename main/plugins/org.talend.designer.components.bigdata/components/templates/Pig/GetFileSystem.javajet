<%@ jet %>

<%
class GetFileSystem{
	public void invoke(INode node){
        String cid = node.getUniqueName();
        
        String fsDefaultName = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
        List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");
        String user = null;
        
        String username = ElementParameterParser.getValue(node, "__USERNAME__");
        %>
        String hdfs_username_<%=cid%> = (<%=username%> != null && !"".equals(<%=username%>)) ? <%=username%> : System.getProperty("user.name");;
        org.apache.hadoop.fs.FileSystem fs_<%=cid%> = null;
        <%
        String distribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
        String hadoopVersion = ElementParameterParser.getValue(node, "__PIG_VERSION__");
        boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
        String kerberosPrincipal = ElementParameterParser.getValue(node, "__NAMENODE_PRINCIPAL__");
        boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
        String userPrincipal = ElementParameterParser.getValue(node, "__PRINCIPAL__");
        String keytabPath = ElementParameterParser.getValue(node, "__KEYTAB_PATH__");
        boolean mrUseDatanodeHostname = "true".equals(ElementParameterParser.getValue(node, "__USE_DATANODE_HOSTNAME__"));

        org.talend.hadoop.distribution.component.HDFSComponent hdfsDistrib = null;
        try {
            hdfsDistrib = (org.talend.hadoop.distribution.component.HDFSComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(distribution, hadoopVersion);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
            return;
        }

        boolean isCustom = hdfsDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;
        
        %>
        org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration(); 
        conf_<%=cid%>.set("fs.default.name", <%=fsDefaultName%>);
        
        <%
        if(mrUseDatanodeHostname && hdfsDistrib.doSupportUseDatanodeHostname()){
        %>
            conf_<%=cid%>.set("dfs.client.use.datanode.hostname", "true");
        <%
        }
        if(hadoopProps!=null && hadoopProps.size() > 0){
        	for(Map<String, String> item : hadoopProps){
        	%>
        		conf_<%=cid%>.set(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
        	<% 
    		}
    	}
        	
    	if((hdfsDistrib.doSupportKerberos() && useKrb && !isCustom) || (isCustom && useKrb)){
    	%>
    		conf_<%=cid%>.set("dfs.namenode.kerberos.principal", <%=kerberosPrincipal%>);
    		<%
    		if(useKeytab){
    		%>
    			org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(<%=userPrincipal%>, <%=keytabPath%>);
    		<%
    		}
    	}
    	
    	if(hdfsDistrib.doSupportGroup()) {
    		String group = ElementParameterParser.getValue(node, "__GROUP__");
    		%>
			conf_<%=cid%>.set("hadoop.job.ugi",hdfs_username_<%=cid%>+","+<%=group%>);
        	fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
        <%
        }else{
        %>
        	
        	if(hdfs_username_<%=cid%> == null || "".equals(hdfs_username_<%=cid%>)){
        		fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(conf_<%=cid%>);
        	}else{
        		fs_<%=cid%> = org.apache.hadoop.fs.FileSystem.get(new java.net.URI(conf_<%=cid%>.get("fs.default.name")),conf_<%=cid%>,hdfs_username_<%=cid%>);
        	}	
        <%
        }
    }
}
%>