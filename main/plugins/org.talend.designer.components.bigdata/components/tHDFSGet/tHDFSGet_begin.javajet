<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	"
%>

	<%@ include file="@{org.talend.designer.components.bigdata}/components/templates/HDFS/GetFileSystem.javajet"%>
	
<%
	String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");	
	List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");
%>
	int nb_file_<%=cid%> = 0;
	int nb_success_<%=cid%> = 0;
	
	String localPath_<%=cid%> = <%=localdir%>;
	if(localPath_<%=cid%>!=null&&!"".equals(localPath_<%=cid%>)){
		java.io.File localDir_<%=cid%> = new java.io.File(localPath_<%=cid%>);
		localDir_<%=cid%>.mkdirs();
	}else{
		throw new RuntimeException("The local Dir required");
	}
	java.util.List<String> msg_<%=cid%> = new java.util.ArrayList<String>();
    java.util.List<java.util.Map<String,String>> list_<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();
	<%
    for (int i=0; i<files.size(); i++) {
       	Map<String, String> line = files.get(i);
	%>    
		java.util.Map<String,String> map_<%=cid %>_<%=i %> = new java.util.HashMap<String,String>();
		map_<%=cid %>_<%=i %>.put(<%= line.get("FILEMASK") %>,<%= line.get("NEWNAME") %>);		
	 	list_<%=cid %>.add(map_<%=cid %>_<%=i %>);       
	<%
  	}
	%>	    

    class FileUtil_<%=cid%> {

		private long size = 0;
		
    	// copy from :
    	// directory or file of some file system
    	// to
    	// file or directory of local file system
    	// not support dir to file
    	public boolean copyToLocal(org.apache.hadoop.fs.FileSystem srcFS, org.apache.hadoop.fs.Path src, java.io.File dst,
				boolean overwrite, boolean append, boolean copyDirectory)
    			throws java.io.IOException {
    
    		boolean srcIsDir = srcFS.getFileStatus(src).isDir();
    
    		if (srcIsDir && !copyDirectory) {
    			return false;
    		}
    
    		dst = checkDest(src.getName(), srcIsDir, dst, overwrite);
    		
    		if(dst == null) {
    			return false;
    		}
    
    		if (srcIsDir) {
    			if (!dst.exists() && !dst.mkdirs()) {
    				return false;
    			}
    			org.apache.hadoop.fs.FileStatus contents[] = srcFS.listStatus(src);
    			for (int i = 0; i < contents.length; i++) {
    				copyToLocal(srcFS, contents[i].getPath(), new java.io.File(dst, contents[i]
    						.getPath().getName()), overwrite, append, copyDirectory);
    			}
    		} else if (srcFS.isFile(src)) {
    			java.io.InputStream in = null;
    			java.io.OutputStream out = null;
    			try {
    				in = srcFS.open(src, 10000);
    				out = new java.io.FileOutputStream(dst, append);
    				org.apache.hadoop.io.IOUtils.copyBytes(in, out, 10000, true);
    				size += srcFS.getFileStatus(src).getLen();
    			} catch (java.io.IOException e) {
    				org.apache.hadoop.io.IOUtils.closeStream(out);
    				org.apache.hadoop.io.IOUtils.closeStream(in);
    				throw e;
    			}
    		} else {
    			throw new java.io.IOException(src.toString()
    					+ ": No such file or directory");
    		}
    
    		return true;
    
    	}
    
    	private java.io.File checkDest(String srcName, boolean srcIsDir, java.io.File dst, boolean overwrite) {
    		if (dst.exists()) {
    			if (dst.isDirectory()) {
    				if (null == srcName) {
    					return null;
    				}
    				
    				if(srcIsDir) {
						return dst;
					}
    				
    				return checkDest(null, srcIsDir, new java.io.File(dst, srcName), overwrite);
    			} else if (!overwrite) {
    				System.err.print(dst+" exists, is not overwritten.");
    				
    				<%if(isLog4jEnabled) {%>
                   	log.error("<%=cid%> - directory or file : " + dst + " exists, is not overwritten.");
                    <%}%>
                    
    				return null;
    			}
    		}
    		return dst;
    	}
    	
    	public long getSize() {
    		return size;
    	}

	}

	for (java.util.Map<String, String> map_<%=cid %> : list_<%=cid %>) 
	{

