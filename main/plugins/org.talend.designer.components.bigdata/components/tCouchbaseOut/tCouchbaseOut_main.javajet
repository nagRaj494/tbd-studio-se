<%@ jet 
imports="
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnectionCategory
    java.util.List
    "
%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	
	INode node = (INode)codeGenArgument.getArgument();
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	List<IMetadataColumn> rejectColumnList = null;
	if(rejectConns != null && rejectConns.size() > 0) {
		IConnection rejectConn = rejectConns.get(0);
		if(rejectConn!=null){
	    	rejectConnName = rejectConn.getName();
	    	IMetadataTable metadataTable = rejectConn.getMetadataTable();
	    	if(metadataTable!=null){
	        	rejectColumnList = metadataTable.getListColumns();
	    	}
	  	}
	}
	List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
	List<IMetadataColumn> columnList = null;
	
	for(IConnection tmpconn : outgoingConns) {
		if (tmpconn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			if(rejectConnName==null || !rejectConnName.equals(tmpconn.getName())){
	      		IMetadataTable outputMetadata = tmpconn.getMetadataTable();
	      		if(outputMetadata!=null){
	         		 columnList = outputMetadata.getListColumns();
	      		}
	    	}
	  		%>
	    	<%=tmpconn.getName() %> = null;
	  	<%
	  	}
	}
	String cid = node.getUniqueName();
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	List<IMetadataTable> metadatas = node.getMetadataList();
	
	if ((metadatas!=null) && (metadatas.size() > 0)) {
	    IMetadataTable metadata = metadatas.get(0);
	    if (metadata != null) {
	        
	        String expire = ElementParameterParser.getValue(node, "__EXPIRE__");
	        String isjson = ElementParameterParser.getValue(node,"__IS_VIRTUAL_COMPONENT__");
	        List< ? extends IConnection> conns = node.getIncomingConnections();
	        if (conns != null){
	            if (conns.size()>0){
	                IConnection conn =conns.get(0);
	                String connName = conn.getName();
	                if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	                    IMetadataTable meta =  conn.getMetadataTable();
	                    if(meta.getListColumns().size()>0){
	                        String key = ElementParameterParser.getValue(node,"__KEY__");
							%>
	                        whetherReject_<%=cid%> = false;
							try {
								<%
	                        	if("delete".equals(dataAction)){
								%>
	                            	net.spy.memcached.internal.OperationFuture<Boolean> operation_<%=cid%> = client_<%=cid%>.delete(<%=connName%>.<%=key%>);
								<%
								}else {
									if("true".equals(isjson)){
										String jsonfield = ElementParameterParser.getValue(node,"__JSONFIELD__");
										%>
	                                	net.spy.memcached.internal.OperationFuture<Boolean> operation_<%=cid%> = client_<%=cid%>.<%=dataAction%>(<%=connName%>.<%=key%>.toString(), <%=expire%>, <%=connName%>.<%=jsonfield%>);
									<%
		                            }else{
		                                String value = ElementParameterParser.getValue(node,"__VALUE__");
										%>
	                                	net.spy.memcached.internal.OperationFuture<Boolean> operation_<%=cid%> = client_<%=cid%>.<%=dataAction%>(<%=connName%>.<%=key%>, <%=expire%>, <%=connName%>.<%=value%>);
									<%
		                            }
		                        }
								%>
	                        	if (operation_<%=cid%>.get().booleanValue()) {
									<%
									if("add".equals(dataAction)){
									%>
		                                nb_line_inserted_<%=cid%>++;
									<%
									}else if("replace".equals(dataAction)){
									%>
		                                nb_line_update_<%=cid%>++;
									<%
									}else if("set".equals(dataAction)){
									%>
		                                nb_line_inserted_updated_<%=cid%>++;
									<%
									}else if("delete".equals(dataAction)){
									%>
		                                nb_line_deleted_<%=cid%>++;
									<%
									}
									if(isLog4jEnabled){
									%>
										log.debug("<%=cid%> - Writing the record " + (nb_line_<%=cid %> + 1) + " into bucket.");
									<%
									} 
									%>
								}else{
									whetherReject_<%=cid%> = true;
									<%
									if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
									%>
										<%=rejectConnName %> = new <%=rejectConnName %>Struct();
										<%
										for(IMetadataColumn column1 : columnList) {
										%>
											<%=rejectConnName%>.<%=column1.getLabel()%> = <%=connName%>.<%=column1.getLabel()%>;
										<%
										}
										%>
										nb_line_rejected_<%=cid%> ++;
										<%=rejectConnName%>.errorMessage = "<%=dataAction%> key:"+<%=connName%>.<%=key%>+" - Line: " + tos_count_<%=node.getUniqueName() %>;
									<%
		                            }
		                            if(isLog4jEnabled){
									%>
										log.debug("<%=cid%> - Failed write the record " + (nb_line_<%=cid %> + 1) + " into bucket.");
									<%
									}
		                            %>
		                        }
	                    	} catch (java.lang.Exception e_<%=cid%>) {
		                        whetherReject_<%=cid%> = true;
								<%
								if (("true").equals(dieOnError)) {
								%>
									throw(e_<%=cid%>);
								<%
								} else {
									if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
									%>
										<%=rejectConnName %> = new <%=rejectConnName %>Struct();
										<%
										for(IMetadataColumn column1 : columnList) {
										%>
											<%=rejectConnName%>.<%=column1.getLabel()%> = <%=connName%>.<%=column1.getLabel()%>;
										<%
		                                }
		                                %>
		                                nb_line_rejected_<%=cid%> ++;
		                                <%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
									<%
		                            } else {
										if(isLog4jEnabled){
										%>
											log.error("<%=cid%> - ExecutionException while doing set: " + e_<%=cid%>.getMessage());
										<%
										}
										%>
		                                System.err.println("ExecutionException while doing set: " + e_<%=cid%>.getMessage());
									<%
		                            }
		                            if(isLog4jEnabled){
									%>
										log.debug("<%=cid%> - Failed write the record " + nb_line_<%=cid %> + " into bucket.");
									<%
									}
		                        } 
		                        %>
		                    }
	                    	nb_line_<%=cid%>++;
						<%
						}       
                    	if(outgoingConns != null && outgoingConns.size() > 0) {
                        %>
							if(!whetherReject_<%=cid%>) {
								<%
								for(IConnection outgoingConn : outgoingConns) {
									if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
										if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
										%>
                                        	<%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
											<%
											for(IMetadataColumn column : columnList) {
											%>
												<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=connName%>.<%=column.getLabel()%>;
											<%
											}
										}
									}
								}
								%>
	                        }
						<%
						}
					}
				}
			}
		}
	}
	%>
