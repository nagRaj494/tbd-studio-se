<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List
		java.util.Map
	"
%>
<%
	CodeGeneratorArgument inputCodeGenArgument = (CodeGeneratorArgument) argument;
	INode inputNode = (INode)inputCodeGenArgument.getArgument();
	String inputCid = inputNode.getUniqueName();
	
	boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(inputNode,"__USE_EXISTING_CONNECTION__"));
	boolean dieOnError = "true".equals(ElementParameterParser.getValue(inputNode, "__DIE_ON_ERROR__"));
	
	boolean useKrb = "true".equals(ElementParameterParser.getValue(inputNode, "__USE_KRB__"));
	String additionalParameters = "\";auth=noSasl\"";
	if(useKrb) {
		additionalParameters = "\";principal=\" + " + ElementParameterParser.getValue(inputNode, "__IMPALA_PRINCIPAL__");
	}
	
	final String parameters = additionalParameters;

%>	
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/DB/Input/HelpClass.javajet"%>
<%

	class DBInputBeginUtil extends DefaultDBInputUtil{
		public void setURL(INode node) {
%>
			String url_<%=cid %> = "jdbc:hive2://"+<%=dbhost%>+":"+<%=dbport%>+"/"+<%=dbname%> + <%=parameters%>; 
<%	
		}
	
		public String getDirverClassName(INode node){
			return "org.apache.hive.jdbc.HiveDriver";
		}
		
		public void afterUseExistConnection(INode node) {
			String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
			String db = "db_" + connection;
%>
			String dbname_<%=cid%> = (String)globalMap.get("<%=db%>");
			if(dbname_<%=cid%>!=null && !"".equals(dbname_<%=cid%>.trim()) && !"default".equals(dbname_<%=cid%>.trim())) {
				java.sql.Statement goToDatabase_<%=cid%> = conn_<%=cid%>.createStatement();
				goToDatabase_<%=cid%>.execute("use " + dbname_<%=cid%>);
				goToDatabase_<%=cid%>.close();
		    }
<%
		}
		
		public void afterUseNewConnection(INode node) {
%>
			String dbname_<%=cid%> = <%=dbname%>;
			if(dbname_<%=cid%>!=null && !"".equals(dbname_<%=cid%>.trim()) && !"default".equals(dbname_<%=cid%>.trim())) {
				java.sql.Statement goToDatabase_<%=cid%> = conn_<%=cid%>.createStatement();
				goToDatabase_<%=cid%>.execute("use " + dbname_<%=cid%>);
				goToDatabase_<%=cid%>.close();
		    }
<%
	    }
	}
	
	dbInputBeginUtil = new DBInputBeginUtil();
	
	String impalaVersion = ElementParameterParser.getValue(inputNode, "__IMPALA_VERSION__");
	String distribution = ElementParameterParser.getValue(inputNode, "__DISTRIBUTION__");
	
	if(useExistingConnection) {
		distribution = "";
		impalaVersion = "";
		String connection = ElementParameterParser.getValue(inputNode, "__CONNECTION__");
		for (INode pNode : inputNode.getProcess().getNodesOfType("tHiveConnection")) {
			if(connection!=null && connection.equals(pNode.getUniqueName())) {
				distribution = ElementParameterParser.getValue(pNode, "__DISTRIBUTION__");
				impalaVersion = ElementParameterParser.getValue(pNode, "__HIVE_VERSION__");
				break;
			}
		}
	}
	
	boolean isCustom = "CUSTOM".equals(distribution);
%>

	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/DB/Input/AbstractDBInputBegin.javajet"%>