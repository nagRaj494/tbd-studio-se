<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.utils.NodeUtil

		java.util.Map
		java.util.List
	" 
%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
    String dbname = ElementParameterParser.getValue(node, "__DATABASE__");
    String dbuser = ElementParameterParser.getValue(node, "__USERNAME__");
    String dbpass = ElementParameterParser.getValue(node, "__PASSWORD__");
    boolean authentication="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REQUIRED_AUTHENTICATION__"));
    if (!authentication){
    	dbuser = null;
    	dbpass = null;
    }
    
    String passwordFieldName = "__PASSWORD__";
    %>
 	String decryptedPassword_<%=cid%> = null;
 	<%if(!authentication) {
 	   //do nothing
    } else if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {%> 
    	decryptedPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
    <%} else {%>
    	decryptedPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
    <%}
    
    boolean useTriggerReplicate="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_TRIGGER_REPLICATE__"));
    String dbport  	= ElementParameterParser.getValue(node, "__PORT__");
    List<Map<String,String>> replicaTargetDB= (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__REPLICATE_TARGET_DB__");
    boolean useExistingConn = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
    
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	%>
	org.lightcouch.CouchDbClient client_<%=cid%> = null;
	java.util.Map<Object,Object> map_<%=cid%>=null;
	com.google.gson.JsonParser jsonParse_<%=cid%> = new com.google.gson.JsonParser();
	int nb_line_<%=cid%> = 0;
	int nb_line_updated_<%=cid%> = 0;
	int nb_line_inserted_<%=cid%> = 0;
	int nb_line_upserted_<%=cid%> = 0;
	int nb_line_deleted_<%=cid%> = 0;
	<%
	if(useExistingConn){
	 	INode connectionNode=NodeUtil.getNodeByUniqueName(node.getProcess(),connection);
	 	dbname = ElementParameterParser.getValue(connectionNode, "__DATABASE__");
	%>
		client_<%=cid%> = (org.lightcouch.CouchDbClient)globalMap.get("client_<%=connection%>");
		<%
		if(isLog4jEnabled){
		%>	
			if(client_<%=cid%> != null) {
				log.info("<%=cid%> - Get an existing client from " + "<%=connection%>" + ".");
			}
		<%
		}
	}else{
	%>
		client_<%=cid%> = new org.lightcouch.CouchDbClient(<%=dbname%>, true, "http", <%=dbhost%>, <%=dbport%>, <%=dbuser%>, decryptedPassword_<%=cid%>);
		<%
		if(useTriggerReplicate){
		%>
			org.lightcouch.ReplicationResult result_<%=cid%> = null;
			List<org.lightcouch.Replication> replications_<%=cid%> = new java.util.ArrayList<org.lightcouch.Replication>();
			<%
			int index= 0;
			for(Map<String,String> targetDB:replicaTargetDB){
				String targetDBName=targetDB.get("TARGET_DB_NAME");
				boolean isCreateTargetDB = "true".equalsIgnoreCase(targetDB.get("CREATE_TARGET"));
				boolean isContinuous = "true".equalsIgnoreCase(targetDB.get("CONTINUOUS"));
				boolean isCancel = "true".equalsIgnoreCase(targetDB.get("CANCEL_REPLICATE"));
				%>
				result_<%=cid%> = client_<%=cid%>.replication()
				  .source(<%=dbname%>)
				  .target(<%=targetDBName%>) 
				  .createTarget(<%=isCreateTargetDB%>)
				  .continuous(<%=isContinuous%>)
				  .trigger();
				<%
				if(isContinuous && isCancel){
				%>
					if(result_<%=cid%>.isOk()){
						org.lightcouch.Replication replication_<%=cid%>_<%=index%>=
						client_<%=cid%>.replication()
						  .source(<%=dbname%>)
						  .target(<%=targetDBName%>)
						  .createTarget(<%=isCreateTargetDB%>)
						  .continuous(<%=isContinuous%>)
						  .cancel(<%=isCancel%>);
						replications_<%=cid%>.add(replication_<%=cid%>_<%=index%>);
					}
					<%
					index++;
				}
			}
		}
	}
	if (isLog4jEnabled) {
	%>
		log.info("<%=cid%> - Start to manipulate data in database [" +<%=dbname%>+ "].");
	<%
	}
	%>