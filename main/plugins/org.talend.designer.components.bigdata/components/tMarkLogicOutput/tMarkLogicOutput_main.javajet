<%@ jet
imports="
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.metadata.IMetadataColumn
        java.util.List
"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();

    String actionType = ElementParameterParser.getValue(node,"__ACTION_TYPE__");
    String docType = ElementParameterParser.getValue(node,"__DOC_TYPE__");

    String docIdPrefix = ElementParameterParser.getValue(node,"__DOC_ID_PREFIX__");
    boolean autoGenerateDocId = "true".equals(ElementParameterParser.getValue(node,"__AUTO_GENERATE_DOC_ID__"));
            autoGenerateDocId = "INSERT".equals(actionType) && autoGenerateDocId;

    boolean hasRejectConn = false;
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        rejectConnName = rejectConns.get(0).getName();
        hasRejectConn = true;
        %>
           <%= rejectConnName %> = null;
        <%
    }

    List<IMetadataTable> metadataList = node.getMetadataList();
    if((metadataList != null) && (metadataList.size() > 0)){//Tag A
        IMetadataTable metadata = metadataList.get(0);
        if(metadata != null){//Tag B
            List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
            boolean hasMainFlow = false;
            for(IConnection conn : outgoingConns){
               if(conn.getConnectorName().equals("FLOW")){
                  hasMainFlow = true;
                  break;
               }
            }
            IConnection outputConn = null;
            if(hasMainFlow){
                outputConn = outgoingConns.get(0);
                %>
                   <%= outputConn.getName() %> = null;
                <%
            }
            List<? extends IConnection> conns = node.getIncomingConnections();
            for(IConnection conn : conns){//Tag C
                if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){//Tag D
                    String connName = conn.getName();
                    List<IMetadataColumn> columns = metadata.getListColumns();
                    %>
                    nb_line_<%= cid %> ++;
                    String docId_<%= cid %> = null;
                    Object docContent_<%= cid %> = null;
                    try{
                    <%
                    if("DELETE".equals(actionType)){
                    %>
                       docId_<%= cid %> = <%= connName %>.docId;
                       docMgr_<%= cid %>.delete(docId_<%= cid %>);
                       nb_line_deleted_<%= cid %> ++;
                    <%
                    }else if("INSERT".equals(actionType)){
                    %>
                        docContent_<%= cid %> = <%= connName %>.docContent;
                        com.marklogic.client.io.marker.AbstractWriteHandle genericHandle_<%= cid %> = null;
                        <%
                         if("BINARY".equals(docType)){
                         %>
                            if(docContent_<%= cid %> instanceof byte[]){
                                 genericHandle_<%= cid %> = new com.marklogic.client.io.BytesHandle((byte[])docContent_<%= cid %>);
                            }else if(docContent_<%= cid %> instanceof java.io.File){
                                 genericHandle_<%= cid %> = new com.marklogic.client.io.FileHandle((java.io.File)docContent_<%= cid %>);
                            }else if(docContent_<%= cid %> instanceof String){
                                 genericHandle_<%= cid %> = new com.marklogic.client.io.StringHandle((String)docContent_<%= cid %>);
                            }else{
                                 throw new RuntimeException("Unsupported Content Represent in " + docContent_<%= cid %>.getClass());
                            }
                         <%
                         }else{
                         %>
                                genericHandle_<%= cid %> = new com.marklogic.client.io.StringHandle((String)docContent_<%= cid %>);
                         <%
                         }
                    %>
                    <%
                        if(autoGenerateDocId){
                        %>
                        com.marklogic.client.document.DocumentUriTemplate docUriTpl_<%= cid %> = docMgr_<%= cid %>.newDocumentUriTemplate(docIdSuffix_<%= cid %>);
                        <%
                        if(docIdPrefix != null && !"".equals(docIdPrefix) && !"\"\"".equals(docIdPrefix)){
                        %>
                           String docIdPrefix_<%= cid %> = <%= docIdPrefix %>;
                           if(!(docIdPrefix_<%= cid %>.endsWith("/") || docIdPrefix_<%= cid %>.endsWith("\\"))){
                               docIdPrefix_<%= cid %> = docIdPrefix_<%= cid %> + "/";
                           }
                           docUriTpl_<%= cid %>.setDirectory(docIdPrefix_<%= cid %>.replace("\\", "/"));
                        <%
                        }
                         %>
                        com.marklogic.client.document.DocumentDescriptor docDesc_<%= cid %> = docMgr_<%= cid %>.create(docUriTpl_<%= cid %>, genericHandle_<%= cid %>);
                        docId_<%= cid %> = docDesc_<%= cid %>.getUri();
                        <%
                        }else{
                        %>
                        docId_<%= cid %> = <%= connName %>.docId;
                    <%
                    }
                    %>
                            docMgr_<%= cid %>.write(docId_<%= cid %>, genericHandle_<%= cid %>);
                            nb_line_inserted_<%= cid %> ++;
                    <%
                    }else if("PATCH".equals(actionType)){
                    %>
                        docId_<%= cid %> = <%= connName %>.docId;
                        docContent_<%= cid %> = <%= connName %>.docContent;
                        com.marklogic.client.io.StringHandle strHandle_<%= cid %> = new com.marklogic.client.io.StringHandle((String)docContent_<%= cid %>);
                        <%
                        if("JSON".equals(docType)){
                        %>
                        strHandle_<%= cid %>.withFormat(com.marklogic.client.io.Format.JSON);
                        <%
                        }else if("XML".equals(docType)){
                        %>
                        strHandle_<%= cid %>.withFormat(com.marklogic.client.io.Format.XML);
                        <%
                        }else{
                        %>
                           Compile Err: Unsupported Doc Type "<%= docType %>" for Update.
                        <%
                        }
                         %>
                        docMgr_<%= cid %>.patch(docId_<%= cid %>, strHandle_<%= cid %>);
                        nb_line_updated_<%= cid %> ++;
                    <%
                    }else{
                    %>
                       Compile Err: UNSUPPORTED_ACTION_TYPE <%= actionType %>
                    <%
                    }
                    %>
                    <%
                            if(hasMainFlow){
                    %>
                               <%= outputConn.getName() %> = new <%= outputConn.getName() %>Struct();
                       <%= outputConn.getName() %>.docId = docId_<%= cid %>;
                       <%= outputConn.getName() %>.docContent = docContent_<%= cid %>;
                            <%
                            }
                            %>
                        }catch(
                                 com.marklogic.client.ResourceNotFoundException
                               | com.marklogic.client.ForbiddenUserException
                               | com.marklogic.client.FailedRequestException e
                              ){
                        <%
                        if(hasRejectConn){
                        %>
                           <%= rejectConnName %> = new <%= rejectConnName %>Struct();
                           <%= rejectConnName %>.docId = docId_<%= cid %>;
                           <%= rejectConnName %>.docContent = docContent_<%= cid %>;
                           <%= rejectConnName %>.errMessage = e.getMessage();
                           nb_line_rejected_<%= cid %> ++;
                        <%
                        }else{
                        %>
                           e.printStackTrace();
                        <%
                        }
                         %>
                        }catch(Exception e){
                            e.printStackTrace();
                        }
                        <%
                }//Tag D
            }//Tag C
        }//Tag B
    }//Tag A
%>
