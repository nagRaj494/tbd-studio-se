<%@ jet
imports="
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.utils.NodeUtil
"
 %>

 <%
     CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
     INode node = (INode)codeGenArgument.getArgument();
     String cid = node.getUniqueName();

     boolean reuseConn = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
     String host = ElementParameterParser.getValue(node,"__HOST__");
     String port = ElementParameterParser.getValue(node,"__PORT__");
     String userName = ElementParameterParser.getValue(node,"__USER_NAME__");
     String database = ElementParameterParser.getValue(node,"__DATABASE__");
     String passwordFieldName = "__PASSWORD__";

     if(reuseConn){
       String reusedConn = ElementParameterParser.getValue(node,"__CONNECTION__");
       INode reusedNode = NodeUtil.getNodeByUniqueName(node.getProcess(), reusedConn);
       host = ElementParameterParser.getValue(reusedNode, "__HOST__");
       port = ElementParameterParser.getValue(reusedNode, "__PORT__");
       userName = ElementParameterParser.getValue(reusedNode, "__USER_NAME__");
       database = ElementParameterParser.getValue(reusedNode, "__DATABASE__");
       %>
       <%if(ElementParameterParser.canEncrypt(reusedNode, passwordFieldName)){%>
           final String decryptedPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(reusedNode, passwordFieldName)%>);
       <%}else{%>
           final String decryptedPassword_<%=cid%> = <%= ElementParameterParser.getValue(reusedNode, passwordFieldName)%>;
       <%}%>
       <%
     }else{
     %>
     <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
     <%
     }

     String loadFromDir = ElementParameterParser.getValue(node,"__LOAD_FOLDER__");
     String outputURIReplaceTo = ElementParameterParser.getValue(node,"__OUTPUT_URI_REPLACE__");
     boolean replaceOutputURI = false;
     if(outputURIReplaceTo != null && !"".equals(outputURIReplaceTo) && !"\"\"".equals(outputURIReplaceTo)){
        replaceOutputURI = true;
     }
     String extraMCLPParameters = ElementParameterParser.getValue(node,"__MCLP_EXTRA_PARAMETERS__");
  %>
    String runtimeFileSep_<%= cid %> = System.getProperty("file.separator");
    boolean runOnWindows_<%= cid %> = "\\".equals(runtimeFileSep_<%= cid %>);

    StringBuilder mlcpCmd_<%= cid %> = new StringBuilder();
    String fmtLoadPath_<%= cid %> = <%= loadFromDir %>;
    if(runOnWindows_<%= cid %>){
        mlcpCmd_<%= cid %>.append("cmd /c mlcp.bat");
    }else{
        mlcpCmd_<%= cid %>.append("mlcp.sh");
    }
    if(fmtLoadPath_<%= cid %>.contains(":")){
       fmtLoadPath_<%= cid %> = "/" + fmtLoadPath_<%= cid %>;
    }
    fmtLoadPath_<%= cid %> = (fmtLoadPath_<%= cid %>).replace("\\","/");

    mlcpCmd_<%= cid %>.append(" import -username ");
    mlcpCmd_<%= cid %>.append(<%= userName %>);
    mlcpCmd_<%= cid %>.append(" -password ");
    mlcpCmd_<%= cid %>.append(decryptedPassword_<%= cid %>);
    mlcpCmd_<%= cid %>.append(" -host ");
    mlcpCmd_<%= cid %>.append(<%= host %>);
    mlcpCmd_<%= cid %>.append(" -port ");
    mlcpCmd_<%= cid %>.append(Integer.valueOf(<%= port %>));
    <%
    if(database != null && !"".equals(database) && !"\"\"".equals(database)){
    %>
     mlcpCmd_<%= cid %>.append(" -database ");
     mlcpCmd_<%= cid %>.append(<%= database %>);
    <%
     }
    %>
    <%
    if(replaceOutputURI){
    %>
       String handledDocIdPrefix_<%= cid %> = <%= outputURIReplaceTo %>;
       if(handledDocIdPrefix_<%= cid %>.endsWith("/") || handledDocIdPrefix_<%= cid %>.endsWith("\\")){
          handledDocIdPrefix_<%= cid %> = handledDocIdPrefix_<%= cid %>.substring(0, handledDocIdPrefix_<%= cid %>.length() - 1);
       }
       mlcpCmd_<%= cid %>.append(" -output_uri_replace \"");
       mlcpCmd_<%= cid %>.append(fmtLoadPath_<%= cid %>);
       mlcpCmd_<%= cid %>.append(",'");
       mlcpCmd_<%= cid %>.append(handledDocIdPrefix_<%= cid %>.replace("\\", "/"));
       mlcpCmd_<%= cid %>.append("'\"");
    <%
    }
     %>
    mlcpCmd_<%= cid %>.append(" -input_file_path ");
    mlcpCmd_<%= cid %>.append(fmtLoadPath_<%= cid %>);
    <%
    if(extraMCLPParameters != null && !"".equals(extraMCLPParameters) && !"\"\"".equals(extraMCLPParameters)){
    %>
    mlcpCmd_<%= cid %>.append(" ");
    mlcpCmd_<%= cid %>.append(<%= extraMCLPParameters %>);
    <%
    }
     %>

    Process process_<%=cid %> = Runtime.getRuntime().exec(mlcpCmd_<%= cid %>.toString());
    final java.io.InputStream inputStream_<%= cid %> = process_<%=cid %>.getInputStream();
    final java.io.InputStream errStream_<%= cid %> = process_<%=cid %>.getErrorStream();
    Thread normal_<%=cid %> = new Thread() {
        public void run() {
            try {
                java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream_<%= cid %>));
                String line = "";
                try {
                    while((line = reader.readLine()) != null) {
                       System.out.println(line);
                    }
                } finally {
                     reader.close();
                }
            }catch(java.io.IOException ioe) {
                ioe.printStackTrace();
            }
        }
    };
    normal_<%=cid %>.start();

    Thread error_<%=cid %> = new Thread() {
        public void run() {
            try {
                java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(errStream_<%= cid %>));
                String line = "";
                try {
                    while((line = reader.readLine()) != null) {
                        System.err.println(line);
                    }
                } finally {
                    reader.close();
                }
            } catch(java.io.IOException ioe) {
               ioe.printStackTrace();
            }
        }
    };
    error_<%=cid %>.start();
    process_<%=cid %>.waitFor();
    normal_<%=cid %>.interrupt();
    error_<%=cid %>.interrupt();
