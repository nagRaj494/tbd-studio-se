<%@ jet
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
    	java.util.Map
    	java.util.Set
    	java.util.HashSet
    	java.util.Arrays
	"
%>
<%@ include file="tNeo4jOutput_Neo4JTransactionHelper.javajet"%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    Neo4JTransactionHelper neo4JTransactionHelper = new Neo4JTransactionHelper(node);
    String cid = node.getUniqueName();
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__"); 

    boolean batchImport = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__BATCH_IMPORT__"));
    boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));
    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
    String dbVersion = ElementParameterParser.getValue(node,"__DB_VERSION__");

    if (useExistingConnection) {
        List<? extends INode> nodes = node.getProcess().getGeneratingNodes();
        for(INode targetNode : nodes){
            if (targetNode.getUniqueName().equals(connection)) {
                dbVersion = ElementParameterParser.getValue(targetNode, "__DB_VERSION__");
                break;
            }
        }
    }

    neo4JTransactionHelper.closeTransaction();

    boolean shutdownDb = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__SHUTDOWN_DB__"));

    String dbconn = "";
    if (useExistingConnection) {
        dbconn = "dbService_" + connection;
    } else {
        dbconn = "dbService_" + cid;
    }
    List<Map<String, String>> values = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__VALUES__");


	if (!batchImport && (!useExistingConnection || (useExistingConnection && shutdownDb))) {
		%>
		databaseService_<%=cid%>.shutdown();
		resourceMap.put("finish_<%=cid%>", true);
		<%
	}
	if (batchImport) {
		Set<String> indexNames = new HashSet();
	    for (Map<String, String> value : values) {
	   		String strIndexNames = value.get("INDEX_NAMES");
	   		if (strIndexNames != null && !strIndexNames.isEmpty()) {
	   			indexNames.addAll(Arrays.asList(strIndexNames.split(",")));
	   		}
	    }
	    for (String indexName : indexNames) {
	    	%>
	    	indexInserterMap_<%=cid%>.get(<%=indexName%>).flush();
	    	<%
	    }

	    if ("NEO4J_1_X_X".equals(dbVersion)) {
	        %>
            // Must shutdown database to prevent data corruption after batch importation
	        if(indexProvider_<%=cid%>!=null){
                indexProvider_<%=cid%>.shutdown();
            }
            if(inserter_<%=cid%>!=null){
                inserter_<%=cid%>.shutdown();
            }
            resourceMap.put("finish_<%=cid%>", true); 
            <%
            if (useExistingConnection && !shutdownDb) {
                %>
                databaseService_<%=cid%> = new org.neo4j.kernel.EmbeddedGraphDatabase(storeDir_<%=cid%>);
                globalMap.put("<%=dbconn%>", databaseService_<%=cid%>);
                <%
            }
	    } else { // NEO4J_2_1_X or NEO4J_2_2_X
	        %>
            // Must shutdown database to prevent data corruption after batch importation
            if ((indexProvider_<%=cid%> != null) && (globalMap.containsKey("<%=dbconn%>_indexprovider"))) {
                indexProvider_<%=cid%>.shutdown();
                globalMap.remove("<%=dbconn%>_indexprovider");
            }
            if ((inserter_<%=cid%> != null) && (globalMap.containsKey("<%=dbconn%>_inserter"))) {
                try {
                    inserter_<%=cid%>.shutdown();
                    globalMap.remove("<%=dbconn%>_inserter");
                } catch (IllegalStateException e_<%=cid%>) {
                    System.err.println(e_<%=cid%>.getMessage());
                    // Nothing, the shutdown must be called two times due to multiples components
                }
            }
            resourceMap.put("finish_<%=cid%>", true); 

            <%
            if (useExistingConnection && !shutdownDb) {
                %>
                // if the db connection is still shutted down, reopen it for further components.
                // Otherwise, that mean that another component with the embedded connection has done it previously
                if (((Boolean) globalMap.get("<%=dbconn%>_is_temporary_shutted_down"))) {
                    databaseService_<%=cid%> = new org.neo4j.graphdb.factory.GraphDatabaseFactory().newEmbeddedDatabase((String)globalMap.get("<%=dbconn%>_path"));
                    globalMap.put("<%=dbconn%>", databaseService_<%=cid%>);
                    globalMap.put("<%=dbconn%>_is_temporary_shutted_down", false);
                }
                <%
            }
	    }
	}
%>
globalMap.put("<%=cid%>_NB_LINE", nb_line_<%=cid%>);
