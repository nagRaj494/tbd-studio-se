<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection 
		org.talend.designer.codegen.config.CodeGeneratorArgument 
		org.talend.designer.neo4j.data.Neo4jData 
		org.talend.designer.neo4j.data.Index 
		org.talend.designer.neo4j.data.Relationship 
		org.talend.designer.neo4j.ui.editor.MetadataColumnExt 
		java.util.List 
	" 
%>
<%@ include file="tNeo4jOutput_Neo4JTransactionHelper.javajet"%>
<%@ include file="tNeo4jOutput_Neo4jUtils.javajet"%>
<%@ include file="tNeo4jOutput_Neo4jUtils1_9.javajet"%>
<%@ include file="tNeo4jOutput_Neo4jUtils2_0.javajet"%>
<%@ include file="tNeo4jOutput_Neo4jBatchUtils.javajet"%>
<%@ include file="tNeo4jOutput_Neo4jBatchUtils1_9.javajet"%>
<%@ include file="tNeo4jOutput_Neo4jBatchUtils2_0.javajet"%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    final INode node = (INode)codeGenArgument.getArgument();
    final String cid = node.getUniqueName();
    final String dataAction = ElementParameterParser.getValue(node, "__DATA_ACTION__");
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    boolean batchImport = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__BATCH_IMPORT__"));
    boolean useLabel = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_LABEL__"));
    String neo4jLabel = ElementParameterParser.getValue(node, "__LABEL_NAME__");
    boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));
    String dbVersion = ElementParameterParser.getValue(node,"__DB_VERSION__");
    Neo4JTransactionHelper neo4JTransactionHelper = new Neo4JTransactionHelper(node);

    if (useExistingConnection) {
        String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
        List<? extends INode> nodes = node.getProcess().getGeneratingNodes();
        for(INode targetNode : nodes){
            if (targetNode.getUniqueName().equals(connection)) {
                dbVersion = ElementParameterParser.getValue(targetNode, "__DB_VERSION__");
                break;
            }
        }
    }

    List<IMetadataColumn> columnList = null;
    List<IMetadataTable> metadatas = node.getMetadataList();
    
    if (metadatas != null && metadatas.size() > 0) {
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata != null) {
    		columnList = metadata.getListColumns();
    	}
    }	
    
    List<? extends IConnection> inputs = node.getIncomingConnections();
    List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
    String incomingConnName = null;
    String outgoingConnName = null;
    
    if (inputs.size() > 0) {
    	IConnection in = inputs.get(0);
    	incomingConnName = in.getName();
    }
    
    if (outputs.size() > 0) {
    	IConnection out = outputs.get(0);
    	outgoingConnName = out.getName();
    }
    for (IMetadataColumn column : columnList) {
	    if (outgoingConnName != null) {
	    	%>
	    	<%=outgoingConnName%>.<%=column%> = <%=incomingConnName%>.<%=column%>;
	    	<%
		}
    }

    if (batchImport) {
        Neo4jBatchUtils neo4jBatchUtils;
        if ("NEO4J_1_X_X".equals(dbVersion)) {
            neo4jBatchUtils = new Neo4jBatchUtils1_9(cid, node, incomingConnName, columnList);
        } else { // NEO4J_2_1_X or NEO4J_2_2_X
            neo4jBatchUtils  = new Neo4jBatchUtils2_0(cid, node, incomingConnName, columnList, useLabel, neo4jLabel);
        }

        neo4jBatchUtils.generateNodeBatchInsert();
    } else {
        Neo4jUtils neo4jUtils;
        if ("NEO4J_1_X_X".equals(dbVersion)) {
            neo4jUtils = new Neo4jUtils1_9(cid, node, dataAction, incomingConnName, columnList);
        } else { // NEO4J_2_1_X or NEO4J_2_2_X
            neo4jUtils  = new Neo4jUtils2_0(cid, node, dataAction, incomingConnName, columnList, useLabel, neo4jLabel);
        }
	    if (dataAction.equals("INSERT")) {
		    neo4jUtils.generateNodeInsert();
		} else if (dataAction.equals("INSERT_OR_UPDATE")) {
			neo4jUtils.generateNodeInsertOrUpdate();
		} else if (dataAction.equals("UPDATE")) {
			neo4jUtils.generateNodeUpdate();
		} else if (dataAction.equals("DELETE")) {
			neo4jUtils.generateNodeDelete();
		}
	}
%>

counter_<%=cid%>++;

<%
neo4JTransactionHelper.restartTransaction();
%>

nb_line_<%=cid %>++;