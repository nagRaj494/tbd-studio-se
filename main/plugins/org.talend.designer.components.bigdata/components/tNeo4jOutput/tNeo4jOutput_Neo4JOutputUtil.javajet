<%@ jet 
    imports="
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.codegen.config.CodeGeneratorArgument
        java.util.List
        java.util.Map
        java.util.ArrayList
        java.util.HashSet
        java.util.Arrays
        java.util.Set
    "
%>
<%@ include file="tNeo4jOutput_Neo4JTransactionHelper.javajet"%>
<%
class Neo4JOutputUtil {
    private Neo4JTransactionHelper neo4JTransactionHelper;
    private INode node;
    private String cid;
    private boolean batchImport;
    private String dbConnectionName;
    private String dbVersion;
    private boolean useExistingConnection;
    private boolean remoteServer;

    public Neo4JOutputUtil(INode node) {
        this.node = node;
        this.cid = node.getUniqueName();
        this.neo4JTransactionHelper = new Neo4JTransactionHelper(node);

        this.batchImport = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__BATCH_IMPORT__"));
        this.useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));

        if (useExistingConnection) {
            String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
            this.dbConnectionName = "dbService_" + connection; 
            for(INode targetNode : node.getProcess().getNodesOfType("tNeo4jConnection")){
                if (targetNode.getUniqueName().equals(connection)) {
                    this.dbVersion = ElementParameterParser.getValue(targetNode, "__DB_VERSION__");
                    this.remoteServer = "true".equalsIgnoreCase(ElementParameterParser.getValue(targetNode, "__REMOTE_SERVER__"));
                    break;
                }
            }
        } else {
            this.dbConnectionName = "dbService_" + cid;
            this.dbVersion = ElementParameterParser.getValue(node,"__DB_VERSION__");
            this.remoteServer = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REMOTE_SERVER__"));
        }
    }


    public void createDatabaseService() {
        if (this.useExistingConnection) {
            %>
            org.neo4j.graphdb.GraphDatabaseService databaseService_<%=cid%> = (org.neo4j.graphdb.GraphDatabaseService) globalMap.get("<%=dbConnectionName%>");
            <%
        } else {
            if (this.remoteServer) {
                String serverUrl = ElementParameterParser.getValue(node, "__SERVER_URL__");
                boolean setUsername = ElementParameterParser.getBooleanValue(node, "__SET_USERNAME__");
                String username = ElementParameterParser.getValue(node, "__USERNAME__");
                String passwordFieldName = "__PASSWORD__";
                if ((setUsername) || ((!"NEO4J_1_X_X".equals(dbVersion)) && (!"NEO4J_2_1_X".equals(dbVersion)))) {
                    %>
                    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
                    org.neo4j.graphdb.GraphDatabaseService databaseService_<%=cid%> = new org.neo4j.rest.graphdb.RestGraphDatabase(<%=serverUrl%>, <%=username%>, decryptedPassword_<%=cid%>);
                    <%
                } else {
                    %>
                    org.neo4j.graphdb.GraphDatabaseService databaseService_<%=cid%> = new org.neo4j.rest.graphdb.RestGraphDatabase(<%=serverUrl%>);
                    <%
                }
            } else {
                String databasePath = ElementParameterParser.getValue(node, "__DATABASE_PATH__");
                %>
                org.neo4j.graphdb.GraphDatabaseService databaseService_<%=cid%> = null;
                try{
                		databaseService_<%=cid%> = new org.neo4j.graphdb.factory.GraphDatabaseFactory().newEmbeddedDatabase(<%=databasePath%>);
                }catch(java.lang.RuntimeException e){
							throw new java.lang.RuntimeException("There may be inconsistency between the selected database version and the actual database version. Please check.", e);
                }
                <%
            }
        }
    }

    private void writeBatchModeVersion1_9(Set<String> indexNames, List<String> autoIndexedColumns) {
        %>
        if (databaseService_<%=cid%> instanceof org.neo4j.kernel.EmbeddedGraphDatabase) {
            org.neo4j.kernel.EmbeddedGraphDatabase db_<%=cid%> = (org.neo4j.kernel.EmbeddedGraphDatabase) databaseService_<%=cid%>;
            storeDir_<%=cid%> = db_<%=cid%>.getStoreDir();
            db_<%=cid%>.shutdown();
            inserter_<%=cid%> = org.neo4j.unsafe.batchinsert.BatchInserters.inserter(db_<%=cid%>.getStoreDir(), importProperties_<%=cid%>);
        } else {
            throw new UnsupportedOperationException("Batch import is not supported with database server edition");
        }
        indexProvider_<%=cid%> = new org.neo4j.index.lucene.unsafe.batchinsert.LuceneBatchInserterIndexProvider(inserter_<%=cid%>);
        resourceMap.put("inserter_<%=cid%>", inserter_<%=cid%>);
        resourceMap.put("indexProvider_<%=cid%>", indexProvider_<%=cid%>);
        java.util.Map<String, org.neo4j.unsafe.batchinsert.BatchInserterIndex> indexInserterMap_<%=cid%> = new java.util.HashMap<String, org.neo4j.unsafe.batchinsert.BatchInserterIndex>();
        <%
        for (String indexName : indexNames) {
            %>
            indexInserterMap_<%=cid%>.put(<%=indexName%>, indexProvider_<%=cid%>.nodeIndex(<%=indexName%>, org.neo4j.helpers.collection.MapUtil.stringMap("type", "exact")));
            <%
        }

        // Auto index configuration
        if (autoIndexedColumns.size() > 0) {
            %>
            org.neo4j.graphdb.index.AutoIndexer<org.neo4j.graphdb.Node> autoIndexer_<%=cid%> = databaseService_<%=cid%>.index().getNodeAutoIndexer();
            autoIndexer_<%=cid%>.setEnabled(true);
            <%
        }
        for (String autoIndexedColumn : autoIndexedColumns) {
            %>
            autoIndexer_<%=cid%>.startAutoIndexingProperty("<%=autoIndexedColumn%>");
            <%
        }
        neo4JTransactionHelper.startTransaction();
    }

    private void writeBatchModeVersion2_1(Set<String> indexNames, List<String> autoIndexedColumns) {
        %>
        if (databaseService_<%=cid%> instanceof org.neo4j.kernel.EmbeddedGraphDatabase) {
            if (!globalMap.containsKey("<%=dbConnectionName%>_inserter")) {
                org.neo4j.kernel.EmbeddedGraphDatabase db_<%=cid%> = (org.neo4j.kernel.EmbeddedGraphDatabase) databaseService_<%=cid%>;
                storeDir_<%=cid%> = db_<%=cid%>.getStoreDir();
                db_<%=cid%>.shutdown();
                inserter_<%=cid%> = org.neo4j.unsafe.batchinsert.BatchInserters.inserter(db_<%=cid%>.getStoreDir(), importProperties_<%=cid%>);
                globalMap.put("<%=dbConnectionName%>_inserter", inserter_<%=cid%>);
                globalMap.put("<%=dbConnectionName%>_is_temporary_shutted_down", true);
            } else {
               inserter_<%=cid%> = (org.neo4j.unsafe.batchinsert.BatchInserter) globalMap.get("<%=dbConnectionName%>_inserter");
            }
        } else {
            throw new UnsupportedOperationException("Batch import is not supported with database server edition");
        }

        if (!globalMap.containsKey("<%=dbConnectionName%>_indexprovider")) {
            indexProvider_<%=cid%> = new org.neo4j.index.lucene.unsafe.batchinsert.LuceneBatchInserterIndexProvider(inserter_<%=cid%>);
            globalMap.put("<%=dbConnectionName%>_indexprovider", indexProvider_<%=cid%>);
        } else {
            indexProvider_<%=cid%> = (org.neo4j.unsafe.batchinsert.BatchInserterIndexProvider) globalMap.get("<%=dbConnectionName%>_indexprovider");
        }
        resourceMap.put("inserter_<%=cid%>", inserter_<%=cid%>);
        resourceMap.put("indexProvider_<%=cid%>", indexProvider_<%=cid%>);
        java.util.Map<String, org.neo4j.unsafe.batchinsert.BatchInserterIndex> indexInserterMap_<%=cid%> = new java.util.HashMap<String, org.neo4j.unsafe.batchinsert.BatchInserterIndex>();

        <%
        for (String indexName : indexNames) {
            %>
            indexInserterMap_<%=cid%>.put(<%=indexName%>, indexProvider_<%=cid%>.nodeIndex(<%=indexName%>, org.neo4j.helpers.collection.MapUtil.stringMap("type", "exact")));
            <%
        }

        // There is no autoindex in batch mode, so we did it by hand.
        if (autoIndexedColumns.size() > 0) {
            %>
            org.neo4j.unsafe.batchinsert.BatchInserterIndex autoindex_<%=cid%> = indexProvider_<%=cid%>.nodeIndex("node_auto_index", org.neo4j.helpers.collection.MapUtil.stringMap("type", "exact"));
            long autoindex_id_<%=cid%>  = inserter_<%=cid%>.createNode(null);
            java.util.Map<String, Object> autoindex_props_<%=cid%> = new java.util.HashMap<String, Object>();
            <%
        }
    }

    private void writeBatchModeSpring(Set<String> indexNames, List<String> autoIndexedColumns) {
        %>
        if (databaseService_<%=cid%> instanceof org.neo4j.kernel.impl.factory.GraphDatabaseFacade) {
            if (!globalMap.containsKey("<%=dbConnectionName%>_inserter")) {
                org.neo4j.kernel.impl.factory.GraphDatabaseFacade db_<%=cid%> = (org.neo4j.kernel.impl.factory.GraphDatabaseFacade) databaseService_<%=cid%>;
                storeDir_<%=cid%> = db_<%=cid%>.getStoreDir();
                db_<%=cid%>.shutdown();
                inserter_<%=cid%> = org.neo4j.unsafe.batchinsert.BatchInserters.inserter(db_<%=cid%>.getStoreDir(), importProperties_<%=cid%>);
                globalMap.put("<%=dbConnectionName%>_inserter", inserter_<%=cid%>);
                globalMap.put("<%=dbConnectionName%>_is_temporary_shutted_down", true);
            } else {
               inserter_<%=cid%> = (org.neo4j.unsafe.batchinsert.BatchInserter) globalMap.get("<%=dbConnectionName%>_inserter");
            }
        } else {
            throw new UnsupportedOperationException("Batch import is not supported with database server edition");
        }

        if (!globalMap.containsKey("<%=dbConnectionName%>_indexprovider")) {
            indexProvider_<%=cid%> = new org.neo4j.index.lucene.unsafe.batchinsert.LuceneBatchInserterIndexProvider(inserter_<%=cid%>);
            globalMap.put("<%=dbConnectionName%>_indexprovider", indexProvider_<%=cid%>);
        } else {
            indexProvider_<%=cid%> = (org.neo4j.unsafe.batchinsert.BatchInserterIndexProvider) globalMap.get("<%=dbConnectionName%>_indexprovider");
        }
        resourceMap.put("inserter_<%=cid%>", inserter_<%=cid%>);
        resourceMap.put("indexProvider_<%=cid%>", indexProvider_<%=cid%>);
        java.util.Map<String, org.neo4j.unsafe.batchinsert.BatchInserterIndex> indexInserterMap_<%=cid%> = new java.util.HashMap<String, org.neo4j.unsafe.batchinsert.BatchInserterIndex>();

        <%
        for (String indexName : indexNames) {
            %>
            indexInserterMap_<%=cid%>.put(<%=indexName%>, indexProvider_<%=cid%>.nodeIndex(<%=indexName%>, org.neo4j.helpers.collection.MapUtil.stringMap("type", "exact")));
            <%
        }

        // There is no autoindex in batch mode, so we did it by hand.
        if (autoIndexedColumns.size() > 0) {
            %>
            org.neo4j.unsafe.batchinsert.BatchInserterIndex autoindex_<%=cid%> = indexProvider_<%=cid%>.nodeIndex("node_auto_index", org.neo4j.helpers.collection.MapUtil.stringMap("type", "exact"));
            long autoindex_id_<%=cid%>  = inserter_<%=cid%>.createNode(null);
            java.util.Map<String, Object> autoindex_props_<%=cid%> = new java.util.HashMap<String, Object>();
            <%
        }
    }

    private void writeBatchMode(Set<String> indexNames, List<String> autoIndexedColumns) {
        String nodeMappedMemory = ElementParameterParser.getValue(node, "__NODE_MAPPED_MEMORY__");
        String relationshipMappedMemory = ElementParameterParser.getValue(node, "__RELATIONSHIP_MAPPED_MEMORY__");
        String propertyMappedMemory = ElementParameterParser.getValue(node, "__PROPERTY_MAPPED_MEMORY__");
        String stringsMappedMemory = ElementParameterParser.getValue(node, "__STRINGS_MAPPED_MEMORY__");
        String arraysMappedMemory = ElementParameterParser.getValue(node, "__ARRAYS_MAPPED_MEMORY__");
        %>
        java.util.Map<String, String> importProperties_<%=cid%> = new java.util.HashMap<String, String>();
        importProperties_<%=cid%>.put("neostore.nodestore.db.mapped_memory", <%=nodeMappedMemory%>);
        importProperties_<%=cid%>.put("neostore.relationshipstore.db.mapped_memory", <%=relationshipMappedMemory%>);
        importProperties_<%=cid%>.put("neostore.propertystore.db.mapped_memory", <%=propertyMappedMemory%>);
        importProperties_<%=cid%>.put("neostore.propertystore.db.strings.mapped_memory", <%=stringsMappedMemory%>);
        importProperties_<%=cid%>.put("neostore.propertystore.db.arrays.mapped_memory", <%=arraysMappedMemory%>);
        String storeDir_<%=cid%> = "";
        org.neo4j.unsafe.batchinsert.BatchInserter inserter_<%=cid%> = null;
        org.neo4j.unsafe.batchinsert.BatchInserterIndexProvider indexProvider_<%=cid%> = null;

        <%
        if ("NEO4J_1_X_X".equals(dbVersion)) {
            writeBatchModeVersion1_9(indexNames, autoIndexedColumns);
        } else if (("NEO4J_2_1_X".equals(dbVersion)) || ("NEO4J_2_2_X".equals(dbVersion))) { // NEO4J_2_X before moving to spring framework
            writeBatchModeVersion2_1(indexNames, autoIndexedColumns);
        } else { // NEO4J_2_3 and more using spring framework
            writeBatchModeSpring(indexNames, autoIndexedColumns);
        }
    }

    private void writeNormalMode(Set<String> indexNames, List<String> autoIndexedColumns) {
        %>
        java.util.Map<String, org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node>> indexNodeMap_<%=cid%> = new java.util.HashMap<String,org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node>>();
        <%
        neo4JTransactionHelper.startEmbeddedTransaction();

        for (String indexName : indexNames) {
            %>
            indexNodeMap_<%=cid%>.put(<%=indexName%>, databaseService_<%=cid%>.index().forNodes(<%=indexName%>));
            <%
        }

        neo4JTransactionHelper.closeEmbeddedTransaction();

        // Auto index configuration
        if (autoIndexedColumns.size() > 0) {
            %>
            org.neo4j.graphdb.index.AutoIndexer<org.neo4j.graphdb.Node> autoIndexer_<%=cid%> = databaseService_<%=cid%>.index().getNodeAutoIndexer();
            autoIndexer_<%=cid%>.setEnabled(true);
            <%
        }
        for (String autoIndexedColumn : autoIndexedColumns) {
            %>
            autoIndexer_<%=cid%>.startAutoIndexingProperty("<%=autoIndexedColumn%>");
            <%
        }
        neo4JTransactionHelper.startTransaction();
    }
}
%>


