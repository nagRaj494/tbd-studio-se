<%@ jet 
	imports="
	   	org.talend.core.model.metadata.IMetadataColumn
	    org.talend.core.model.metadata.IMetadataTable
	    org.talend.core.model.metadata.types.JavaType
	    org.talend.core.model.metadata.types.JavaTypesManager
	    org.talend.core.model.process.ElementParameterParser
	    org.talend.core.model.process.IConnection
	    org.talend.core.model.process.INode
	    org.talend.designer.codegen.config.CodeGeneratorArgument
	    org.talend.core.model.process.IConnectionCategory
	    
		java.util.List
		java.util.Map
	" 
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
	
    String cid = node.getUniqueName();
    List<Map<String, String>> valueColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__VALUE_COLUMNS__");
    List<String> valueColumnNames = new java.util.ArrayList<String>();
    
    boolean useExistingConn = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    boolean outPutKey = "true".equals(ElementParameterParser.getValue(node,"__OUTPUT_KEY_COLUMN__"));
    
    String bucket = ElementParameterParser.getValue(node,"__BUCKET__");
    String key = ElementParameterParser.getValue(node,"__KEY__");
    String outKeyCol = ElementParameterParser.getValue(node,"__OUTPUT_KEY__");
    
    List<IMetadataTable> metadatas = node.getMetadataList();
  	List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
  	String firstConnName = "";
  	if (outputs.size() > 0){
		IConnection out = outputs.get(0);
		if(out!=null && out.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			firstConnName = out.getName();
		}
    }
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
    java.util.List<IMetadataColumn> tempValuesColumns = new java.util.ArrayList<IMetadataColumn>();
	if(metadatas != null && metadatas.size() > 0){
      	IMetadataTable metadata = metadatas.get(0);
      	if(metadata != null){
      		for(int i=0;i<valueColumns.size();i++){
	    		Map<String, String> columnValue = valueColumns.get(i);
				valueColumnNames.add(columnValue.get("SCHEMA_COLUMN"));
			}
			for(IMetadataColumn inputCol : metadata.getListColumns()){
				if(valueColumnNames.contains(inputCol.getLabel()) || (outPutKey && inputCol.getLabel().equals(outKeyCol))){
					tempValuesColumns.add(inputCol);
				}
			}
%>
	com.basho.riak.client.IRiakClient client_<%=cid%> = null;
	int nb_line_<%=cid%> = 0;
<%
			if(useExistingConn){
				String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
%>
	client_<%=cid%> = (com.basho.riak.client.IRiakClient)globalMap.get("client_<%=connection%>");
<%
	if(isLog4jEnabled){
%>	
		if(client_<%=cid%> != null) {
			log.info("<%=cid%> - Get an existing client from " + "<%=connection%>" + ".");
		}
<%
	}
			}else{
%>
	try{
	
	<%@ include file="../tRiakConnection/tRiak_connection_inc.javajet"%>
	
<%
    		}
%>
		com.basho.riak.client.bucket.Bucket bucket_<%=cid%> = client_<%=cid%>.fetchBucket(<%=bucket%>).execute();
		java.util.List<String> keys_<%=cid%>=new java.util.ArrayList<String>();
<%
		if(key!=null && !"".equals(key) && !"\"\"".equals(key)){
%>
		keys_<%=cid%>.add(<%=key%>);
<%
		}else{
%>
		com.basho.riak.client.query.StreamingOperation<String> keysStreamOpts_<%=cid%> = bucket_<%=cid%>.keys();
		keys_<%=cid%> = keysStreamOpts_<%=cid%>.getAll();
<%
		}
		log4jFileUtil.startRetriveDataInfo();
%>
		for(String key_<%=cid%>:keys_<%=cid%>){
			nb_line_<%=cid%>++;
			globalMap.put("<%=cid%>_CURRENT_KEY", key_<%=cid%>);
<%
			if(firstConnName.length()>0) {
%>
				Object valueCol_<%=cid%>=null;
				java.util.Map valueObj_<%=cid%>=null;
				try{
					valueObj_<%=cid%>= bucket_<%=cid%>.fetch(key_<%=cid%>,java.util.HashMap.class).execute();
				}catch(java.lang.Exception e_<%=cid%>){
				}
				if(valueObj_<%=cid%>!=null){
<%				
				for (IMetadataColumn column:tempValuesColumns) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					if(outPutKey && outKeyCol!=null && outKeyCol.equals(column.getLabel())){
%>
					valueCol_<%=cid%> = key_<%=cid%>;
<%
					}else{
%>
					valueCol_<%=cid%>=valueObj_<%=cid%>.get("<%=column.getOriginalDbColumnName()%>");
<%
					}
          			if(javaType == JavaTypesManager.OBJECT) {
%>
					<%=firstConnName %>.<%=column.getLabel() %> = valueCol_<%=cid%>;
<%
          			}else{
%>
					if(valueCol_<%=cid%>!=null ) {
<%
						if(javaType == JavaTypesManager.DATE) {
%>
						if(valueCol_<%=cid%> instanceof Long){
							<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(new java.util.Date((Long)valueCol_<%=cid%>), <%= patternValue %>);
						}else{
							<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
						}
<%
						}else if(javaType == JavaTypesManager.BYTE_ARRAY) {
%>
						<%=firstConnName %>.<%=column.getLabel() %> = (new sun.misc.BASE64Decoder()).decodeBuffer(valueCol_<%=cid%>.toString());
<%
						} else if(javaType == JavaTypesManager.STRING){
%>
						<%=firstConnName %>.<%=column.getLabel() %> = valueCol_<%=cid%>.toString();
<%
						} else {
%>
						<%=firstConnName %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate %>(valueCol_<%=cid%>.toString());
<%
						}
%>
					}else{
						<%=firstConnName %>.<%=column.getLabel() %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
					}
<%
          			}
				}
%>
				}
<%
				log4jFileUtil.debugRetriveData(node);
			}
    	}
    }
%>