<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.Map
		java.util.List
	"
%>

	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
	
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String distribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
	String hadoopVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");

	org.talend.hadoop.distribution.component.HDFSComponent hdfsDistrib = null;
	try {
		hdfsDistrib = (org.talend.hadoop.distribution.component.HDFSComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(distribution, hadoopVersion);
	} catch (java.lang.Exception e) {
		e.printStackTrace();
		return "";
	}

	boolean isCustom = hdfsDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;

	String auth = ElementParameterParser.getValue(node, "__AUTHENTICATION_MODE__");
	String fsDefalutName = "fs.default.name";
	String fsDefaultName = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
	String username = ElementParameterParser.getValue(node, "__USERNAME__");
	boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
	String kerberosPrincipal = ElementParameterParser.getValue(node, "__NAMENODE_PRINCIPAL__");
	boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
	String userPrincipal = ElementParameterParser.getValue(node, "__PRINCIPAL__");
	String keytabPath = ElementParameterParser.getValue(node, "__KEYTAB_PATH__");
    boolean mrUseDatanodeHostname = "true".equals(ElementParameterParser.getValue(node, "__USE_DATANODE_HOSTNAME__"));
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    boolean configureFromClassPath = "true".equals(ElementParameterParser.getValue(node, "__CONFIGURATIONS_FROM_CLASSPATH__"));
	
	List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");
	
	boolean useMapRTicket = ElementParameterParser.getBooleanValue(node, "__USE_MAPRTICKET__");
    String mapRTicketCluster = ElementParameterParser.getValue(node, "__MAPRTICKET_CLUSTER__");
    String mapRTicketDuration = ElementParameterParser.getValue(node, "__MAPRTICKET_DURATION__");

    boolean setMapRHomeDir = ElementParameterParser.getBooleanValue(node, "__SET_MAPR_HOME_DIR__");
    String mapRHomeDir = ElementParameterParser.getValue(node, "__MAPR_HOME_DIR__");

    boolean setMapRHadoopLogin = ElementParameterParser.getBooleanValue(node, "__SET_HADOOP_LOGIN__");
    String mapRHadoopLogin = ElementParameterParser.getValue(node, "__HADOOP_LOGIN__");
    
    boolean useHDFSEnc = ElementParameterParser.getBooleanValue(node, "__USE_HDFS_ENCRYPTION__");
    String hdfsKMS = ElementParameterParser.getValue(node, "__HDFS_ENCRYPTION_KEY_PROVIDER__");

    log4jFileUtil.componentStartInfo(node);
	// BEGIN IF01
	if(configureFromClassPath){
%>
		// Add HADOOP_CONF_DIR to the classpath if it's present
		String hadoopConfDir_<%=cid%> = System.getenv("HADOOP_CONF_DIR");
		if(hadoopConfDir_<%=cid%> != null){
			java.net.URLClassLoader sysloader = (java.net.URLClassLoader) ClassLoader.getSystemClassLoader();
			java.lang.reflect.Method method = java.net.URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { java.net.URL.class });
			method.setAccessible(true);
			method.invoke(sysloader,new Object[] { new java.io.File(hadoopConfDir_<%=cid%>).toURI().toURL() });
		}
		org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration();

		// Adding any hdfs-site.xml file
		conf_<%=cid%>.addResource("hdfs-site.xml");

		// Adding any talend-site.xml
		conf_<%=cid%>.addResource("talend-site.xml");
		String tldKerberosAuth_<%=cid%> = conf_<%=cid%>.get("talend.kerberos.authentication", "");
		String tldKerberosKtPrincipal_<%=cid%> = conf_<%=cid%>.get("talend.kerberos.keytab.principal", "");
		String tldKerberosKtPath_<%=cid%> = conf_<%=cid%>.get("talend.kerberos.keytab.path", "");
<%
		// log all loaded xxx-site.xml files and all of the key value pairs for debugging
		if(isLog4jEnabled){
		%>
			log.debug("CLASSPATH_CONFIGURATION_<%=cid%>" + " Loaded : " + conf_<%=cid%>);
			log.debug("CLASSPATH_CONFIGURATION_<%=cid%>" + " key value pairs : ");
			java.util.Iterator<java.util.Map.Entry<String,String>> iterator_log_<%=cid%> = conf_<%=cid%>.iterator();
			while(iterator_log_<%=cid%>.hasNext()){
				java.util.Map.Entry<String,String> property = iterator_log_<%=cid%>.next();
				log.debug("CLASSPATH_CONFIGURATION_<%=cid%> " + property.getKey() + " : " + property.getValue());
			}
		<%
		}

		if((!isCustom && hdfsDistrib.doSupportGroup()) || (isCustom && "UGI".equals(auth))){
%>
			conf_<%=cid%>.set("hadoop.job.ugi",conf_<%=cid%>.get("talend.hadoop.user.name", "")+","+conf_<%=cid%>.get("talend.hadoop.group.name", ""));
<%
		}
%>

		if(org.apache.hadoop.security.UserGroupInformation.isSecurityEnabled()){
			// Keytab configurations
			if(tldKerberosAuth_<%=cid%>.equalsIgnoreCase("keytab")){
				org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(tldKerberosKtPrincipal_<%=cid%>, tldKerberosKtPath_<%=cid%>);
			}
		}
<%
	}else{
%>
		org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration();
		conf_<%=cid%>.set("<%=fsDefalutName%>", <%=fsDefaultName%>);
<%

		if (hdfsDistrib.doSupportUseDatanodeHostname() && mrUseDatanodeHostname) {
%>
			conf_<%=cid%>.set("dfs.client.use.datanode.hostname", "true");
<%
		}
		if((!isCustom && hdfsDistrib.doSupportGroup()) || (isCustom && "UGI".equals(auth))){
			String group = ElementParameterParser.getValue(node, "__GROUP__");
%>
			conf_<%=cid%>.set("hadoop.job.ugi",<%=username%>+","+<%=group%>);
<%
		}
		
		if((!isCustom && hdfsDistrib.doSupportKerberos() && useKrb) || (isCustom && "KRB".equals(auth))) {
            if ((isCustom || hdfsDistrib.doSupportMapRTicket()) && useMapRTicket) {
                %>
                System.setProperty("pname", "MapRLogin");
                System.setProperty("https.protocols", "TLSv1.2");
                System.setProperty("mapr.home.dir", <%=setMapRHomeDir ? mapRHomeDir : "\"/opt/mapr\"" %>);
                System.setProperty("hadoop.login", <%=setMapRHadoopLogin ? mapRHadoopLogin : "\"kerberos\""%>);
                <%
            }
            %>
			conf_<%=cid%>.set("dfs.namenode.kerberos.principal", <%=kerberosPrincipal%>);
<%
			if(useKeytab) {
%>
				org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(<%=userPrincipal%>, <%=keytabPath%>);
<%
			}
            if ((isCustom || hdfsDistrib.doSupportMapRTicket()) && useMapRTicket) {
                %>
                com.mapr.login.client.MapRLoginHttpsClient maprLogin_<%=cid%> = new com.mapr.login.client.MapRLoginHttpsClient();
                maprLogin_<%=cid%>.getMapRCredentialsViaKerberos(<%=mapRTicketCluster%>, <%=mapRTicketDuration%>);
                <%
            }
		} else { // no kerberos
		    if ((isCustom || hdfsDistrib.doSupportMapRTicket()) && useMapRTicket) {
                String passwordFieldName = "__MAPRTICKET_PASSWORD__";
                %>
                System.setProperty("pname", "MapRLogin");
                System.setProperty("https.protocols", "TLSv1.2");
                System.setProperty("mapr.home.dir", <%=setMapRHomeDir ? mapRHomeDir : "\"/opt/mapr\"" %>);
                com.mapr.login.client.MapRLoginHttpsClient maprLogin_<%=cid%> = new com.mapr.login.client.MapRLoginHttpsClient();
                <%
                if (setMapRHadoopLogin) {
                    %>
                    System.setProperty("hadoop.login", <%=mapRHadoopLogin%>);
                    <%
                } else {
                    %>
                    maprLogin_<%=cid%>.setCheckUGI(false);
                    <%
                }
                %>
                <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

                <%
                if(hdfsDistrib.doSupportMaprTicketV52API()){
					%>
                	maprLogin_<%=cid%>.getMapRCredentialsViaPassword(<%=mapRTicketCluster%>, <%=username%>, decryptedPassword_<%=cid%>, <%=mapRTicketDuration%>, "");
                	<%
                } else {
                	%>
                	maprLogin_<%=cid%>.getMapRCredentialsViaPassword(<%=mapRTicketCluster%>, <%=username%>, decryptedPassword_<%=cid%>, <%=mapRTicketDuration%>);
                	<%
                }

            }
		}
		if(useHDFSEnc){
			%>
			conf_<%=cid%>.set("hadoop.security.key.provider.path", <%=hdfsKMS%>);
			conf_<%=cid%>.set("dfs.encryption.key.provider.uri", <%=hdfsKMS%>);
			<%
		}
	%>
	
	<%
	}
	if(hadoopProps.size() > 0){
			for(Map<String, String> item : hadoopProps){
%>
		conf_<%=cid%>.set(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
<% 
			} 
	// END IF01
	}
%>
	org.apache.hadoop.security.UserGroupInformation.setConfiguration(conf_<%=cid%>);
	globalMap.put("conn_<%=cid%>",conf_<%=cid%>);
