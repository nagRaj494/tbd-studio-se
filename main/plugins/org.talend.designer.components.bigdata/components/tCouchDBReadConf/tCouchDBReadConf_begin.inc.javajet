<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		
		java.util.Map
		java.util.List
	" 
%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
    String dbname = ElementParameterParser.getValue(node, "__DATABASE__");
    String dbuser = ElementParameterParser.getValue(node, "__USERNAME__");
    String dbpass = ElementParameterParser.getValue(node, "__PASSWORD__");
    boolean authentication="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REQUIRED_AUTHENTICATION__"));
    if (!authentication){
    	dbuser = null;
    	dbpass = null;
    }
    
    String passwordFieldName = "__PASSWORD__";
    %>
 	String decryptedPassword_<%=cid%> = null;
 	<%if(!authentication) {
 	   //do nothing
    } else if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {%> 
    	decryptedPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
    <%} else {%>
    	decryptedPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
    <%}    
    
    
    boolean useTriggerReplicate="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_TRIGGER_REPLICATE__"));
    String dbport  	= ElementParameterParser.getValue(node, "__PORT__");
    List<Map<String,String>> replicaTargetDB= (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__REPLICATE_TARGET_DB__");
    boolean useExistingConn = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
    
   
    boolean isQueryByView = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__QUERY_BY_VIEW__"));
    boolean include_docs = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__INCLUDE_DOCS__"));
    
    Object startKey = ElementParameterParser.getValue(node,"__STARTKEY__");
    Object endKey = ElementParameterParser.getValue(node,"__ENDKEY__");
    String startKeyDocId = ElementParameterParser.getValue(node,"__STARTKEY_DOCID__");
    String endKeyDocId = ElementParameterParser.getValue(node,"__ENDKEY_DOCID__");
    boolean descending = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__DESCENDING__"));
    boolean isAddOptions = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__ADD_OPTION__"));
    
    String docName = ElementParameterParser.getValue(node, "__DOC__");
    String viewName = ElementParameterParser.getValue(node, "__VIEW__");
    String doc_action = ElementParameterParser.getValue(node,"__DOC_ACTION__");
    String view_action = ElementParameterParser.getValue(node,"__VIEW_ACTION__");
    String map = ElementParameterParser.getValue(node,"__MAP__");
    map = map.replaceAll("\n"," ");
    map = map.replaceAll("\r"," ");
    boolean isReduce = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__ISREDUCE__"));
    String reduce = ElementParameterParser.getValue(node,"__REDUCE__");
    reduce = reduce.replaceAll("\n"," ");
    reduce = reduce.replaceAll("\r"," ");
    boolean isGroup = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__GROUP__"));
    String group_level = ElementParameterParser.getValue(node,"__GROUP_LEVEL__");
    
    String limit = ElementParameterParser.getValue(node, "__LIMIT__");
    
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    
    List<IMetadataTable> metadatas = node.getMetadataList();
  	List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
  	String firstConnName = "";
  	if (outputs.size() > 0){
		IConnection out = outputs.get(0);
		if(out!=null && out.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			firstConnName = out.getName();
		}
    }
	%>
	org.lightcouch.CouchDbClient client_<%=cid%> = null;
	com.google.gson.JsonParser jsonParse_<%=cid%> = new com.google.gson.JsonParser();
	
	<%
	if(useExistingConn){
	%>
		client_<%=cid%> = (org.lightcouch.CouchDbClient)globalMap.get("client_<%=connection%>");
		<%
		if(isLog4jEnabled){
		%>	
			if(client_<%=cid%> != null) {
				log.info("<%=cid%> - Get an existing client from " + "<%=connection%>" + ".");
			}
		<%
		}
	}else{
	%>
		client_<%=cid%> = new org.lightcouch.CouchDbClient(<%=dbname%>, true, "http", <%=dbhost%>, <%=dbport%>, <%=dbuser%>, decryptedPassword_<%=cid%>);
		<%
		if(useTriggerReplicate){
		%>
			org.lightcouch.ReplicationResult result_<%=cid%> = null;
			List<org.lightcouch.Replication> replications_<%=cid%> = new java.util.ArrayList<org.lightcouch.Replication>();
			<%
			int index= 0;
			for(Map<String,String> targetDB:replicaTargetDB){
				String targetDBName=targetDB.get("TARGET_DB_NAME");
				boolean isCreateTargetDB = "true".equalsIgnoreCase(targetDB.get("CREATE_TARGET"));
				boolean isContinuous = "true".equalsIgnoreCase(targetDB.get("CONTINUOUS"));
				boolean isCancel = "true".equalsIgnoreCase(targetDB.get("CANCEL_REPLICATE"));
				%>
				result_<%=cid%> = client_<%=cid%>.replication()
				  .source(<%=dbname%>)
				  .target(<%=targetDBName%>) 
				  .createTarget(<%=isCreateTargetDB%>)
				  .continuous(<%=isContinuous%>)
				  .trigger();
				<%
				if(isContinuous && isCancel){
				%>
					if(result_<%=cid%>.isOk()){
						org.lightcouch.Replication replication_<%=cid%>_<%=index%>=
						client_<%=cid%>.replication()
						  .source(<%=dbname%>)
						  .target(<%=targetDBName%>)
						  .createTarget(<%=isCreateTargetDB%>)
						  .continuous(<%=isContinuous%>)
						  .cancel(<%=isCancel%>);
						replications_<%=cid%>.add(replication_<%=cid%>_<%=index%>);
					}
					<%
					index++;
				}
			}
		}
	}
	%>
		int nb_line_<%=cid %> = 0;
	<%
	log4jFileUtil.startRetriveDataInfo();
  	if(metadatas != null && metadatas.size() > 0){
		IMetadataTable metadata = metadatas.get(0);
      	if(metadata != null){
      	%>	
      		java.util.Map<String,Object> options_<%=cid%>=new java.util.HashMap<String,Object>();
      		String viewPath_<%=cid%> = "_all_docs";
      		<%
  			if(isQueryByView){
			%>
				viewPath_<%=cid%> = <%=docName%>+"/"+<%=viewName%>;
				String desDocId_<%=cid%> = "_design/"+<%=docName%>;
				org.lightcouch.DesignDocument designDoc_<%=cid%>=null;
				try{
					designDoc_<%=cid%> = client_<%=cid%>.find(org.lightcouch.DesignDocument.class,desDocId_<%=cid%>);
				}catch(java.lang.Exception e_<%=cid%>){
				}
				java.util.Map<String, org.lightcouch.DesignDocument.MapReduce> views_<%=cid%> = null;
				org.lightcouch.DesignDocument.MapReduce mapReduce_<%=cid%> = new org.lightcouch.DesignDocument.MapReduce();
				mapReduce_<%=cid%>.setMap(<%=map%>);
				<%
				if(isReduce){
				%>
					mapReduce_<%=cid%>.setReduce(<%=reduce%>);
				<%
				}
				//A1:create design document or view
				if(!"NONE".equals(doc_action) && !"CREATE_IF_NOT_EXISTS".equals(doc_action)){
					if("DROP_CREATE".equals(doc_action)){
					%>
						client_<%=cid%>.remove(designDoc_<%=cid%>);
					<%
					}else if("DROP_IF_EXISTS_AND_CREATE".equals(doc_action)){
					%>
						if(designDoc_<%=cid%> != null){
							client_<%=cid%>.remove(designDoc_<%=cid%>);
						}
					<%
					}
					%>
					designDoc_<%=cid%> = new org.lightcouch.DesignDocument();
					designDoc_<%=cid%>.setId(desDocId_<%=cid%>);
					<%
					if("CREATE".equals(view_action)){
					%>
						views_<%=cid%> = new java.util.HashMap<String, org.lightcouch.DesignDocument.MapReduce>();
						views_<%=cid%>.put(<%=viewName%>,mapReduce_<%=cid%>);
						designDoc_<%=cid%>.setViews(views_<%=cid%>);
					<%
					}else{
					%>
						System.err.println("You should create a new view for the design document.");
					<%
					}
					%>
					client_<%=cid%>.save(designDoc_<%=cid%>);
				<%
				}else{
					if("CREATE".equals(view_action)){
					%>
						if(designDoc_<%=cid%> != null){
							if(designDoc_<%=cid%>.getViews()!=null){
								views_<%=cid%> = designDoc_<%=cid%>.getViews();
							}else{
								views_<%=cid%> = new java.util.HashMap<String, org.lightcouch.DesignDocument.MapReduce>();
							}
							if(!views_<%=cid%>.containsKey(<%=viewName%>)){
								views_<%=cid%>.put(<%=viewName%>,mapReduce_<%=cid%>);
								designDoc_<%=cid%>.setViews(views_<%=cid%>);
							}
						}else{
							<%
							if("NONE".equals(doc_action)){
							%>
								System.err.println("Design Document named " + <%=docName%> + "not exist");
							<%
							}else{
							%>
								designDoc_<%=cid%> = new org.lightcouch.DesignDocument();
								designDoc_<%=cid%>.setId(desDocId_<%=cid%>);
								views_<%=cid%> = new java.util.HashMap<String, org.lightcouch.DesignDocument.MapReduce>();
								views_<%=cid%>.put(<%=viewName%>,mapReduce_<%=cid%>);
								designDoc_<%=cid%>.setViews(views_<%=cid%>);
							<%
							}
							%>
						}
						client_<%=cid%>.update(designDoc_<%=cid%>);
					<%
					}else{
					%>
						if(designDoc_<%=cid%> == null){
							designDoc_<%=cid%> = new org.lightcouch.DesignDocument();
							designDoc_<%=cid%>.setId(desDocId_<%=cid%>);
							client_<%=cid%>.save(designDoc_<%=cid%>);
						}
					<%
					}
				}//A1:end
			}
			%>
			org.lightcouch.View view_<%=cid%> = client_<%=cid%>.view(viewPath_<%=cid%>);
			<%
			if(startKey!=null && !"".equals(startKey)){
			%>
				view_<%=cid%>.startKey(<%=startKey%>);
			<%
			}	
			if(endKey!=null && !"".equals(endKey)){
			%>
				view_<%=cid%>.endKey(<%=endKey%>);
			<%
			}	
			if(startKeyDocId!=null && !"".equals(startKeyDocId)){
			%>
				view_<%=cid%>.startKeyDocId(<%=startKeyDocId%>);
			<%
			}	
			if(endKeyDocId!=null && !"".equals(endKeyDocId)){
			%>
				view_<%=cid%>.endKeyDocId(<%=endKeyDocId%>);
			<%
			}	
			if (limit != null && limit.length() > 0){
			%>
				view_<%=cid%>.limit(<%=limit%>);
			<%
			}
			if(!isReduce){
			%>
				view_<%=cid%>.includeDocs(<%=include_docs%>);
			<%
			}
			%>
				view_<%=cid%>.descending(<%=descending%>);
			<%
			if(isAddOptions){
				List<Map<String, String>> options = (List<Map<String,String>>)ElementParameterParser.getObjectValueXML(node, "__OPTIONS__");
				for(Map<String,String>option:options){
					if(option.get("PARAMETER")!=null && option.get("VALUE")!=null){
					%>
						options_<%=cid%>.put(<%=option.get("PARAMETER")%>,<%=option.get("VALUE")%>);
					<%
					}
				}
				%>
				org.talend.couchdb.CouchDBUtil.initView(view_<%=cid%>, options_<%=cid%>);
	      	<%
			}
			if(isQueryByView){
			%>
				view_<%=cid%>.reduce(<%=isReduce%>);
				<%
      			if(isReduce && isGroup){
				%>
					view_<%=cid%>.groupLevel(<%=group_level%>);
				<%
	      		}
			}
			%>
			org.lightcouch.ViewResult<com.google.gson.JsonElement,com.google.gson.JsonElement,com.google.gson.JsonObject> results_<%=cid%> = null;
			try{
				results_<%=cid%> = view_<%=cid%>.queryView(com.google.gson.JsonElement.class, com.google.gson.JsonElement.class, com.google.gson.JsonObject.class);
			}catch(org.lightcouch.NoDocumentException e_<%=cid%>){
				System.err.println(e_<%=cid%>.getMessage());
			}
			if(results_<%=cid%> != null){
				for(org.lightcouch.ViewResult<com.google.gson.JsonElement, com.google.gson.JsonElement, com.google.gson.JsonObject>.Rows valueRow_<%=cid%>:results_<%=cid%>.getRows()){
					nb_line_<%=cid%> ++;
				  	<%
				  	if(firstConnName!=null && firstConnName.length()>0){
						if(metadata.getColumn("id")!=null){
						%>
				 			<%=firstConnName%>.id=valueRow_<%=cid%>.getId();
						<%
						}
						if(metadata.getColumn("key")!=null){
						%>
							if(valueRow_<%=cid%>.getKey()!=null){
								com.google.gson.JsonElement key_<%=cid%> = (com.google.gson.JsonElement)valueRow_<%=cid%>.getKey();
								if(key_<%=cid%>.isJsonPrimitive() &&(key_<%=cid%>.getAsJsonPrimitive().isNumber()||(!key_<%=cid%>.isJsonArray()&&key_<%=cid%>
											.getAsJsonPrimitive().isString()))){
									<%=firstConnName%>.key = key_<%=cid%>.getAsString();
								}else if(!key_<%=cid%>.isJsonNull()){
									<%=firstConnName%>.key = client_<%=cid%>.getGson().toJson(key_<%=cid%>);
								}
							}
						<%
						}
						if(metadata.getColumn("value")!=null){
						%>
							if(valueRow_<%=cid%>.getValue()!=null){
								com.google.gson.JsonElement value_<%=cid%> = (com.google.gson.JsonElement)valueRow_<%=cid%>.getValue();
								if(value_<%=cid%>.isJsonPrimitive() &&(value_<%=cid%>.getAsJsonPrimitive().isNumber()||(!value_<%=cid%>.isJsonArray()&&value_<%=cid%>
											.getAsJsonPrimitive().isString()))){
									<%=firstConnName%>.value = value_<%=cid%>.getAsString();
								}else if(!value_<%=cid%>.isJsonNull()){
									<%=firstConnName%>.value = client_<%=cid%>.getGson().toJson(value_<%=cid%>);
								}
								
							}
						<%
						}
						if(metadata.getColumn("jsonDoc")!=null){
						%>
				 			<%=firstConnName%>.jsonDoc = valueRow_<%=cid%><%if(include_docs && !isReduce){%>.getDoc()<%}%>;
						<%
						}
					}
					log4jFileUtil.debugRetriveData(node);
		}
	}
	%>